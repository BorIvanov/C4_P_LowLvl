
4in1row_Demo_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000652c  08100298  08100298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  081067c8  081067c8  000167c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08106808  08106808  00016808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0810680c  0810680c  0001680c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000007c  10000000  08106810  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000120  1000007c  0810688c  0002007c  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  1000019c  0810688c  0002019c  2**0
                  ALLOC
  8 .SharedData   0000000a  38000000  38000000  00030000  2**2
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001628b  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002d94  00000000  00000000  00036337  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000011a8  00000000  00000000  000390d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001040  00000000  00000000  0003a278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003bbc8  00000000  00000000  0003b2b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00017ab6  00000000  00000000  00076e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001849c1  00000000  00000000  0008e936  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  002132f7  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004d58  00000000  00000000  00213348  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08100298 <__do_global_dtors_aux>:
 8100298:	b510      	push	{r4, lr}
 810029a:	4c05      	ldr	r4, [pc, #20]	; (81002b0 <__do_global_dtors_aux+0x18>)
 810029c:	7823      	ldrb	r3, [r4, #0]
 810029e:	b933      	cbnz	r3, 81002ae <__do_global_dtors_aux+0x16>
 81002a0:	4b04      	ldr	r3, [pc, #16]	; (81002b4 <__do_global_dtors_aux+0x1c>)
 81002a2:	b113      	cbz	r3, 81002aa <__do_global_dtors_aux+0x12>
 81002a4:	4804      	ldr	r0, [pc, #16]	; (81002b8 <__do_global_dtors_aux+0x20>)
 81002a6:	f3af 8000 	nop.w
 81002aa:	2301      	movs	r3, #1
 81002ac:	7023      	strb	r3, [r4, #0]
 81002ae:	bd10      	pop	{r4, pc}
 81002b0:	1000007c 	.word	0x1000007c
 81002b4:	00000000 	.word	0x00000000
 81002b8:	081067ac 	.word	0x081067ac

081002bc <frame_dummy>:
 81002bc:	b508      	push	{r3, lr}
 81002be:	4b03      	ldr	r3, [pc, #12]	; (81002cc <frame_dummy+0x10>)
 81002c0:	b11b      	cbz	r3, 81002ca <frame_dummy+0xe>
 81002c2:	4903      	ldr	r1, [pc, #12]	; (81002d0 <frame_dummy+0x14>)
 81002c4:	4803      	ldr	r0, [pc, #12]	; (81002d4 <frame_dummy+0x18>)
 81002c6:	f3af 8000 	nop.w
 81002ca:	bd08      	pop	{r3, pc}
 81002cc:	00000000 	.word	0x00000000
 81002d0:	10000080 	.word	0x10000080
 81002d4:	081067ac 	.word	0x081067ac

081002d8 <__aeabi_drsub>:
 81002d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 81002dc:	e002      	b.n	81002e4 <__adddf3>
 81002de:	bf00      	nop

081002e0 <__aeabi_dsub>:
 81002e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

081002e4 <__adddf3>:
 81002e4:	b530      	push	{r4, r5, lr}
 81002e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 81002ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 81002ee:	ea94 0f05 	teq	r4, r5
 81002f2:	bf08      	it	eq
 81002f4:	ea90 0f02 	teqeq	r0, r2
 81002f8:	bf1f      	itttt	ne
 81002fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 81002fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8100302:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8100306:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 810030a:	f000 80e2 	beq.w	81004d2 <__adddf3+0x1ee>
 810030e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8100312:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8100316:	bfb8      	it	lt
 8100318:	426d      	neglt	r5, r5
 810031a:	dd0c      	ble.n	8100336 <__adddf3+0x52>
 810031c:	442c      	add	r4, r5
 810031e:	ea80 0202 	eor.w	r2, r0, r2
 8100322:	ea81 0303 	eor.w	r3, r1, r3
 8100326:	ea82 0000 	eor.w	r0, r2, r0
 810032a:	ea83 0101 	eor.w	r1, r3, r1
 810032e:	ea80 0202 	eor.w	r2, r0, r2
 8100332:	ea81 0303 	eor.w	r3, r1, r3
 8100336:	2d36      	cmp	r5, #54	; 0x36
 8100338:	bf88      	it	hi
 810033a:	bd30      	pophi	{r4, r5, pc}
 810033c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8100340:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8100344:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8100348:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 810034c:	d002      	beq.n	8100354 <__adddf3+0x70>
 810034e:	4240      	negs	r0, r0
 8100350:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100354:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8100358:	ea4f 3303 	mov.w	r3, r3, lsl #12
 810035c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100360:	d002      	beq.n	8100368 <__adddf3+0x84>
 8100362:	4252      	negs	r2, r2
 8100364:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100368:	ea94 0f05 	teq	r4, r5
 810036c:	f000 80a7 	beq.w	81004be <__adddf3+0x1da>
 8100370:	f1a4 0401 	sub.w	r4, r4, #1
 8100374:	f1d5 0e20 	rsbs	lr, r5, #32
 8100378:	db0d      	blt.n	8100396 <__adddf3+0xb2>
 810037a:	fa02 fc0e 	lsl.w	ip, r2, lr
 810037e:	fa22 f205 	lsr.w	r2, r2, r5
 8100382:	1880      	adds	r0, r0, r2
 8100384:	f141 0100 	adc.w	r1, r1, #0
 8100388:	fa03 f20e 	lsl.w	r2, r3, lr
 810038c:	1880      	adds	r0, r0, r2
 810038e:	fa43 f305 	asr.w	r3, r3, r5
 8100392:	4159      	adcs	r1, r3
 8100394:	e00e      	b.n	81003b4 <__adddf3+0xd0>
 8100396:	f1a5 0520 	sub.w	r5, r5, #32
 810039a:	f10e 0e20 	add.w	lr, lr, #32
 810039e:	2a01      	cmp	r2, #1
 81003a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 81003a4:	bf28      	it	cs
 81003a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 81003aa:	fa43 f305 	asr.w	r3, r3, r5
 81003ae:	18c0      	adds	r0, r0, r3
 81003b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 81003b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81003b8:	d507      	bpl.n	81003ca <__adddf3+0xe6>
 81003ba:	f04f 0e00 	mov.w	lr, #0
 81003be:	f1dc 0c00 	rsbs	ip, ip, #0
 81003c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 81003c6:	eb6e 0101 	sbc.w	r1, lr, r1
 81003ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 81003ce:	d31b      	bcc.n	8100408 <__adddf3+0x124>
 81003d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 81003d4:	d30c      	bcc.n	81003f0 <__adddf3+0x10c>
 81003d6:	0849      	lsrs	r1, r1, #1
 81003d8:	ea5f 0030 	movs.w	r0, r0, rrx
 81003dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 81003e0:	f104 0401 	add.w	r4, r4, #1
 81003e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 81003e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 81003ec:	f080 809a 	bcs.w	8100524 <__adddf3+0x240>
 81003f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 81003f4:	bf08      	it	eq
 81003f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81003fa:	f150 0000 	adcs.w	r0, r0, #0
 81003fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100402:	ea41 0105 	orr.w	r1, r1, r5
 8100406:	bd30      	pop	{r4, r5, pc}
 8100408:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 810040c:	4140      	adcs	r0, r0
 810040e:	eb41 0101 	adc.w	r1, r1, r1
 8100412:	3c01      	subs	r4, #1
 8100414:	bf28      	it	cs
 8100416:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 810041a:	d2e9      	bcs.n	81003f0 <__adddf3+0x10c>
 810041c:	f091 0f00 	teq	r1, #0
 8100420:	bf04      	itt	eq
 8100422:	4601      	moveq	r1, r0
 8100424:	2000      	moveq	r0, #0
 8100426:	fab1 f381 	clz	r3, r1
 810042a:	bf08      	it	eq
 810042c:	3320      	addeq	r3, #32
 810042e:	f1a3 030b 	sub.w	r3, r3, #11
 8100432:	f1b3 0220 	subs.w	r2, r3, #32
 8100436:	da0c      	bge.n	8100452 <__adddf3+0x16e>
 8100438:	320c      	adds	r2, #12
 810043a:	dd08      	ble.n	810044e <__adddf3+0x16a>
 810043c:	f102 0c14 	add.w	ip, r2, #20
 8100440:	f1c2 020c 	rsb	r2, r2, #12
 8100444:	fa01 f00c 	lsl.w	r0, r1, ip
 8100448:	fa21 f102 	lsr.w	r1, r1, r2
 810044c:	e00c      	b.n	8100468 <__adddf3+0x184>
 810044e:	f102 0214 	add.w	r2, r2, #20
 8100452:	bfd8      	it	le
 8100454:	f1c2 0c20 	rsble	ip, r2, #32
 8100458:	fa01 f102 	lsl.w	r1, r1, r2
 810045c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100460:	bfdc      	itt	le
 8100462:	ea41 010c 	orrle.w	r1, r1, ip
 8100466:	4090      	lslle	r0, r2
 8100468:	1ae4      	subs	r4, r4, r3
 810046a:	bfa2      	ittt	ge
 810046c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100470:	4329      	orrge	r1, r5
 8100472:	bd30      	popge	{r4, r5, pc}
 8100474:	ea6f 0404 	mvn.w	r4, r4
 8100478:	3c1f      	subs	r4, #31
 810047a:	da1c      	bge.n	81004b6 <__adddf3+0x1d2>
 810047c:	340c      	adds	r4, #12
 810047e:	dc0e      	bgt.n	810049e <__adddf3+0x1ba>
 8100480:	f104 0414 	add.w	r4, r4, #20
 8100484:	f1c4 0220 	rsb	r2, r4, #32
 8100488:	fa20 f004 	lsr.w	r0, r0, r4
 810048c:	fa01 f302 	lsl.w	r3, r1, r2
 8100490:	ea40 0003 	orr.w	r0, r0, r3
 8100494:	fa21 f304 	lsr.w	r3, r1, r4
 8100498:	ea45 0103 	orr.w	r1, r5, r3
 810049c:	bd30      	pop	{r4, r5, pc}
 810049e:	f1c4 040c 	rsb	r4, r4, #12
 81004a2:	f1c4 0220 	rsb	r2, r4, #32
 81004a6:	fa20 f002 	lsr.w	r0, r0, r2
 81004aa:	fa01 f304 	lsl.w	r3, r1, r4
 81004ae:	ea40 0003 	orr.w	r0, r0, r3
 81004b2:	4629      	mov	r1, r5
 81004b4:	bd30      	pop	{r4, r5, pc}
 81004b6:	fa21 f004 	lsr.w	r0, r1, r4
 81004ba:	4629      	mov	r1, r5
 81004bc:	bd30      	pop	{r4, r5, pc}
 81004be:	f094 0f00 	teq	r4, #0
 81004c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 81004c6:	bf06      	itte	eq
 81004c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 81004cc:	3401      	addeq	r4, #1
 81004ce:	3d01      	subne	r5, #1
 81004d0:	e74e      	b.n	8100370 <__adddf3+0x8c>
 81004d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81004d6:	bf18      	it	ne
 81004d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81004dc:	d029      	beq.n	8100532 <__adddf3+0x24e>
 81004de:	ea94 0f05 	teq	r4, r5
 81004e2:	bf08      	it	eq
 81004e4:	ea90 0f02 	teqeq	r0, r2
 81004e8:	d005      	beq.n	81004f6 <__adddf3+0x212>
 81004ea:	ea54 0c00 	orrs.w	ip, r4, r0
 81004ee:	bf04      	itt	eq
 81004f0:	4619      	moveq	r1, r3
 81004f2:	4610      	moveq	r0, r2
 81004f4:	bd30      	pop	{r4, r5, pc}
 81004f6:	ea91 0f03 	teq	r1, r3
 81004fa:	bf1e      	ittt	ne
 81004fc:	2100      	movne	r1, #0
 81004fe:	2000      	movne	r0, #0
 8100500:	bd30      	popne	{r4, r5, pc}
 8100502:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8100506:	d105      	bne.n	8100514 <__adddf3+0x230>
 8100508:	0040      	lsls	r0, r0, #1
 810050a:	4149      	adcs	r1, r1
 810050c:	bf28      	it	cs
 810050e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8100512:	bd30      	pop	{r4, r5, pc}
 8100514:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8100518:	bf3c      	itt	cc
 810051a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 810051e:	bd30      	popcc	{r4, r5, pc}
 8100520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100524:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8100528:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 810052c:	f04f 0000 	mov.w	r0, #0
 8100530:	bd30      	pop	{r4, r5, pc}
 8100532:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8100536:	bf1a      	itte	ne
 8100538:	4619      	movne	r1, r3
 810053a:	4610      	movne	r0, r2
 810053c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8100540:	bf1c      	itt	ne
 8100542:	460b      	movne	r3, r1
 8100544:	4602      	movne	r2, r0
 8100546:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 810054a:	bf06      	itte	eq
 810054c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8100550:	ea91 0f03 	teqeq	r1, r3
 8100554:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8100558:	bd30      	pop	{r4, r5, pc}
 810055a:	bf00      	nop

0810055c <__aeabi_ui2d>:
 810055c:	f090 0f00 	teq	r0, #0
 8100560:	bf04      	itt	eq
 8100562:	2100      	moveq	r1, #0
 8100564:	4770      	bxeq	lr
 8100566:	b530      	push	{r4, r5, lr}
 8100568:	f44f 6480 	mov.w	r4, #1024	; 0x400
 810056c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100570:	f04f 0500 	mov.w	r5, #0
 8100574:	f04f 0100 	mov.w	r1, #0
 8100578:	e750      	b.n	810041c <__adddf3+0x138>
 810057a:	bf00      	nop

0810057c <__aeabi_i2d>:
 810057c:	f090 0f00 	teq	r0, #0
 8100580:	bf04      	itt	eq
 8100582:	2100      	moveq	r1, #0
 8100584:	4770      	bxeq	lr
 8100586:	b530      	push	{r4, r5, lr}
 8100588:	f44f 6480 	mov.w	r4, #1024	; 0x400
 810058c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100590:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8100594:	bf48      	it	mi
 8100596:	4240      	negmi	r0, r0
 8100598:	f04f 0100 	mov.w	r1, #0
 810059c:	e73e      	b.n	810041c <__adddf3+0x138>
 810059e:	bf00      	nop

081005a0 <__aeabi_f2d>:
 81005a0:	0042      	lsls	r2, r0, #1
 81005a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 81005a6:	ea4f 0131 	mov.w	r1, r1, rrx
 81005aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 81005ae:	bf1f      	itttt	ne
 81005b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 81005b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 81005b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 81005bc:	4770      	bxne	lr
 81005be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 81005c2:	bf08      	it	eq
 81005c4:	4770      	bxeq	lr
 81005c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 81005ca:	bf04      	itt	eq
 81005cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 81005d0:	4770      	bxeq	lr
 81005d2:	b530      	push	{r4, r5, lr}
 81005d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 81005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 81005e0:	e71c      	b.n	810041c <__adddf3+0x138>
 81005e2:	bf00      	nop

081005e4 <__aeabi_ul2d>:
 81005e4:	ea50 0201 	orrs.w	r2, r0, r1
 81005e8:	bf08      	it	eq
 81005ea:	4770      	bxeq	lr
 81005ec:	b530      	push	{r4, r5, lr}
 81005ee:	f04f 0500 	mov.w	r5, #0
 81005f2:	e00a      	b.n	810060a <__aeabi_l2d+0x16>

081005f4 <__aeabi_l2d>:
 81005f4:	ea50 0201 	orrs.w	r2, r0, r1
 81005f8:	bf08      	it	eq
 81005fa:	4770      	bxeq	lr
 81005fc:	b530      	push	{r4, r5, lr}
 81005fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8100602:	d502      	bpl.n	810060a <__aeabi_l2d+0x16>
 8100604:	4240      	negs	r0, r0
 8100606:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 810060a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 810060e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100612:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8100616:	f43f aed8 	beq.w	81003ca <__adddf3+0xe6>
 810061a:	f04f 0203 	mov.w	r2, #3
 810061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8100622:	bf18      	it	ne
 8100624:	3203      	addne	r2, #3
 8100626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 810062a:	bf18      	it	ne
 810062c:	3203      	addne	r2, #3
 810062e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8100632:	f1c2 0320 	rsb	r3, r2, #32
 8100636:	fa00 fc03 	lsl.w	ip, r0, r3
 810063a:	fa20 f002 	lsr.w	r0, r0, r2
 810063e:	fa01 fe03 	lsl.w	lr, r1, r3
 8100642:	ea40 000e 	orr.w	r0, r0, lr
 8100646:	fa21 f102 	lsr.w	r1, r1, r2
 810064a:	4414      	add	r4, r2
 810064c:	e6bd      	b.n	81003ca <__adddf3+0xe6>
 810064e:	bf00      	nop

08100650 <__aeabi_dmul>:
 8100650:	b570      	push	{r4, r5, r6, lr}
 8100652:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8100656:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 810065a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 810065e:	bf1d      	ittte	ne
 8100660:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8100664:	ea94 0f0c 	teqne	r4, ip
 8100668:	ea95 0f0c 	teqne	r5, ip
 810066c:	f000 f8de 	bleq	810082c <__aeabi_dmul+0x1dc>
 8100670:	442c      	add	r4, r5
 8100672:	ea81 0603 	eor.w	r6, r1, r3
 8100676:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 810067a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 810067e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8100682:	bf18      	it	ne
 8100684:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8100688:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 810068c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8100690:	d038      	beq.n	8100704 <__aeabi_dmul+0xb4>
 8100692:	fba0 ce02 	umull	ip, lr, r0, r2
 8100696:	f04f 0500 	mov.w	r5, #0
 810069a:	fbe1 e502 	umlal	lr, r5, r1, r2
 810069e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 81006a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 81006a6:	f04f 0600 	mov.w	r6, #0
 81006aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 81006ae:	f09c 0f00 	teq	ip, #0
 81006b2:	bf18      	it	ne
 81006b4:	f04e 0e01 	orrne.w	lr, lr, #1
 81006b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 81006bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 81006c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 81006c4:	d204      	bcs.n	81006d0 <__aeabi_dmul+0x80>
 81006c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 81006ca:	416d      	adcs	r5, r5
 81006cc:	eb46 0606 	adc.w	r6, r6, r6
 81006d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 81006d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 81006d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 81006dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 81006e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 81006e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 81006e8:	bf88      	it	hi
 81006ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 81006ee:	d81e      	bhi.n	810072e <__aeabi_dmul+0xde>
 81006f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 81006f4:	bf08      	it	eq
 81006f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 81006fa:	f150 0000 	adcs.w	r0, r0, #0
 81006fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100702:	bd70      	pop	{r4, r5, r6, pc}
 8100704:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8100708:	ea46 0101 	orr.w	r1, r6, r1
 810070c:	ea40 0002 	orr.w	r0, r0, r2
 8100710:	ea81 0103 	eor.w	r1, r1, r3
 8100714:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8100718:	bfc2      	ittt	gt
 810071a:	ebd4 050c 	rsbsgt	r5, r4, ip
 810071e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8100722:	bd70      	popgt	{r4, r5, r6, pc}
 8100724:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100728:	f04f 0e00 	mov.w	lr, #0
 810072c:	3c01      	subs	r4, #1
 810072e:	f300 80ab 	bgt.w	8100888 <__aeabi_dmul+0x238>
 8100732:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8100736:	bfde      	ittt	le
 8100738:	2000      	movle	r0, #0
 810073a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 810073e:	bd70      	pople	{r4, r5, r6, pc}
 8100740:	f1c4 0400 	rsb	r4, r4, #0
 8100744:	3c20      	subs	r4, #32
 8100746:	da35      	bge.n	81007b4 <__aeabi_dmul+0x164>
 8100748:	340c      	adds	r4, #12
 810074a:	dc1b      	bgt.n	8100784 <__aeabi_dmul+0x134>
 810074c:	f104 0414 	add.w	r4, r4, #20
 8100750:	f1c4 0520 	rsb	r5, r4, #32
 8100754:	fa00 f305 	lsl.w	r3, r0, r5
 8100758:	fa20 f004 	lsr.w	r0, r0, r4
 810075c:	fa01 f205 	lsl.w	r2, r1, r5
 8100760:	ea40 0002 	orr.w	r0, r0, r2
 8100764:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8100768:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 810076c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8100770:	fa21 f604 	lsr.w	r6, r1, r4
 8100774:	eb42 0106 	adc.w	r1, r2, r6
 8100778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 810077c:	bf08      	it	eq
 810077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8100782:	bd70      	pop	{r4, r5, r6, pc}
 8100784:	f1c4 040c 	rsb	r4, r4, #12
 8100788:	f1c4 0520 	rsb	r5, r4, #32
 810078c:	fa00 f304 	lsl.w	r3, r0, r4
 8100790:	fa20 f005 	lsr.w	r0, r0, r5
 8100794:	fa01 f204 	lsl.w	r2, r1, r4
 8100798:	ea40 0002 	orr.w	r0, r0, r2
 810079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 81007a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 81007a4:	f141 0100 	adc.w	r1, r1, #0
 81007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 81007ac:	bf08      	it	eq
 81007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81007b2:	bd70      	pop	{r4, r5, r6, pc}
 81007b4:	f1c4 0520 	rsb	r5, r4, #32
 81007b8:	fa00 f205 	lsl.w	r2, r0, r5
 81007bc:	ea4e 0e02 	orr.w	lr, lr, r2
 81007c0:	fa20 f304 	lsr.w	r3, r0, r4
 81007c4:	fa01 f205 	lsl.w	r2, r1, r5
 81007c8:	ea43 0302 	orr.w	r3, r3, r2
 81007cc:	fa21 f004 	lsr.w	r0, r1, r4
 81007d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 81007d4:	fa21 f204 	lsr.w	r2, r1, r4
 81007d8:	ea20 0002 	bic.w	r0, r0, r2
 81007dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 81007e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 81007e4:	bf08      	it	eq
 81007e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81007ea:	bd70      	pop	{r4, r5, r6, pc}
 81007ec:	f094 0f00 	teq	r4, #0
 81007f0:	d10f      	bne.n	8100812 <__aeabi_dmul+0x1c2>
 81007f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 81007f6:	0040      	lsls	r0, r0, #1
 81007f8:	eb41 0101 	adc.w	r1, r1, r1
 81007fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100800:	bf08      	it	eq
 8100802:	3c01      	subeq	r4, #1
 8100804:	d0f7      	beq.n	81007f6 <__aeabi_dmul+0x1a6>
 8100806:	ea41 0106 	orr.w	r1, r1, r6
 810080a:	f095 0f00 	teq	r5, #0
 810080e:	bf18      	it	ne
 8100810:	4770      	bxne	lr
 8100812:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8100816:	0052      	lsls	r2, r2, #1
 8100818:	eb43 0303 	adc.w	r3, r3, r3
 810081c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8100820:	bf08      	it	eq
 8100822:	3d01      	subeq	r5, #1
 8100824:	d0f7      	beq.n	8100816 <__aeabi_dmul+0x1c6>
 8100826:	ea43 0306 	orr.w	r3, r3, r6
 810082a:	4770      	bx	lr
 810082c:	ea94 0f0c 	teq	r4, ip
 8100830:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100834:	bf18      	it	ne
 8100836:	ea95 0f0c 	teqne	r5, ip
 810083a:	d00c      	beq.n	8100856 <__aeabi_dmul+0x206>
 810083c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100840:	bf18      	it	ne
 8100842:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100846:	d1d1      	bne.n	81007ec <__aeabi_dmul+0x19c>
 8100848:	ea81 0103 	eor.w	r1, r1, r3
 810084c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100850:	f04f 0000 	mov.w	r0, #0
 8100854:	bd70      	pop	{r4, r5, r6, pc}
 8100856:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 810085a:	bf06      	itte	eq
 810085c:	4610      	moveq	r0, r2
 810085e:	4619      	moveq	r1, r3
 8100860:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100864:	d019      	beq.n	810089a <__aeabi_dmul+0x24a>
 8100866:	ea94 0f0c 	teq	r4, ip
 810086a:	d102      	bne.n	8100872 <__aeabi_dmul+0x222>
 810086c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8100870:	d113      	bne.n	810089a <__aeabi_dmul+0x24a>
 8100872:	ea95 0f0c 	teq	r5, ip
 8100876:	d105      	bne.n	8100884 <__aeabi_dmul+0x234>
 8100878:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 810087c:	bf1c      	itt	ne
 810087e:	4610      	movne	r0, r2
 8100880:	4619      	movne	r1, r3
 8100882:	d10a      	bne.n	810089a <__aeabi_dmul+0x24a>
 8100884:	ea81 0103 	eor.w	r1, r1, r3
 8100888:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 810088c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100890:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8100894:	f04f 0000 	mov.w	r0, #0
 8100898:	bd70      	pop	{r4, r5, r6, pc}
 810089a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 810089e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 81008a2:	bd70      	pop	{r4, r5, r6, pc}

081008a4 <__aeabi_ddiv>:
 81008a4:	b570      	push	{r4, r5, r6, lr}
 81008a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 81008aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 81008ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 81008b2:	bf1d      	ittte	ne
 81008b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 81008b8:	ea94 0f0c 	teqne	r4, ip
 81008bc:	ea95 0f0c 	teqne	r5, ip
 81008c0:	f000 f8a7 	bleq	8100a12 <__aeabi_ddiv+0x16e>
 81008c4:	eba4 0405 	sub.w	r4, r4, r5
 81008c8:	ea81 0e03 	eor.w	lr, r1, r3
 81008cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 81008d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81008d4:	f000 8088 	beq.w	81009e8 <__aeabi_ddiv+0x144>
 81008d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 81008dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 81008e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 81008e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 81008e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 81008ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 81008f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 81008f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 81008f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 81008fc:	429d      	cmp	r5, r3
 81008fe:	bf08      	it	eq
 8100900:	4296      	cmpeq	r6, r2
 8100902:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8100906:	f504 7440 	add.w	r4, r4, #768	; 0x300
 810090a:	d202      	bcs.n	8100912 <__aeabi_ddiv+0x6e>
 810090c:	085b      	lsrs	r3, r3, #1
 810090e:	ea4f 0232 	mov.w	r2, r2, rrx
 8100912:	1ab6      	subs	r6, r6, r2
 8100914:	eb65 0503 	sbc.w	r5, r5, r3
 8100918:	085b      	lsrs	r3, r3, #1
 810091a:	ea4f 0232 	mov.w	r2, r2, rrx
 810091e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8100922:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8100926:	ebb6 0e02 	subs.w	lr, r6, r2
 810092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 810092e:	bf22      	ittt	cs
 8100930:	1ab6      	subcs	r6, r6, r2
 8100932:	4675      	movcs	r5, lr
 8100934:	ea40 000c 	orrcs.w	r0, r0, ip
 8100938:	085b      	lsrs	r3, r3, #1
 810093a:	ea4f 0232 	mov.w	r2, r2, rrx
 810093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100946:	bf22      	ittt	cs
 8100948:	1ab6      	subcs	r6, r6, r2
 810094a:	4675      	movcs	r5, lr
 810094c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8100950:	085b      	lsrs	r3, r3, #1
 8100952:	ea4f 0232 	mov.w	r2, r2, rrx
 8100956:	ebb6 0e02 	subs.w	lr, r6, r2
 810095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 810095e:	bf22      	ittt	cs
 8100960:	1ab6      	subcs	r6, r6, r2
 8100962:	4675      	movcs	r5, lr
 8100964:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8100968:	085b      	lsrs	r3, r3, #1
 810096a:	ea4f 0232 	mov.w	r2, r2, rrx
 810096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100976:	bf22      	ittt	cs
 8100978:	1ab6      	subcs	r6, r6, r2
 810097a:	4675      	movcs	r5, lr
 810097c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8100980:	ea55 0e06 	orrs.w	lr, r5, r6
 8100984:	d018      	beq.n	81009b8 <__aeabi_ddiv+0x114>
 8100986:	ea4f 1505 	mov.w	r5, r5, lsl #4
 810098a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 810098e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8100992:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8100996:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 810099a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 810099e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 81009a2:	d1c0      	bne.n	8100926 <__aeabi_ddiv+0x82>
 81009a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 81009a8:	d10b      	bne.n	81009c2 <__aeabi_ddiv+0x11e>
 81009aa:	ea41 0100 	orr.w	r1, r1, r0
 81009ae:	f04f 0000 	mov.w	r0, #0
 81009b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 81009b6:	e7b6      	b.n	8100926 <__aeabi_ddiv+0x82>
 81009b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 81009bc:	bf04      	itt	eq
 81009be:	4301      	orreq	r1, r0
 81009c0:	2000      	moveq	r0, #0
 81009c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 81009c6:	bf88      	it	hi
 81009c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 81009cc:	f63f aeaf 	bhi.w	810072e <__aeabi_dmul+0xde>
 81009d0:	ebb5 0c03 	subs.w	ip, r5, r3
 81009d4:	bf04      	itt	eq
 81009d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 81009da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81009de:	f150 0000 	adcs.w	r0, r0, #0
 81009e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81009e6:	bd70      	pop	{r4, r5, r6, pc}
 81009e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 81009ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 81009f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 81009f4:	bfc2      	ittt	gt
 81009f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 81009fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 81009fe:	bd70      	popgt	{r4, r5, r6, pc}
 8100a00:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100a04:	f04f 0e00 	mov.w	lr, #0
 8100a08:	3c01      	subs	r4, #1
 8100a0a:	e690      	b.n	810072e <__aeabi_dmul+0xde>
 8100a0c:	ea45 0e06 	orr.w	lr, r5, r6
 8100a10:	e68d      	b.n	810072e <__aeabi_dmul+0xde>
 8100a12:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100a16:	ea94 0f0c 	teq	r4, ip
 8100a1a:	bf08      	it	eq
 8100a1c:	ea95 0f0c 	teqeq	r5, ip
 8100a20:	f43f af3b 	beq.w	810089a <__aeabi_dmul+0x24a>
 8100a24:	ea94 0f0c 	teq	r4, ip
 8100a28:	d10a      	bne.n	8100a40 <__aeabi_ddiv+0x19c>
 8100a2a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100a2e:	f47f af34 	bne.w	810089a <__aeabi_dmul+0x24a>
 8100a32:	ea95 0f0c 	teq	r5, ip
 8100a36:	f47f af25 	bne.w	8100884 <__aeabi_dmul+0x234>
 8100a3a:	4610      	mov	r0, r2
 8100a3c:	4619      	mov	r1, r3
 8100a3e:	e72c      	b.n	810089a <__aeabi_dmul+0x24a>
 8100a40:	ea95 0f0c 	teq	r5, ip
 8100a44:	d106      	bne.n	8100a54 <__aeabi_ddiv+0x1b0>
 8100a46:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100a4a:	f43f aefd 	beq.w	8100848 <__aeabi_dmul+0x1f8>
 8100a4e:	4610      	mov	r0, r2
 8100a50:	4619      	mov	r1, r3
 8100a52:	e722      	b.n	810089a <__aeabi_dmul+0x24a>
 8100a54:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100a58:	bf18      	it	ne
 8100a5a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100a5e:	f47f aec5 	bne.w	81007ec <__aeabi_dmul+0x19c>
 8100a62:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8100a66:	f47f af0d 	bne.w	8100884 <__aeabi_dmul+0x234>
 8100a6a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8100a6e:	f47f aeeb 	bne.w	8100848 <__aeabi_dmul+0x1f8>
 8100a72:	e712      	b.n	810089a <__aeabi_dmul+0x24a>

08100a74 <__gedf2>:
 8100a74:	f04f 3cff 	mov.w	ip, #4294967295
 8100a78:	e006      	b.n	8100a88 <__cmpdf2+0x4>
 8100a7a:	bf00      	nop

08100a7c <__ledf2>:
 8100a7c:	f04f 0c01 	mov.w	ip, #1
 8100a80:	e002      	b.n	8100a88 <__cmpdf2+0x4>
 8100a82:	bf00      	nop

08100a84 <__cmpdf2>:
 8100a84:	f04f 0c01 	mov.w	ip, #1
 8100a88:	f84d cd04 	str.w	ip, [sp, #-4]!
 8100a8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100a98:	bf18      	it	ne
 8100a9a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8100a9e:	d01b      	beq.n	8100ad8 <__cmpdf2+0x54>
 8100aa0:	b001      	add	sp, #4
 8100aa2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8100aa6:	bf0c      	ite	eq
 8100aa8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8100aac:	ea91 0f03 	teqne	r1, r3
 8100ab0:	bf02      	ittt	eq
 8100ab2:	ea90 0f02 	teqeq	r0, r2
 8100ab6:	2000      	moveq	r0, #0
 8100ab8:	4770      	bxeq	lr
 8100aba:	f110 0f00 	cmn.w	r0, #0
 8100abe:	ea91 0f03 	teq	r1, r3
 8100ac2:	bf58      	it	pl
 8100ac4:	4299      	cmppl	r1, r3
 8100ac6:	bf08      	it	eq
 8100ac8:	4290      	cmpeq	r0, r2
 8100aca:	bf2c      	ite	cs
 8100acc:	17d8      	asrcs	r0, r3, #31
 8100ace:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8100ad2:	f040 0001 	orr.w	r0, r0, #1
 8100ad6:	4770      	bx	lr
 8100ad8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100ae0:	d102      	bne.n	8100ae8 <__cmpdf2+0x64>
 8100ae2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100ae6:	d107      	bne.n	8100af8 <__cmpdf2+0x74>
 8100ae8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100aec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100af0:	d1d6      	bne.n	8100aa0 <__cmpdf2+0x1c>
 8100af2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100af6:	d0d3      	beq.n	8100aa0 <__cmpdf2+0x1c>
 8100af8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8100afc:	4770      	bx	lr
 8100afe:	bf00      	nop

08100b00 <__aeabi_cdrcmple>:
 8100b00:	4684      	mov	ip, r0
 8100b02:	4610      	mov	r0, r2
 8100b04:	4662      	mov	r2, ip
 8100b06:	468c      	mov	ip, r1
 8100b08:	4619      	mov	r1, r3
 8100b0a:	4663      	mov	r3, ip
 8100b0c:	e000      	b.n	8100b10 <__aeabi_cdcmpeq>
 8100b0e:	bf00      	nop

08100b10 <__aeabi_cdcmpeq>:
 8100b10:	b501      	push	{r0, lr}
 8100b12:	f7ff ffb7 	bl	8100a84 <__cmpdf2>
 8100b16:	2800      	cmp	r0, #0
 8100b18:	bf48      	it	mi
 8100b1a:	f110 0f00 	cmnmi.w	r0, #0
 8100b1e:	bd01      	pop	{r0, pc}

08100b20 <__aeabi_dcmpeq>:
 8100b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100b24:	f7ff fff4 	bl	8100b10 <__aeabi_cdcmpeq>
 8100b28:	bf0c      	ite	eq
 8100b2a:	2001      	moveq	r0, #1
 8100b2c:	2000      	movne	r0, #0
 8100b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100b32:	bf00      	nop

08100b34 <__aeabi_dcmplt>:
 8100b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100b38:	f7ff ffea 	bl	8100b10 <__aeabi_cdcmpeq>
 8100b3c:	bf34      	ite	cc
 8100b3e:	2001      	movcc	r0, #1
 8100b40:	2000      	movcs	r0, #0
 8100b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8100b46:	bf00      	nop

08100b48 <__aeabi_dcmple>:
 8100b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100b4c:	f7ff ffe0 	bl	8100b10 <__aeabi_cdcmpeq>
 8100b50:	bf94      	ite	ls
 8100b52:	2001      	movls	r0, #1
 8100b54:	2000      	movhi	r0, #0
 8100b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8100b5a:	bf00      	nop

08100b5c <__aeabi_dcmpge>:
 8100b5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100b60:	f7ff ffce 	bl	8100b00 <__aeabi_cdrcmple>
 8100b64:	bf94      	ite	ls
 8100b66:	2001      	movls	r0, #1
 8100b68:	2000      	movhi	r0, #0
 8100b6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8100b6e:	bf00      	nop

08100b70 <__aeabi_dcmpgt>:
 8100b70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100b74:	f7ff ffc4 	bl	8100b00 <__aeabi_cdrcmple>
 8100b78:	bf34      	ite	cc
 8100b7a:	2001      	movcc	r0, #1
 8100b7c:	2000      	movcs	r0, #0
 8100b7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100b82:	bf00      	nop

08100b84 <__aeabi_dcmpun>:
 8100b84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b8c:	d102      	bne.n	8100b94 <__aeabi_dcmpun+0x10>
 8100b8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100b92:	d10a      	bne.n	8100baa <__aeabi_dcmpun+0x26>
 8100b94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100b98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b9c:	d102      	bne.n	8100ba4 <__aeabi_dcmpun+0x20>
 8100b9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100ba2:	d102      	bne.n	8100baa <__aeabi_dcmpun+0x26>
 8100ba4:	f04f 0000 	mov.w	r0, #0
 8100ba8:	4770      	bx	lr
 8100baa:	f04f 0001 	mov.w	r0, #1
 8100bae:	4770      	bx	lr

08100bb0 <__aeabi_d2uiz>:
 8100bb0:	004a      	lsls	r2, r1, #1
 8100bb2:	d211      	bcs.n	8100bd8 <__aeabi_d2uiz+0x28>
 8100bb4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8100bb8:	d211      	bcs.n	8100bde <__aeabi_d2uiz+0x2e>
 8100bba:	d50d      	bpl.n	8100bd8 <__aeabi_d2uiz+0x28>
 8100bbc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8100bc0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100bc4:	d40e      	bmi.n	8100be4 <__aeabi_d2uiz+0x34>
 8100bc6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100bca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100bce:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100bd2:	fa23 f002 	lsr.w	r0, r3, r2
 8100bd6:	4770      	bx	lr
 8100bd8:	f04f 0000 	mov.w	r0, #0
 8100bdc:	4770      	bx	lr
 8100bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100be2:	d102      	bne.n	8100bea <__aeabi_d2uiz+0x3a>
 8100be4:	f04f 30ff 	mov.w	r0, #4294967295
 8100be8:	4770      	bx	lr
 8100bea:	f04f 0000 	mov.w	r0, #0
 8100bee:	4770      	bx	lr

08100bf0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8100bf0:	b480      	push	{r7}
 8100bf2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8100bf4:	4b09      	ldr	r3, [pc, #36]	; (8100c1c <SystemInit+0x2c>)
 8100bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8100bfa:	4a08      	ldr	r2, [pc, #32]	; (8100c1c <SystemInit+0x2c>)
 8100bfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8100c00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8100c04:	4b05      	ldr	r3, [pc, #20]	; (8100c1c <SystemInit+0x2c>)
 8100c06:	691b      	ldr	r3, [r3, #16]
 8100c08:	4a04      	ldr	r2, [pc, #16]	; (8100c1c <SystemInit+0x2c>)
 8100c0a:	f043 0310 	orr.w	r3, r3, #16
 8100c0e:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8100c10:	bf00      	nop
 8100c12:	46bd      	mov	sp, r7
 8100c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100c18:	4770      	bx	lr
 8100c1a:	bf00      	nop
 8100c1c:	e000ed00 	.word	0xe000ed00

08100c20 <VCNL4010_Init>:
 *      Author: Pascal
 */

#include "VCNL4010.h"

void VCNL4010_Init(const VCNL4010* const self){
 8100c20:	b580      	push	{r7, lr}
 8100c22:	b086      	sub	sp, #24
 8100c24:	af02      	add	r7, sp, #8
 8100c26:	6078      	str	r0, [r7, #4]
	uint8_t led_ma = 0x0A;
 8100c28:	230a      	movs	r3, #10
 8100c2a:	73bb      	strb	r3, [r7, #14]
	uint8_t com_en = 0x03;
 8100c2c:	2303      	movs	r3, #3
 8100c2e:	737b      	strb	r3, [r7, #13]
	HAL_StatusTypeDef retFunc;
	retFunc = i2c_CheckDev(self->bus, self->base_addr);
 8100c30:	687b      	ldr	r3, [r7, #4]
 8100c32:	685a      	ldr	r2, [r3, #4]
 8100c34:	687b      	ldr	r3, [r7, #4]
 8100c36:	781b      	ldrb	r3, [r3, #0]
 8100c38:	4619      	mov	r1, r3
 8100c3a:	4610      	mov	r0, r2
 8100c3c:	f000 f9d8 	bl	8100ff0 <i2c_CheckDev>
 8100c40:	4603      	mov	r3, r0
 8100c42:	73fb      	strb	r3, [r7, #15]

	if (retFunc == HAL_OK){
 8100c44:	7bfb      	ldrb	r3, [r7, #15]
 8100c46:	2b00      	cmp	r3, #0
 8100c48:	d11c      	bne.n	8100c84 <VCNL4010_Init+0x64>
		i2c_Transmit(self->bus, self->base_addr, VCNL4010_LED_REG, 1, &led_ma, 1);
 8100c4a:	687b      	ldr	r3, [r7, #4]
 8100c4c:	6858      	ldr	r0, [r3, #4]
 8100c4e:	687b      	ldr	r3, [r7, #4]
 8100c50:	7819      	ldrb	r1, [r3, #0]
 8100c52:	2301      	movs	r3, #1
 8100c54:	9301      	str	r3, [sp, #4]
 8100c56:	f107 030e 	add.w	r3, r7, #14
 8100c5a:	9300      	str	r3, [sp, #0]
 8100c5c:	2301      	movs	r3, #1
 8100c5e:	2283      	movs	r2, #131	; 0x83
 8100c60:	f000 f9dd 	bl	810101e <i2c_Transmit>
		i2c_Transmit(self->bus, self->base_addr, VCNL4010_COM_REG, 1, &com_en, 1);
 8100c64:	687b      	ldr	r3, [r7, #4]
 8100c66:	6858      	ldr	r0, [r3, #4]
 8100c68:	687b      	ldr	r3, [r7, #4]
 8100c6a:	7819      	ldrb	r1, [r3, #0]
 8100c6c:	2301      	movs	r3, #1
 8100c6e:	9301      	str	r3, [sp, #4]
 8100c70:	f107 030d 	add.w	r3, r7, #13
 8100c74:	9300      	str	r3, [sp, #0]
 8100c76:	2301      	movs	r3, #1
 8100c78:	2280      	movs	r2, #128	; 0x80
 8100c7a:	f000 f9d0 	bl	810101e <i2c_Transmit>
		HAL_Delay(1);
 8100c7e:	2001      	movs	r0, #1
 8100c80:	f000 ffa0 	bl	8101bc4 <HAL_Delay>
	} else {
	}
}
 8100c84:	bf00      	nop
 8100c86:	3710      	adds	r7, #16
 8100c88:	46bd      	mov	sp, r7
 8100c8a:	bd80      	pop	{r7, pc}

08100c8c <VCNL4010_ReceiveProxy>:

uint16_t VCNL4010_ReceiveProxy(const VCNL4010* const self){
 8100c8c:	b580      	push	{r7, lr}
 8100c8e:	b086      	sub	sp, #24
 8100c90:	af02      	add	r7, sp, #8
 8100c92:	6078      	str	r0, [r7, #4]
	uint8_t buf[2];
	uint16_t val = 0;
 8100c94:	2300      	movs	r3, #0
 8100c96:	81fb      	strh	r3, [r7, #14]
	HAL_StatusTypeDef retFunc;

	retFunc = i2c_Receive(self->bus, self->base_addr, VCNL4010_PROXY_REG, 1, buf, sizeof(buf));
 8100c98:	687b      	ldr	r3, [r7, #4]
 8100c9a:	6858      	ldr	r0, [r3, #4]
 8100c9c:	687b      	ldr	r3, [r7, #4]
 8100c9e:	7819      	ldrb	r1, [r3, #0]
 8100ca0:	2302      	movs	r3, #2
 8100ca2:	9301      	str	r3, [sp, #4]
 8100ca4:	f107 0308 	add.w	r3, r7, #8
 8100ca8:	9300      	str	r3, [sp, #0]
 8100caa:	2301      	movs	r3, #1
 8100cac:	2287      	movs	r2, #135	; 0x87
 8100cae:	f000 f9df 	bl	8101070 <i2c_Receive>
 8100cb2:	4603      	mov	r3, r0
 8100cb4:	737b      	strb	r3, [r7, #13]
	if (retFunc != HAL_OK){
 8100cb6:	7b7b      	ldrb	r3, [r7, #13]
 8100cb8:	2b00      	cmp	r3, #0
 8100cba:	d002      	beq.n	8100cc2 <VCNL4010_ReceiveProxy+0x36>
		val = 0;
 8100cbc:	2300      	movs	r3, #0
 8100cbe:	81fb      	strh	r3, [r7, #14]
 8100cc0:	e007      	b.n	8100cd2 <VCNL4010_ReceiveProxy+0x46>
	} else {
		val = ((uint16_t)buf[0]<<8) | buf[1];
 8100cc2:	7a3b      	ldrb	r3, [r7, #8]
 8100cc4:	021b      	lsls	r3, r3, #8
 8100cc6:	b21a      	sxth	r2, r3
 8100cc8:	7a7b      	ldrb	r3, [r7, #9]
 8100cca:	b21b      	sxth	r3, r3
 8100ccc:	4313      	orrs	r3, r2
 8100cce:	b21b      	sxth	r3, r3
 8100cd0:	81fb      	strh	r3, [r7, #14]
	}
	return val;
 8100cd2:	89fb      	ldrh	r3, [r7, #14]
}
 8100cd4:	4618      	mov	r0, r3
 8100cd6:	3710      	adds	r7, #16
 8100cd8:	46bd      	mov	sp, r7
 8100cda:	bd80      	pop	{r7, pc}

08100cdc <VCNL4010_Create>:

VCNL4010 VCNL4010_Create(uint8_t addr, I2C_HandleTypeDef* inBus){
 8100cdc:	b480      	push	{r7}
 8100cde:	b087      	sub	sp, #28
 8100ce0:	af00      	add	r7, sp, #0
 8100ce2:	60f8      	str	r0, [r7, #12]
 8100ce4:	460b      	mov	r3, r1
 8100ce6:	607a      	str	r2, [r7, #4]
 8100ce8:	72fb      	strb	r3, [r7, #11]
	VCNL4010 create = { addr, inBus};
 8100cea:	7afb      	ldrb	r3, [r7, #11]
 8100cec:	743b      	strb	r3, [r7, #16]
 8100cee:	687b      	ldr	r3, [r7, #4]
 8100cf0:	617b      	str	r3, [r7, #20]
	return create;
 8100cf2:	68fb      	ldr	r3, [r7, #12]
 8100cf4:	461a      	mov	r2, r3
 8100cf6:	f107 0310 	add.w	r3, r7, #16
 8100cfa:	e893 0003 	ldmia.w	r3, {r0, r1}
 8100cfe:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8100d02:	68f8      	ldr	r0, [r7, #12]
 8100d04:	371c      	adds	r7, #28
 8100d06:	46bd      	mov	sp, r7
 8100d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100d0c:	4770      	bx	lr
	...

08100d10 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8100d10:	b580      	push	{r7, lr}
 8100d12:	b08a      	sub	sp, #40	; 0x28
 8100d14:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100d16:	f107 0314 	add.w	r3, r7, #20
 8100d1a:	2200      	movs	r2, #0
 8100d1c:	601a      	str	r2, [r3, #0]
 8100d1e:	605a      	str	r2, [r3, #4]
 8100d20:	609a      	str	r2, [r3, #8]
 8100d22:	60da      	str	r2, [r3, #12]
 8100d24:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8100d26:	4b50      	ldr	r3, [pc, #320]	; (8100e68 <MX_GPIO_Init+0x158>)
 8100d28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100d2c:	4a4e      	ldr	r2, [pc, #312]	; (8100e68 <MX_GPIO_Init+0x158>)
 8100d2e:	f043 0301 	orr.w	r3, r3, #1
 8100d32:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100d36:	4b4c      	ldr	r3, [pc, #304]	; (8100e68 <MX_GPIO_Init+0x158>)
 8100d38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100d3c:	f003 0301 	and.w	r3, r3, #1
 8100d40:	613b      	str	r3, [r7, #16]
 8100d42:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8100d44:	4b48      	ldr	r3, [pc, #288]	; (8100e68 <MX_GPIO_Init+0x158>)
 8100d46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100d4a:	4a47      	ldr	r2, [pc, #284]	; (8100e68 <MX_GPIO_Init+0x158>)
 8100d4c:	f043 0304 	orr.w	r3, r3, #4
 8100d50:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100d54:	4b44      	ldr	r3, [pc, #272]	; (8100e68 <MX_GPIO_Init+0x158>)
 8100d56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100d5a:	f003 0304 	and.w	r3, r3, #4
 8100d5e:	60fb      	str	r3, [r7, #12]
 8100d60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8100d62:	4b41      	ldr	r3, [pc, #260]	; (8100e68 <MX_GPIO_Init+0x158>)
 8100d64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100d68:	4a3f      	ldr	r2, [pc, #252]	; (8100e68 <MX_GPIO_Init+0x158>)
 8100d6a:	f043 0308 	orr.w	r3, r3, #8
 8100d6e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100d72:	4b3d      	ldr	r3, [pc, #244]	; (8100e68 <MX_GPIO_Init+0x158>)
 8100d74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100d78:	f003 0308 	and.w	r3, r3, #8
 8100d7c:	60bb      	str	r3, [r7, #8]
 8100d7e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8100d80:	4b39      	ldr	r3, [pc, #228]	; (8100e68 <MX_GPIO_Init+0x158>)
 8100d82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100d86:	4a38      	ldr	r2, [pc, #224]	; (8100e68 <MX_GPIO_Init+0x158>)
 8100d88:	f043 0302 	orr.w	r3, r3, #2
 8100d8c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100d90:	4b35      	ldr	r3, [pc, #212]	; (8100e68 <MX_GPIO_Init+0x158>)
 8100d92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100d96:	f003 0302 	and.w	r3, r3, #2
 8100d9a:	607b      	str	r3, [r7, #4]
 8100d9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8100d9e:	4b32      	ldr	r3, [pc, #200]	; (8100e68 <MX_GPIO_Init+0x158>)
 8100da0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100da4:	4a30      	ldr	r2, [pc, #192]	; (8100e68 <MX_GPIO_Init+0x158>)
 8100da6:	f043 0310 	orr.w	r3, r3, #16
 8100daa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100dae:	4b2e      	ldr	r3, [pc, #184]	; (8100e68 <MX_GPIO_Init+0x158>)
 8100db0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100db4:	f003 0310 	and.w	r3, r3, #16
 8100db8:	603b      	str	r3, [r7, #0]
 8100dba:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Direction_X_GPIO_Port, Direction_X_Pin, GPIO_PIN_RESET);
 8100dbc:	2200      	movs	r2, #0
 8100dbe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8100dc2:	482a      	ldr	r0, [pc, #168]	; (8100e6c <MX_GPIO_Init+0x15c>)
 8100dc4:	f001 fa0e 	bl	81021e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Ready_X_GPIO_Port, Ready_X_Pin, GPIO_PIN_RESET);
 8100dc8:	2200      	movs	r2, #0
 8100dca:	2180      	movs	r1, #128	; 0x80
 8100dcc:	4828      	ldr	r0, [pc, #160]	; (8100e70 <MX_GPIO_Init+0x160>)
 8100dce:	f001 fa09 	bl	81021e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8100dd2:	2200      	movs	r2, #0
 8100dd4:	2102      	movs	r1, #2
 8100dd6:	4827      	ldr	r0, [pc, #156]	; (8100e74 <MX_GPIO_Init+0x164>)
 8100dd8:	f001 fa04 	bl	81021e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Home_X_Pin;
 8100ddc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8100de0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8100de2:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8100de6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8100de8:	2302      	movs	r3, #2
 8100dea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Home_X_GPIO_Port, &GPIO_InitStruct);
 8100dec:	f107 0314 	add.w	r3, r7, #20
 8100df0:	4619      	mov	r1, r3
 8100df2:	481e      	ldr	r0, [pc, #120]	; (8100e6c <MX_GPIO_Init+0x15c>)
 8100df4:	f001 f82e 	bl	8101e54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Direction_X_Pin;
 8100df8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8100dfc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8100dfe:	2301      	movs	r3, #1
 8100e00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8100e02:	2302      	movs	r3, #2
 8100e04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8100e06:	2302      	movs	r3, #2
 8100e08:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Direction_X_GPIO_Port, &GPIO_InitStruct);
 8100e0a:	f107 0314 	add.w	r3, r7, #20
 8100e0e:	4619      	mov	r1, r3
 8100e10:	4816      	ldr	r0, [pc, #88]	; (8100e6c <MX_GPIO_Init+0x15c>)
 8100e12:	f001 f81f 	bl	8101e54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Ready_X_Pin;
 8100e16:	2380      	movs	r3, #128	; 0x80
 8100e18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8100e1a:	2301      	movs	r3, #1
 8100e1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8100e1e:	2302      	movs	r3, #2
 8100e20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8100e22:	2302      	movs	r3, #2
 8100e24:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Ready_X_GPIO_Port, &GPIO_InitStruct);
 8100e26:	f107 0314 	add.w	r3, r7, #20
 8100e2a:	4619      	mov	r1, r3
 8100e2c:	4810      	ldr	r0, [pc, #64]	; (8100e70 <MX_GPIO_Init+0x160>)
 8100e2e:	f001 f811 	bl	8101e54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8100e32:	2302      	movs	r3, #2
 8100e34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8100e36:	2301      	movs	r3, #1
 8100e38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100e3a:	2300      	movs	r3, #0
 8100e3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100e3e:	2300      	movs	r3, #0
 8100e40:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8100e42:	f107 0314 	add.w	r3, r7, #20
 8100e46:	4619      	mov	r1, r3
 8100e48:	480a      	ldr	r0, [pc, #40]	; (8100e74 <MX_GPIO_Init+0x164>)
 8100e4a:	f001 f803 	bl	8101e54 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8100e4e:	2200      	movs	r2, #0
 8100e50:	2100      	movs	r1, #0
 8100e52:	2028      	movs	r0, #40	; 0x28
 8100e54:	f000 ffb5 	bl	8101dc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8100e58:	2028      	movs	r0, #40	; 0x28
 8100e5a:	f000 ffcc 	bl	8101df6 <HAL_NVIC_EnableIRQ>

}
 8100e5e:	bf00      	nop
 8100e60:	3728      	adds	r7, #40	; 0x28
 8100e62:	46bd      	mov	sp, r7
 8100e64:	bd80      	pop	{r7, pc}
 8100e66:	bf00      	nop
 8100e68:	58024400 	.word	0x58024400
 8100e6c:	58020800 	.word	0x58020800
 8100e70:	58020c00 	.word	0x58020c00
 8100e74:	58021000 	.word	0x58021000

08100e78 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8100e78:	b580      	push	{r7, lr}
 8100e7a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8100e7c:	4b1b      	ldr	r3, [pc, #108]	; (8100eec <MX_I2C1_Init+0x74>)
 8100e7e:	4a1c      	ldr	r2, [pc, #112]	; (8100ef0 <MX_I2C1_Init+0x78>)
 8100e80:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x107075B0;
 8100e82:	4b1a      	ldr	r3, [pc, #104]	; (8100eec <MX_I2C1_Init+0x74>)
 8100e84:	4a1b      	ldr	r2, [pc, #108]	; (8100ef4 <MX_I2C1_Init+0x7c>)
 8100e86:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8100e88:	4b18      	ldr	r3, [pc, #96]	; (8100eec <MX_I2C1_Init+0x74>)
 8100e8a:	2200      	movs	r2, #0
 8100e8c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8100e8e:	4b17      	ldr	r3, [pc, #92]	; (8100eec <MX_I2C1_Init+0x74>)
 8100e90:	2201      	movs	r2, #1
 8100e92:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8100e94:	4b15      	ldr	r3, [pc, #84]	; (8100eec <MX_I2C1_Init+0x74>)
 8100e96:	2200      	movs	r2, #0
 8100e98:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8100e9a:	4b14      	ldr	r3, [pc, #80]	; (8100eec <MX_I2C1_Init+0x74>)
 8100e9c:	2200      	movs	r2, #0
 8100e9e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8100ea0:	4b12      	ldr	r3, [pc, #72]	; (8100eec <MX_I2C1_Init+0x74>)
 8100ea2:	2200      	movs	r2, #0
 8100ea4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8100ea6:	4b11      	ldr	r3, [pc, #68]	; (8100eec <MX_I2C1_Init+0x74>)
 8100ea8:	2200      	movs	r2, #0
 8100eaa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8100eac:	4b0f      	ldr	r3, [pc, #60]	; (8100eec <MX_I2C1_Init+0x74>)
 8100eae:	2200      	movs	r2, #0
 8100eb0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8100eb2:	480e      	ldr	r0, [pc, #56]	; (8100eec <MX_I2C1_Init+0x74>)
 8100eb4:	f001 fa24 	bl	8102300 <HAL_I2C_Init>
 8100eb8:	4603      	mov	r3, r0
 8100eba:	2b00      	cmp	r3, #0
 8100ebc:	d001      	beq.n	8100ec2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8100ebe:	f000 fa21 	bl	8101304 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8100ec2:	2100      	movs	r1, #0
 8100ec4:	4809      	ldr	r0, [pc, #36]	; (8100eec <MX_I2C1_Init+0x74>)
 8100ec6:	f002 f887 	bl	8102fd8 <HAL_I2CEx_ConfigAnalogFilter>
 8100eca:	4603      	mov	r3, r0
 8100ecc:	2b00      	cmp	r3, #0
 8100ece:	d001      	beq.n	8100ed4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8100ed0:	f000 fa18 	bl	8101304 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8100ed4:	2100      	movs	r1, #0
 8100ed6:	4805      	ldr	r0, [pc, #20]	; (8100eec <MX_I2C1_Init+0x74>)
 8100ed8:	f002 f8c9 	bl	810306e <HAL_I2CEx_ConfigDigitalFilter>
 8100edc:	4603      	mov	r3, r0
 8100ede:	2b00      	cmp	r3, #0
 8100ee0:	d001      	beq.n	8100ee6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8100ee2:	f000 fa0f 	bl	8101304 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8100ee6:	bf00      	nop
 8100ee8:	bd80      	pop	{r7, pc}
 8100eea:	bf00      	nop
 8100eec:	10000098 	.word	0x10000098
 8100ef0:	40005400 	.word	0x40005400
 8100ef4:	107075b0 	.word	0x107075b0

08100ef8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8100ef8:	b580      	push	{r7, lr}
 8100efa:	b0b8      	sub	sp, #224	; 0xe0
 8100efc:	af00      	add	r7, sp, #0
 8100efe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100f00:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8100f04:	2200      	movs	r2, #0
 8100f06:	601a      	str	r2, [r3, #0]
 8100f08:	605a      	str	r2, [r3, #4]
 8100f0a:	609a      	str	r2, [r3, #8]
 8100f0c:	60da      	str	r2, [r3, #12]
 8100f0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8100f10:	f107 0310 	add.w	r3, r7, #16
 8100f14:	22bc      	movs	r2, #188	; 0xbc
 8100f16:	2100      	movs	r1, #0
 8100f18:	4618      	mov	r0, r3
 8100f1a:	f004 fd23 	bl	8105964 <memset>
  if(i2cHandle->Instance==I2C1)
 8100f1e:	687b      	ldr	r3, [r7, #4]
 8100f20:	681b      	ldr	r3, [r3, #0]
 8100f22:	4a30      	ldr	r2, [pc, #192]	; (8100fe4 <HAL_I2C_MspInit+0xec>)
 8100f24:	4293      	cmp	r3, r2
 8100f26:	d158      	bne.n	8100fda <HAL_I2C_MspInit+0xe2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8100f28:	2308      	movs	r3, #8
 8100f2a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8100f2c:	2300      	movs	r3, #0
 8100f2e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8100f32:	f107 0310 	add.w	r3, r7, #16
 8100f36:	4618      	mov	r0, r3
 8100f38:	f002 fae8 	bl	810350c <HAL_RCCEx_PeriphCLKConfig>
 8100f3c:	4603      	mov	r3, r0
 8100f3e:	2b00      	cmp	r3, #0
 8100f40:	d001      	beq.n	8100f46 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8100f42:	f000 f9df 	bl	8101304 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8100f46:	4b28      	ldr	r3, [pc, #160]	; (8100fe8 <HAL_I2C_MspInit+0xf0>)
 8100f48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100f4c:	4a26      	ldr	r2, [pc, #152]	; (8100fe8 <HAL_I2C_MspInit+0xf0>)
 8100f4e:	f043 0302 	orr.w	r3, r3, #2
 8100f52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100f56:	4b24      	ldr	r3, [pc, #144]	; (8100fe8 <HAL_I2C_MspInit+0xf0>)
 8100f58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100f5c:	f003 0302 	and.w	r3, r3, #2
 8100f60:	60fb      	str	r3, [r7, #12]
 8100f62:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8100f64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8100f68:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8100f6c:	2312      	movs	r3, #18
 8100f6e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100f72:	2300      	movs	r3, #0
 8100f74:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100f78:	2300      	movs	r3, #0
 8100f7a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8100f7e:	2304      	movs	r3, #4
 8100f80:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8100f84:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8100f88:	4619      	mov	r1, r3
 8100f8a:	4818      	ldr	r0, [pc, #96]	; (8100fec <HAL_I2C_MspInit+0xf4>)
 8100f8c:	f000 ff62 	bl	8101e54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8100f90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8100f94:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8100f98:	2312      	movs	r3, #18
 8100f9a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8100f9e:	2301      	movs	r3, #1
 8100fa0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100fa4:	2300      	movs	r3, #0
 8100fa6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8100faa:	2304      	movs	r3, #4
 8100fac:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8100fb0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8100fb4:	4619      	mov	r1, r3
 8100fb6:	480d      	ldr	r0, [pc, #52]	; (8100fec <HAL_I2C_MspInit+0xf4>)
 8100fb8:	f000 ff4c 	bl	8101e54 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8100fbc:	4b0a      	ldr	r3, [pc, #40]	; (8100fe8 <HAL_I2C_MspInit+0xf0>)
 8100fbe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8100fc2:	4a09      	ldr	r2, [pc, #36]	; (8100fe8 <HAL_I2C_MspInit+0xf0>)
 8100fc4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8100fc8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8100fcc:	4b06      	ldr	r3, [pc, #24]	; (8100fe8 <HAL_I2C_MspInit+0xf0>)
 8100fce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8100fd2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8100fd6:	60bb      	str	r3, [r7, #8]
 8100fd8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8100fda:	bf00      	nop
 8100fdc:	37e0      	adds	r7, #224	; 0xe0
 8100fde:	46bd      	mov	sp, r7
 8100fe0:	bd80      	pop	{r7, pc}
 8100fe2:	bf00      	nop
 8100fe4:	40005400 	.word	0x40005400
 8100fe8:	58024400 	.word	0x58024400
 8100fec:	58020400 	.word	0x58020400

08100ff0 <i2c_CheckDev>:
 *      Author: Pascal
 */

#include "i2c_dev.h"

HAL_StatusTypeDef i2c_CheckDev(I2C_HandleTypeDef* bus, uint8_t DevAddress){
 8100ff0:	b580      	push	{r7, lr}
 8100ff2:	b084      	sub	sp, #16
 8100ff4:	af00      	add	r7, sp, #0
 8100ff6:	6078      	str	r0, [r7, #4]
 8100ff8:	460b      	mov	r3, r1
 8100ffa:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef retFunc;
	uint8_t write_addr = DevAddress << 1;
 8100ffc:	78fb      	ldrb	r3, [r7, #3]
 8100ffe:	005b      	lsls	r3, r3, #1
 8101000:	73fb      	strb	r3, [r7, #15]
	retFunc = HAL_I2C_IsDeviceReady(bus, write_addr, 1, TIME_OUT);
 8101002:	7bfb      	ldrb	r3, [r7, #15]
 8101004:	b299      	uxth	r1, r3
 8101006:	2332      	movs	r3, #50	; 0x32
 8101008:	2201      	movs	r2, #1
 810100a:	6878      	ldr	r0, [r7, #4]
 810100c:	f001 fc36 	bl	810287c <HAL_I2C_IsDeviceReady>
 8101010:	4603      	mov	r3, r0
 8101012:	73bb      	strb	r3, [r7, #14]
	return retFunc;
 8101014:	7bbb      	ldrb	r3, [r7, #14]
}
 8101016:	4618      	mov	r0, r3
 8101018:	3710      	adds	r7, #16
 810101a:	46bd      	mov	sp, r7
 810101c:	bd80      	pop	{r7, pc}

0810101e <i2c_Transmit>:

HAL_StatusTypeDef i2c_Transmit(I2C_HandleTypeDef* bus, uint8_t DevAddress, uint8_t MemAddress, uint8_t MemAddSize, uint8_t* pData, uint8_t pData_size){
 810101e:	b590      	push	{r4, r7, lr}
 8101020:	b089      	sub	sp, #36	; 0x24
 8101022:	af04      	add	r7, sp, #16
 8101024:	6078      	str	r0, [r7, #4]
 8101026:	4608      	mov	r0, r1
 8101028:	4611      	mov	r1, r2
 810102a:	461a      	mov	r2, r3
 810102c:	4603      	mov	r3, r0
 810102e:	70fb      	strb	r3, [r7, #3]
 8101030:	460b      	mov	r3, r1
 8101032:	70bb      	strb	r3, [r7, #2]
 8101034:	4613      	mov	r3, r2
 8101036:	707b      	strb	r3, [r7, #1]
	HAL_StatusTypeDef retFunc;
	uint8_t write_addr = DevAddress << 1;
 8101038:	78fb      	ldrb	r3, [r7, #3]
 810103a:	005b      	lsls	r3, r3, #1
 810103c:	73fb      	strb	r3, [r7, #15]
	retFunc = HAL_I2C_Mem_Write(bus, write_addr, MemAddress, MemAddSize, pData, pData_size, TIME_OUT);
 810103e:	7bfb      	ldrb	r3, [r7, #15]
 8101040:	b299      	uxth	r1, r3
 8101042:	78bb      	ldrb	r3, [r7, #2]
 8101044:	b29a      	uxth	r2, r3
 8101046:	787b      	ldrb	r3, [r7, #1]
 8101048:	b298      	uxth	r0, r3
 810104a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 810104e:	b29b      	uxth	r3, r3
 8101050:	2432      	movs	r4, #50	; 0x32
 8101052:	9402      	str	r4, [sp, #8]
 8101054:	9301      	str	r3, [sp, #4]
 8101056:	6a3b      	ldr	r3, [r7, #32]
 8101058:	9300      	str	r3, [sp, #0]
 810105a:	4603      	mov	r3, r0
 810105c:	6878      	ldr	r0, [r7, #4]
 810105e:	f001 f9df 	bl	8102420 <HAL_I2C_Mem_Write>
 8101062:	4603      	mov	r3, r0
 8101064:	73bb      	strb	r3, [r7, #14]
	return retFunc;
 8101066:	7bbb      	ldrb	r3, [r7, #14]
}
 8101068:	4618      	mov	r0, r3
 810106a:	3714      	adds	r7, #20
 810106c:	46bd      	mov	sp, r7
 810106e:	bd90      	pop	{r4, r7, pc}

08101070 <i2c_Receive>:

HAL_StatusTypeDef i2c_Receive(I2C_HandleTypeDef* bus, uint8_t DevAddress, uint8_t MemAddress, uint8_t MemAddSize, uint8_t* pData, uint8_t pData_size){
 8101070:	b590      	push	{r4, r7, lr}
 8101072:	b089      	sub	sp, #36	; 0x24
 8101074:	af04      	add	r7, sp, #16
 8101076:	6078      	str	r0, [r7, #4]
 8101078:	4608      	mov	r0, r1
 810107a:	4611      	mov	r1, r2
 810107c:	461a      	mov	r2, r3
 810107e:	4603      	mov	r3, r0
 8101080:	70fb      	strb	r3, [r7, #3]
 8101082:	460b      	mov	r3, r1
 8101084:	70bb      	strb	r3, [r7, #2]
 8101086:	4613      	mov	r3, r2
 8101088:	707b      	strb	r3, [r7, #1]
	HAL_StatusTypeDef retFunc;
	uint8_t read_addr = (DevAddress << 1) | 0x01;
 810108a:	78fb      	ldrb	r3, [r7, #3]
 810108c:	005b      	lsls	r3, r3, #1
 810108e:	b25b      	sxtb	r3, r3
 8101090:	f043 0301 	orr.w	r3, r3, #1
 8101094:	b25b      	sxtb	r3, r3
 8101096:	73fb      	strb	r3, [r7, #15]
	retFunc = HAL_I2C_Mem_Read(bus, read_addr, MemAddress, MemAddSize, pData, pData_size, TIME_OUT);
 8101098:	7bfb      	ldrb	r3, [r7, #15]
 810109a:	b299      	uxth	r1, r3
 810109c:	78bb      	ldrb	r3, [r7, #2]
 810109e:	b29a      	uxth	r2, r3
 81010a0:	787b      	ldrb	r3, [r7, #1]
 81010a2:	b298      	uxth	r0, r3
 81010a4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 81010a8:	b29b      	uxth	r3, r3
 81010aa:	2432      	movs	r4, #50	; 0x32
 81010ac:	9402      	str	r4, [sp, #8]
 81010ae:	9301      	str	r3, [sp, #4]
 81010b0:	6a3b      	ldr	r3, [r7, #32]
 81010b2:	9300      	str	r3, [sp, #0]
 81010b4:	4603      	mov	r3, r0
 81010b6:	6878      	ldr	r0, [r7, #4]
 81010b8:	f001 fac6 	bl	8102648 <HAL_I2C_Mem_Read>
 81010bc:	4603      	mov	r3, r0
 81010be:	73bb      	strb	r3, [r7, #14]
	return retFunc;
 81010c0:	7bbb      	ldrb	r3, [r7, #14]
}
 81010c2:	4618      	mov	r0, r3
 81010c4:	3714      	adds	r7, #20
 81010c6:	46bd      	mov	sp, r7
 81010c8:	bd90      	pop	{r4, r7, pc}
	...

081010cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 81010cc:	b590      	push	{r4, r7, lr}
 81010ce:	b085      	sub	sp, #20
 81010d0:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 81010d2:	4b69      	ldr	r3, [pc, #420]	; (8101278 <main+0x1ac>)
 81010d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81010d8:	4a67      	ldr	r2, [pc, #412]	; (8101278 <main+0x1ac>)
 81010da:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 81010de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81010e2:	4b65      	ldr	r3, [pc, #404]	; (8101278 <main+0x1ac>)
 81010e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81010e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 81010ec:	60fb      	str	r3, [r7, #12]
 81010ee:	68fb      	ldr	r3, [r7, #12]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(HSEM_WAKEUP_CPU2_MASK);
 81010f0:	2001      	movs	r0, #1
 81010f2:	f001 f8d9 	bl	81022a8 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 81010f6:	f002 f881 	bl	81031fc <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 81010fa:	2201      	movs	r2, #1
 81010fc:	2102      	movs	r1, #2
 81010fe:	2000      	movs	r0, #0
 8101100:	f002 f802 	bl	8103108 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(HSEM_WAKEUP_CPU2_MASK);
 8101104:	4b5d      	ldr	r3, [pc, #372]	; (810127c <main+0x1b0>)
 8101106:	681b      	ldr	r3, [r3, #0]
 8101108:	091b      	lsrs	r3, r3, #4
 810110a:	f003 030f 	and.w	r3, r3, #15
 810110e:	2b07      	cmp	r3, #7
 8101110:	d108      	bne.n	8101124 <main+0x58>
 8101112:	4b5b      	ldr	r3, [pc, #364]	; (8101280 <main+0x1b4>)
 8101114:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8101118:	4a59      	ldr	r2, [pc, #356]	; (8101280 <main+0x1b4>)
 810111a:	f043 0301 	orr.w	r3, r3, #1
 810111e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 8101122:	e007      	b.n	8101134 <main+0x68>
 8101124:	4b56      	ldr	r3, [pc, #344]	; (8101280 <main+0x1b4>)
 8101126:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 810112a:	4a55      	ldr	r2, [pc, #340]	; (8101280 <main+0x1b4>)
 810112c:	f043 0301 	orr.w	r3, r3, #1
 8101130:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8101134:	f000 fc92 	bl	8101a5c <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8101138:	f7ff fdea 	bl	8100d10 <MX_GPIO_Init>
  MX_I2C1_Init();
 810113c:	f7ff fe9c 	bl	8100e78 <MX_I2C1_Init>
  MX_TIM2_Init();
 8101140:	f000 fae6 	bl	8101710 <MX_TIM2_Init>
  MX_TIM3_Init();
 8101144:	f000 fb38 	bl	81017b8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
//  initMotors();
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8101148:	2108      	movs	r1, #8
 810114a:	484e      	ldr	r0, [pc, #312]	; (8101284 <main+0x1b8>)
 810114c:	f003 fae0 	bl	8104710 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 8101150:	213c      	movs	r1, #60	; 0x3c
 8101152:	484d      	ldr	r0, [pc, #308]	; (8101288 <main+0x1bc>)
 8101154:	f003 fc90 	bl	8104a78 <HAL_TIM_Encoder_Start_IT>

  S1 = VCNL4010_Create(0x13, &hi2c1);
 8101158:	4c4c      	ldr	r4, [pc, #304]	; (810128c <main+0x1c0>)
 810115a:	463b      	mov	r3, r7
 810115c:	4a4c      	ldr	r2, [pc, #304]	; (8101290 <main+0x1c4>)
 810115e:	2113      	movs	r1, #19
 8101160:	4618      	mov	r0, r3
 8101162:	f7ff fdbb 	bl	8100cdc <VCNL4010_Create>
 8101166:	4622      	mov	r2, r4
 8101168:	463b      	mov	r3, r7
 810116a:	e893 0003 	ldmia.w	r3, {r0, r1}
 810116e:	e882 0003 	stmia.w	r2, {r0, r1}
  VCNL4010_Init(&S1);
 8101172:	4846      	ldr	r0, [pc, #280]	; (810128c <main+0x1c0>)
 8101174:	f7ff fd54 	bl	8100c20 <VCNL4010_Init>

  HAL_HSEM_ActivateNotification(HSEM_CM7_TO_CM4_MASK);
 8101178:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 810117c:	f001 f894 	bl	81022a8 <HAL_HSEM_ActivateNotification>
  HAL_HSEM_ActivateNotification(HSEM_ROBOT_MOVE_MASK);
 8101180:	2004      	movs	r0, #4
 8101182:	f001 f891 	bl	81022a8 <HAL_HSEM_ActivateNotification>
  HAL_HSEM_ActivateNotification(HSEM_HUMAN_MOVE_MASK);
 8101186:	2008      	movs	r0, #8
 8101188:	f001 f88e 	bl	81022a8 <HAL_HSEM_ActivateNotification>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  /*Code kan in een timer interrupt*/
	  /***************************************************************/
	  valProxy = VCNL4010_ReceiveProxy(&S1);
 810118c:	483f      	ldr	r0, [pc, #252]	; (810128c <main+0x1c0>)
 810118e:	f7ff fd7d 	bl	8100c8c <VCNL4010_ReceiveProxy>
 8101192:	4603      	mov	r3, r0
 8101194:	461a      	mov	r2, r3
 8101196:	4b3f      	ldr	r3, [pc, #252]	; (8101294 <main+0x1c8>)
 8101198:	801a      	strh	r2, [r3, #0]

	  if (valProxy >= 4500){
 810119a:	4b3e      	ldr	r3, [pc, #248]	; (8101294 <main+0x1c8>)
 810119c:	881b      	ldrh	r3, [r3, #0]
 810119e:	f241 1293 	movw	r2, #4499	; 0x1193
 81011a2:	4293      	cmp	r3, r2
 81011a4:	d910      	bls.n	81011c8 <main+0xfc>
		  if(state == STATE_HUMAN_MOVE && !humanMove){
 81011a6:	4b3c      	ldr	r3, [pc, #240]	; (8101298 <main+0x1cc>)
 81011a8:	781b      	ldrb	r3, [r3, #0]
 81011aa:	2b03      	cmp	r3, #3
 81011ac:	d106      	bne.n	81011bc <main+0xf0>
 81011ae:	4b3b      	ldr	r3, [pc, #236]	; (810129c <main+0x1d0>)
 81011b0:	781b      	ldrb	r3, [r3, #0]
 81011b2:	2b00      	cmp	r3, #0
 81011b4:	d102      	bne.n	81011bc <main+0xf0>
			  humanMove = 1;
 81011b6:	4b39      	ldr	r3, [pc, #228]	; (810129c <main+0x1d0>)
 81011b8:	2201      	movs	r2, #1
 81011ba:	701a      	strb	r2, [r3, #0]
		  }
//		  if(state != STATE_HUMAN_MOVE || humanMove){
//			  cheat = 1;
//		  }
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 81011bc:	2201      	movs	r2, #1
 81011be:	2102      	movs	r1, #2
 81011c0:	4837      	ldr	r0, [pc, #220]	; (81012a0 <main+0x1d4>)
 81011c2:	f001 f80f 	bl	81021e4 <HAL_GPIO_WritePin>
 81011c6:	e004      	b.n	81011d2 <main+0x106>
	  } else {
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 81011c8:	2200      	movs	r2, #0
 81011ca:	2102      	movs	r1, #2
 81011cc:	4834      	ldr	r0, [pc, #208]	; (81012a0 <main+0x1d4>)
 81011ce:	f001 f809 	bl	81021e4 <HAL_GPIO_WritePin>
	  }
	  /***************************************************************/

	  if(state == STATE_INIT){
 81011d2:	4b31      	ldr	r3, [pc, #196]	; (8101298 <main+0x1cc>)
 81011d4:	781b      	ldrb	r3, [r3, #0]
 81011d6:	2b00      	cmp	r3, #0
 81011d8:	d115      	bne.n	8101206 <main+0x13a>
		  kalibration = HomeMotors(1, 0);
 81011da:	2100      	movs	r1, #0
 81011dc:	2001      	movs	r0, #1
 81011de:	f000 fa21 	bl	8101624 <HomeMotors>
 81011e2:	4603      	mov	r3, r0
 81011e4:	461a      	mov	r2, r3
 81011e6:	4b2f      	ldr	r3, [pc, #188]	; (81012a4 <main+0x1d8>)
 81011e8:	701a      	strb	r2, [r3, #0]
		  if(kalibration){
 81011ea:	4b2e      	ldr	r3, [pc, #184]	; (81012a4 <main+0x1d8>)
 81011ec:	781b      	ldrb	r3, [r3, #0]
 81011ee:	2b00      	cmp	r3, #0
 81011f0:	d009      	beq.n	8101206 <main+0x13a>
			  state = STATE_IDLE;
 81011f2:	4b29      	ldr	r3, [pc, #164]	; (8101298 <main+0x1cc>)
 81011f4:	2201      	movs	r2, #1
 81011f6:	701a      	strb	r2, [r3, #0]
			  HSEM_TAKE_RELEASE(HSEM_CM4_DONE);
 81011f8:	2001      	movs	r0, #1
 81011fa:	f001 f827 	bl	810224c <HAL_HSEM_FastTake>
 81011fe:	2100      	movs	r1, #0
 8101200:	2001      	movs	r0, #1
 8101202:	f001 f83d 	bl	8102280 <HAL_HSEM_Release>
		  }
	  }
	  if(state == STATE_IDLE){
		  //Do nothing
	  }
	  if(state == STATE_HUMAN_MOVE){
 8101206:	4b24      	ldr	r3, [pc, #144]	; (8101298 <main+0x1cc>)
 8101208:	781b      	ldrb	r3, [r3, #0]
 810120a:	2b03      	cmp	r3, #3
 810120c:	d10d      	bne.n	810122a <main+0x15e>
		  if(humanMove){
 810120e:	4b23      	ldr	r3, [pc, #140]	; (810129c <main+0x1d0>)
 8101210:	781b      	ldrb	r3, [r3, #0]
 8101212:	2b00      	cmp	r3, #0
 8101214:	d009      	beq.n	810122a <main+0x15e>
			  HSEM_TAKE_RELEASE(HSEM_COIN_COLUMN);
 8101216:	2006      	movs	r0, #6
 8101218:	f001 f818 	bl	810224c <HAL_HSEM_FastTake>
 810121c:	2100      	movs	r1, #0
 810121e:	2006      	movs	r0, #6
 8101220:	f001 f82e 	bl	8102280 <HAL_HSEM_Release>
			  state = STATE_IDLE;
 8101224:	4b1c      	ldr	r3, [pc, #112]	; (8101298 <main+0x1cc>)
 8101226:	2201      	movs	r2, #1
 8101228:	701a      	strb	r2, [r3, #0]
		  }
	  }
	  if(state == STATE_ROBOT_MOVE){
 810122a:	4b1b      	ldr	r3, [pc, #108]	; (8101298 <main+0x1cc>)
 810122c:	781b      	ldrb	r3, [r3, #0]
 810122e:	2b02      	cmp	r3, #2
 8101230:	d11e      	bne.n	8101270 <main+0x1a4>
		  MoveToPos(kolom[data[0]-1], 0);
 8101232:	4b1d      	ldr	r3, [pc, #116]	; (81012a8 <main+0x1dc>)
 8101234:	781b      	ldrb	r3, [r3, #0]
 8101236:	3b01      	subs	r3, #1
 8101238:	4a1c      	ldr	r2, [pc, #112]	; (81012ac <main+0x1e0>)
 810123a:	5cd3      	ldrb	r3, [r2, r3]
 810123c:	b21b      	sxth	r3, r3
 810123e:	2100      	movs	r1, #0
 8101240:	4618      	mov	r0, r3
 8101242:	f000 f9dd 	bl	8101600 <MoveToPos>
		  HAL_Delay(2000);
 8101246:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 810124a:	f000 fcbb 	bl	8101bc4 <HAL_Delay>
		  MoveToPos(5,0);
 810124e:	2100      	movs	r1, #0
 8101250:	2005      	movs	r0, #5
 8101252:	f000 f9d5 	bl	8101600 <MoveToPos>
		  HSEM_TAKE_RELEASE(HSEM_CM4_DONE);
 8101256:	2001      	movs	r0, #1
 8101258:	f000 fff8 	bl	810224c <HAL_HSEM_FastTake>
 810125c:	2100      	movs	r1, #0
 810125e:	2001      	movs	r0, #1
 8101260:	f001 f80e 	bl	8102280 <HAL_HSEM_Release>
		  humanMove = 0;
 8101264:	4b0d      	ldr	r3, [pc, #52]	; (810129c <main+0x1d0>)
 8101266:	2200      	movs	r2, #0
 8101268:	701a      	strb	r2, [r3, #0]
		  state = STATE_IDLE;
 810126a:	4b0b      	ldr	r3, [pc, #44]	; (8101298 <main+0x1cc>)
 810126c:	2201      	movs	r2, #1
 810126e:	701a      	strb	r2, [r3, #0]
	  }
	  HAL_Delay(50);
 8101270:	2032      	movs	r0, #50	; 0x32
 8101272:	f000 fca7 	bl	8101bc4 <HAL_Delay>
	  valProxy = VCNL4010_ReceiveProxy(&S1);
 8101276:	e789      	b.n	810118c <main+0xc0>
 8101278:	58024400 	.word	0x58024400
 810127c:	e000ed00 	.word	0xe000ed00
 8101280:	58026400 	.word	0x58026400
 8101284:	1000014c 	.word	0x1000014c
 8101288:	10000100 	.word	0x10000100
 810128c:	100000e4 	.word	0x100000e4
 8101290:	10000098 	.word	0x10000098
 8101294:	100000ec 	.word	0x100000ec
 8101298:	100000f3 	.word	0x100000f3
 810129c:	100000f2 	.word	0x100000f2
 81012a0:	58021000 	.word	0x58021000
 81012a4:	100000fc 	.word	0x100000fc
 81012a8:	100000f0 	.word	0x100000f0
 81012ac:	10000008 	.word	0x10000008

081012b0 <HAL_HSEM_FreeCallback>:
  }
  /* USER CODE END 3 */
}

/* USER CODE BEGIN 4 */
void HAL_HSEM_FreeCallback(uint32_t SemMask){
 81012b0:	b580      	push	{r7, lr}
 81012b2:	b082      	sub	sp, #8
 81012b4:	af00      	add	r7, sp, #0
 81012b6:	6078      	str	r0, [r7, #4]
	if(SemMask == HSEM_ROBOT_MOVE_MASK){
 81012b8:	687b      	ldr	r3, [r7, #4]
 81012ba:	2b04      	cmp	r3, #4
 81012bc:	d109      	bne.n	81012d2 <HAL_HSEM_FreeCallback+0x22>
 81012be:	4b0d      	ldr	r3, [pc, #52]	; (81012f4 <HAL_HSEM_FreeCallback+0x44>)
 81012c0:	781a      	ldrb	r2, [r3, #0]
		memcpy(data, SharedBuf, 1);
 81012c2:	4b0d      	ldr	r3, [pc, #52]	; (81012f8 <HAL_HSEM_FreeCallback+0x48>)
 81012c4:	701a      	strb	r2, [r3, #0]
		state = STATE_ROBOT_MOVE;
 81012c6:	4b0d      	ldr	r3, [pc, #52]	; (81012fc <HAL_HSEM_FreeCallback+0x4c>)
 81012c8:	2202      	movs	r2, #2
 81012ca:	701a      	strb	r2, [r3, #0]
		HAL_HSEM_ActivateNotification(HSEM_ROBOT_MOVE_MASK);
 81012cc:	2004      	movs	r0, #4
 81012ce:	f000 ffeb 	bl	81022a8 <HAL_HSEM_ActivateNotification>
	}
	if(SemMask == HSEM_HUMAN_MOVE_MASK){
 81012d2:	687b      	ldr	r3, [r7, #4]
 81012d4:	2b08      	cmp	r3, #8
 81012d6:	d108      	bne.n	81012ea <HAL_HSEM_FreeCallback+0x3a>
		humanMove = 0;
 81012d8:	4b09      	ldr	r3, [pc, #36]	; (8101300 <HAL_HSEM_FreeCallback+0x50>)
 81012da:	2200      	movs	r2, #0
 81012dc:	701a      	strb	r2, [r3, #0]
		state = STATE_HUMAN_MOVE;
 81012de:	4b07      	ldr	r3, [pc, #28]	; (81012fc <HAL_HSEM_FreeCallback+0x4c>)
 81012e0:	2203      	movs	r2, #3
 81012e2:	701a      	strb	r2, [r3, #0]
		HAL_HSEM_ActivateNotification(HSEM_HUMAN_MOVE_MASK);
 81012e4:	2008      	movs	r0, #8
 81012e6:	f000 ffdf 	bl	81022a8 <HAL_HSEM_ActivateNotification>
	}
}
 81012ea:	bf00      	nop
 81012ec:	3708      	adds	r7, #8
 81012ee:	46bd      	mov	sp, r7
 81012f0:	bd80      	pop	{r7, pc}
 81012f2:	bf00      	nop
 81012f4:	38000000 	.word	0x38000000
 81012f8:	100000f0 	.word	0x100000f0
 81012fc:	100000f3 	.word	0x100000f3
 8101300:	100000f2 	.word	0x100000f2

08101304 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8101304:	b480      	push	{r7}
 8101306:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8101308:	b672      	cpsid	i
}
 810130a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 810130c:	e7fe      	b.n	810130c <Error_Handler+0x8>
	...

08101310 <homeMotorX>:
void initMotorX(){
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
	HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
}

uint8_t homeMotorX(){
 8101310:	b580      	push	{r7, lr}
 8101312:	af00      	add	r7, sp, #0
	__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_3, 250);
 8101314:	4b1b      	ldr	r3, [pc, #108]	; (8101384 <homeMotorX+0x74>)
 8101316:	681b      	ldr	r3, [r3, #0]
 8101318:	22fa      	movs	r2, #250	; 0xfa
 810131a:	63da      	str	r2, [r3, #60]	; 0x3c
	if(HAL_GPIO_ReadPin(Home_X_GPIO_Port, Home_X_Pin) == 0){
 810131c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8101320:	4819      	ldr	r0, [pc, #100]	; (8101388 <homeMotorX+0x78>)
 8101322:	f000 ff47 	bl	81021b4 <HAL_GPIO_ReadPin>
 8101326:	4603      	mov	r3, r0
 8101328:	2b00      	cmp	r3, #0
 810132a:	d10b      	bne.n	8101344 <homeMotorX+0x34>
		HAL_GPIO_WritePin(Direction_X_GPIO_Port, Direction_X_Pin, GPIO_PIN_SET);
 810132c:	2201      	movs	r2, #1
 810132e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8101332:	4815      	ldr	r0, [pc, #84]	; (8101388 <homeMotorX+0x78>)
 8101334:	f000 ff56 	bl	81021e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Ready_X_GPIO_Port, Ready_X_Pin, GPIO_PIN_SET);
 8101338:	2201      	movs	r2, #1
 810133a:	2180      	movs	r1, #128	; 0x80
 810133c:	4813      	ldr	r0, [pc, #76]	; (810138c <homeMotorX+0x7c>)
 810133e:	f000 ff51 	bl	81021e4 <HAL_GPIO_WritePin>
 8101342:	e00a      	b.n	810135a <homeMotorX+0x4a>
	}
	else{
		HAL_GPIO_WritePin(Direction_X_GPIO_Port, Direction_X_Pin, GPIO_PIN_RESET);
 8101344:	2200      	movs	r2, #0
 8101346:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 810134a:	480f      	ldr	r0, [pc, #60]	; (8101388 <homeMotorX+0x78>)
 810134c:	f000 ff4a 	bl	81021e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Ready_X_GPIO_Port, Ready_X_Pin, GPIO_PIN_SET);
 8101350:	2201      	movs	r2, #1
 8101352:	2180      	movs	r1, #128	; 0x80
 8101354:	480d      	ldr	r0, [pc, #52]	; (810138c <homeMotorX+0x7c>)
 8101356:	f000 ff45 	bl	81021e4 <HAL_GPIO_WritePin>
	}
	while(!homeDone){
 810135a:	bf00      	nop
 810135c:	4b0c      	ldr	r3, [pc, #48]	; (8101390 <homeMotorX+0x80>)
 810135e:	781b      	ldrb	r3, [r3, #0]
 8101360:	2b00      	cmp	r3, #0
 8101362:	d0fb      	beq.n	810135c <homeMotorX+0x4c>
	}
	HAL_Delay(200);
 8101364:	20c8      	movs	r0, #200	; 0xc8
 8101366:	f000 fc2d 	bl	8101bc4 <HAL_Delay>
	position_mm = 0;
 810136a:	4b0a      	ldr	r3, [pc, #40]	; (8101394 <homeMotorX+0x84>)
 810136c:	2200      	movs	r2, #0
 810136e:	601a      	str	r2, [r3, #0]
	counter = 0;
 8101370:	4b09      	ldr	r3, [pc, #36]	; (8101398 <homeMotorX+0x88>)
 8101372:	2200      	movs	r2, #0
 8101374:	601a      	str	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 8101376:	4b09      	ldr	r3, [pc, #36]	; (810139c <homeMotorX+0x8c>)
 8101378:	681b      	ldr	r3, [r3, #0]
 810137a:	2200      	movs	r2, #0
 810137c:	625a      	str	r2, [r3, #36]	; 0x24
	return 1;
 810137e:	2301      	movs	r3, #1
}
 8101380:	4618      	mov	r0, r3
 8101382:	bd80      	pop	{r7, pc}
 8101384:	1000014c 	.word	0x1000014c
 8101388:	58020800 	.word	0x58020800
 810138c:	58020c00 	.word	0x58020c00
 8101390:	100000fe 	.word	0x100000fe
 8101394:	100000f8 	.word	0x100000f8
 8101398:	100000f4 	.word	0x100000f4
 810139c:	10000100 	.word	0x10000100

081013a0 <moveToPosX>:

uint8_t moveToPosX(int16_t Xpos){
 81013a0:	b580      	push	{r7, lr}
 81013a2:	b084      	sub	sp, #16
 81013a4:	af00      	add	r7, sp, #0
 81013a6:	4603      	mov	r3, r0
 81013a8:	80fb      	strh	r3, [r7, #6]
	int16_t delta = Xpos - position_mm;
 81013aa:	88fa      	ldrh	r2, [r7, #6]
 81013ac:	4b52      	ldr	r3, [pc, #328]	; (81014f8 <moveToPosX+0x158>)
 81013ae:	681b      	ldr	r3, [r3, #0]
 81013b0:	b29b      	uxth	r3, r3
 81013b2:	1ad3      	subs	r3, r2, r3
 81013b4:	b29b      	uxth	r3, r3
 81013b6:	81bb      	strh	r3, [r7, #12]
	if(delta >= 0){
 81013b8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 81013bc:	2b00      	cmp	r3, #0
 81013be:	db06      	blt.n	81013ce <moveToPosX+0x2e>
		HAL_GPIO_WritePin(Direction_X_GPIO_Port, Direction_X_Pin, GPIO_PIN_RESET);
 81013c0:	2200      	movs	r2, #0
 81013c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 81013c6:	484d      	ldr	r0, [pc, #308]	; (81014fc <moveToPosX+0x15c>)
 81013c8:	f000 ff0c 	bl	81021e4 <HAL_GPIO_WritePin>
 81013cc:	e005      	b.n	81013da <moveToPosX+0x3a>
	}
	else{
		HAL_GPIO_WritePin(Direction_X_GPIO_Port, Direction_X_Pin, GPIO_PIN_SET);
 81013ce:	2201      	movs	r2, #1
 81013d0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 81013d4:	4849      	ldr	r0, [pc, #292]	; (81014fc <moveToPosX+0x15c>)
 81013d6:	f000 ff05 	bl	81021e4 <HAL_GPIO_WritePin>
	}
	__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_3, 245);
 81013da:	4b49      	ldr	r3, [pc, #292]	; (8101500 <moveToPosX+0x160>)
 81013dc:	681b      	ldr	r3, [r3, #0]
 81013de:	22f5      	movs	r2, #245	; 0xf5
 81013e0:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_GPIO_WritePin(Ready_X_GPIO_Port, Ready_X_Pin, GPIO_PIN_SET);
 81013e2:	2201      	movs	r2, #1
 81013e4:	2180      	movs	r1, #128	; 0x80
 81013e6:	4847      	ldr	r0, [pc, #284]	; (8101504 <moveToPosX+0x164>)
 81013e8:	f000 fefc 	bl	81021e4 <HAL_GPIO_WritePin>
	if (abs(delta) > 60 && Xpos > 5){
 81013ec:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 81013f0:	2b00      	cmp	r3, #0
 81013f2:	bfb8      	it	lt
 81013f4:	425b      	neglt	r3, r3
 81013f6:	b29b      	uxth	r3, r3
 81013f8:	2b3c      	cmp	r3, #60	; 0x3c
 81013fa:	d95d      	bls.n	81014b8 <moveToPosX+0x118>
 81013fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101400:	2b05      	cmp	r3, #5
 8101402:	dd59      	ble.n	81014b8 <moveToPosX+0x118>
		slowspeed = 1;
 8101404:	4b40      	ldr	r3, [pc, #256]	; (8101508 <moveToPosX+0x168>)
 8101406:	2201      	movs	r2, #1
 8101408:	701a      	strb	r2, [r3, #0]
	}
	while(Xpos != position_mm){
 810140a:	e055      	b.n	81014b8 <moveToPosX+0x118>
		if(slowspeed == 1){
 810140c:	4b3e      	ldr	r3, [pc, #248]	; (8101508 <moveToPosX+0x168>)
 810140e:	781b      	ldrb	r3, [r3, #0]
 8101410:	2b01      	cmp	r3, #1
 8101412:	d151      	bne.n	81014b8 <moveToPosX+0x118>
			uint16_t y = 0;
 8101414:	2300      	movs	r3, #0
 8101416:	81fb      	strh	r3, [r7, #14]
			delta = Xpos - position_mm;
 8101418:	88fa      	ldrh	r2, [r7, #6]
 810141a:	4b37      	ldr	r3, [pc, #220]	; (81014f8 <moveToPosX+0x158>)
 810141c:	681b      	ldr	r3, [r3, #0]
 810141e:	b29b      	uxth	r3, r3
 8101420:	1ad3      	subs	r3, r2, r3
 8101422:	b29b      	uxth	r3, r3
 8101424:	81bb      	strh	r3, [r7, #12]
			if(abs(delta) < 60){
 8101426:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 810142a:	2b00      	cmp	r3, #0
 810142c:	bfb8      	it	lt
 810142e:	425b      	neglt	r3, r3
 8101430:	b29b      	uxth	r3, r3
 8101432:	2b3b      	cmp	r3, #59	; 0x3b
 8101434:	d82d      	bhi.n	8101492 <moveToPosX+0xf2>
				y = 2*(pow(abs(delta), 0.49)) + 215;
 8101436:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 810143a:	2b00      	cmp	r3, #0
 810143c:	bfb8      	it	lt
 810143e:	425b      	neglt	r3, r3
 8101440:	b29b      	uxth	r3, r3
 8101442:	4618      	mov	r0, r3
 8101444:	f7ff f89a 	bl	810057c <__aeabi_i2d>
 8101448:	4602      	mov	r2, r0
 810144a:	460b      	mov	r3, r1
 810144c:	ed9f 1b26 	vldr	d1, [pc, #152]	; 81014e8 <moveToPosX+0x148>
 8101450:	ec43 2b10 	vmov	d0, r2, r3
 8101454:	f004 fa8e 	bl	8105974 <pow>
 8101458:	ec51 0b10 	vmov	r0, r1, d0
 810145c:	4602      	mov	r2, r0
 810145e:	460b      	mov	r3, r1
 8101460:	f7fe ff40 	bl	81002e4 <__adddf3>
 8101464:	4602      	mov	r2, r0
 8101466:	460b      	mov	r3, r1
 8101468:	4610      	mov	r0, r2
 810146a:	4619      	mov	r1, r3
 810146c:	a320      	add	r3, pc, #128	; (adr r3, 81014f0 <moveToPosX+0x150>)
 810146e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101472:	f7fe ff37 	bl	81002e4 <__adddf3>
 8101476:	4602      	mov	r2, r0
 8101478:	460b      	mov	r3, r1
 810147a:	4610      	mov	r0, r2
 810147c:	4619      	mov	r1, r3
 810147e:	f7ff fb97 	bl	8100bb0 <__aeabi_d2uiz>
 8101482:	4603      	mov	r3, r0
 8101484:	81fb      	strh	r3, [r7, #14]
				if(y>250){
 8101486:	89fb      	ldrh	r3, [r7, #14]
 8101488:	2bfa      	cmp	r3, #250	; 0xfa
 810148a:	d904      	bls.n	8101496 <moveToPosX+0xf6>
					y = 250;
 810148c:	23fa      	movs	r3, #250	; 0xfa
 810148e:	81fb      	strh	r3, [r7, #14]
 8101490:	e001      	b.n	8101496 <moveToPosX+0xf6>
				}
			} else {
				y = 250;
 8101492:	23fa      	movs	r3, #250	; 0xfa
 8101494:	81fb      	strh	r3, [r7, #14]
			}

			i++;
 8101496:	4b1d      	ldr	r3, [pc, #116]	; (810150c <moveToPosX+0x16c>)
 8101498:	781b      	ldrb	r3, [r3, #0]
 810149a:	3301      	adds	r3, #1
 810149c:	b2da      	uxtb	r2, r3
 810149e:	4b1b      	ldr	r3, [pc, #108]	; (810150c <moveToPosX+0x16c>)
 81014a0:	701a      	strb	r2, [r3, #0]
			if(i == 200){
 81014a2:	4b1a      	ldr	r3, [pc, #104]	; (810150c <moveToPosX+0x16c>)
 81014a4:	781b      	ldrb	r3, [r3, #0]
 81014a6:	2bc8      	cmp	r3, #200	; 0xc8
 81014a8:	d106      	bne.n	81014b8 <moveToPosX+0x118>
				__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_3, y);
 81014aa:	4b15      	ldr	r3, [pc, #84]	; (8101500 <moveToPosX+0x160>)
 81014ac:	681b      	ldr	r3, [r3, #0]
 81014ae:	89fa      	ldrh	r2, [r7, #14]
 81014b0:	63da      	str	r2, [r3, #60]	; 0x3c
				i = 0;
 81014b2:	4b16      	ldr	r3, [pc, #88]	; (810150c <moveToPosX+0x16c>)
 81014b4:	2200      	movs	r2, #0
 81014b6:	701a      	strb	r2, [r3, #0]
	while(Xpos != position_mm){
 81014b8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 81014bc:	4b0e      	ldr	r3, [pc, #56]	; (81014f8 <moveToPosX+0x158>)
 81014be:	681b      	ldr	r3, [r3, #0]
 81014c0:	429a      	cmp	r2, r3
 81014c2:	d1a3      	bne.n	810140c <moveToPosX+0x6c>
			}
		}
	}
	slowspeed = 0;
 81014c4:	4b10      	ldr	r3, [pc, #64]	; (8101508 <moveToPosX+0x168>)
 81014c6:	2200      	movs	r2, #0
 81014c8:	701a      	strb	r2, [r3, #0]
	__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_3, 0);
 81014ca:	4b0d      	ldr	r3, [pc, #52]	; (8101500 <moveToPosX+0x160>)
 81014cc:	681b      	ldr	r3, [r3, #0]
 81014ce:	2200      	movs	r2, #0
 81014d0:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_GPIO_WritePin(Ready_X_GPIO_Port, Ready_X_Pin, GPIO_PIN_RESET);
 81014d2:	2200      	movs	r2, #0
 81014d4:	2180      	movs	r1, #128	; 0x80
 81014d6:	480b      	ldr	r0, [pc, #44]	; (8101504 <moveToPosX+0x164>)
 81014d8:	f000 fe84 	bl	81021e4 <HAL_GPIO_WritePin>
	return 1;
 81014dc:	2301      	movs	r3, #1
}
 81014de:	4618      	mov	r0, r3
 81014e0:	3710      	adds	r7, #16
 81014e2:	46bd      	mov	sp, r7
 81014e4:	bd80      	pop	{r7, pc}
 81014e6:	bf00      	nop
 81014e8:	f5c28f5c 	.word	0xf5c28f5c
 81014ec:	3fdf5c28 	.word	0x3fdf5c28
 81014f0:	00000000 	.word	0x00000000
 81014f4:	406ae000 	.word	0x406ae000
 81014f8:	100000f8 	.word	0x100000f8
 81014fc:	58020800 	.word	0x58020800
 8101500:	1000014c 	.word	0x1000014c
 8101504:	58020c00 	.word	0x58020c00
 8101508:	100000fd 	.word	0x100000fd
 810150c:	100000ff 	.word	0x100000ff

08101510 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8101510:	b480      	push	{r7}
 8101512:	b083      	sub	sp, #12
 8101514:	af00      	add	r7, sp, #0
 8101516:	6078      	str	r0, [r7, #4]
	if(htim == &htim2){
 8101518:	687b      	ldr	r3, [r7, #4]
 810151a:	4a0c      	ldr	r2, [pc, #48]	; (810154c <HAL_TIM_IC_CaptureCallback+0x3c>)
 810151c:	4293      	cmp	r3, r2
 810151e:	d10e      	bne.n	810153e <HAL_TIM_IC_CaptureCallback+0x2e>
		counter = __HAL_TIM_GET_COUNTER(htim);
 8101520:	687b      	ldr	r3, [r7, #4]
 8101522:	681b      	ldr	r3, [r3, #0]
 8101524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8101526:	4a0a      	ldr	r2, [pc, #40]	; (8101550 <HAL_TIM_IC_CaptureCallback+0x40>)
 8101528:	6013      	str	r3, [r2, #0]

		position_mm = (int32_t) counter / 1104;
 810152a:	4b09      	ldr	r3, [pc, #36]	; (8101550 <HAL_TIM_IC_CaptureCallback+0x40>)
 810152c:	681b      	ldr	r3, [r3, #0]
 810152e:	4a09      	ldr	r2, [pc, #36]	; (8101554 <HAL_TIM_IC_CaptureCallback+0x44>)
 8101530:	fb82 1203 	smull	r1, r2, r2, r3
 8101534:	1252      	asrs	r2, r2, #9
 8101536:	17db      	asrs	r3, r3, #31
 8101538:	1ad3      	subs	r3, r2, r3
 810153a:	4a07      	ldr	r2, [pc, #28]	; (8101558 <HAL_TIM_IC_CaptureCallback+0x48>)
 810153c:	6013      	str	r3, [r2, #0]
	}
}
 810153e:	bf00      	nop
 8101540:	370c      	adds	r7, #12
 8101542:	46bd      	mov	sp, r7
 8101544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101548:	4770      	bx	lr
 810154a:	bf00      	nop
 810154c:	10000100 	.word	0x10000100
 8101550:	100000f4 	.word	0x100000f4
 8101554:	76b981db 	.word	0x76b981db
 8101558:	100000f8 	.word	0x100000f8

0810155c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 810155c:	b580      	push	{r7, lr}
 810155e:	b082      	sub	sp, #8
 8101560:	af00      	add	r7, sp, #0
 8101562:	4603      	mov	r3, r0
 8101564:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == Home_X_Pin){
 8101566:	88fb      	ldrh	r3, [r7, #6]
 8101568:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 810156c:	d139      	bne.n	81015e2 <HAL_GPIO_EXTI_Callback+0x86>
    	if(!HAL_GPIO_ReadPin(Home_X_GPIO_Port, Home_X_Pin)){
 810156e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8101572:	481e      	ldr	r0, [pc, #120]	; (81015ec <HAL_GPIO_EXTI_Callback+0x90>)
 8101574:	f000 fe1e 	bl	81021b4 <HAL_GPIO_ReadPin>
 8101578:	4603      	mov	r3, r0
 810157a:	2b00      	cmp	r3, #0
 810157c:	d110      	bne.n	81015a0 <HAL_GPIO_EXTI_Callback+0x44>
			/* do something */
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 810157e:	2200      	movs	r2, #0
 8101580:	2102      	movs	r1, #2
 8101582:	481b      	ldr	r0, [pc, #108]	; (81015f0 <HAL_GPIO_EXTI_Callback+0x94>)
 8101584:	f000 fe2e 	bl	81021e4 <HAL_GPIO_WritePin>
			__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_3, 0);
 8101588:	4b1a      	ldr	r3, [pc, #104]	; (81015f4 <HAL_GPIO_EXTI_Callback+0x98>)
 810158a:	681b      	ldr	r3, [r3, #0]
 810158c:	2200      	movs	r2, #0
 810158e:	63da      	str	r2, [r3, #60]	; 0x3c
			HAL_GPIO_WritePin(Ready_X_GPIO_Port, Ready_X_Pin, GPIO_PIN_RESET);
 8101590:	2200      	movs	r2, #0
 8101592:	2180      	movs	r1, #128	; 0x80
 8101594:	4818      	ldr	r0, [pc, #96]	; (81015f8 <HAL_GPIO_EXTI_Callback+0x9c>)
 8101596:	f000 fe25 	bl	81021e4 <HAL_GPIO_WritePin>
			homeDone = 1;
 810159a:	4b18      	ldr	r3, [pc, #96]	; (81015fc <HAL_GPIO_EXTI_Callback+0xa0>)
 810159c:	2201      	movs	r2, #1
 810159e:	701a      	strb	r2, [r3, #0]
		}
    	if(HAL_GPIO_ReadPin(Home_X_GPIO_Port, Home_X_Pin)){ //check pin state
 81015a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 81015a4:	4811      	ldr	r0, [pc, #68]	; (81015ec <HAL_GPIO_EXTI_Callback+0x90>)
 81015a6:	f000 fe05 	bl	81021b4 <HAL_GPIO_ReadPin>
 81015aa:	4603      	mov	r3, r0
 81015ac:	2b00      	cmp	r3, #0
 81015ae:	d018      	beq.n	81015e2 <HAL_GPIO_EXTI_Callback+0x86>
			/* do something */
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 81015b0:	2201      	movs	r2, #1
 81015b2:	2102      	movs	r1, #2
 81015b4:	480e      	ldr	r0, [pc, #56]	; (81015f0 <HAL_GPIO_EXTI_Callback+0x94>)
 81015b6:	f000 fe15 	bl	81021e4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Ready_X_GPIO_Port, Ready_X_Pin, GPIO_PIN_RESET);
 81015ba:	2200      	movs	r2, #0
 81015bc:	2180      	movs	r1, #128	; 0x80
 81015be:	480e      	ldr	r0, [pc, #56]	; (81015f8 <HAL_GPIO_EXTI_Callback+0x9c>)
 81015c0:	f000 fe10 	bl	81021e4 <HAL_GPIO_WritePin>
			__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_3, 240);
 81015c4:	4b0b      	ldr	r3, [pc, #44]	; (81015f4 <HAL_GPIO_EXTI_Callback+0x98>)
 81015c6:	681b      	ldr	r3, [r3, #0]
 81015c8:	22f0      	movs	r2, #240	; 0xf0
 81015ca:	63da      	str	r2, [r3, #60]	; 0x3c
			HAL_GPIO_WritePin(Direction_X_GPIO_Port, Direction_X_Pin, GPIO_PIN_RESET);
 81015cc:	2200      	movs	r2, #0
 81015ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 81015d2:	4806      	ldr	r0, [pc, #24]	; (81015ec <HAL_GPIO_EXTI_Callback+0x90>)
 81015d4:	f000 fe06 	bl	81021e4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Ready_X_GPIO_Port, Ready_X_Pin, GPIO_PIN_SET);
 81015d8:	2201      	movs	r2, #1
 81015da:	2180      	movs	r1, #128	; 0x80
 81015dc:	4806      	ldr	r0, [pc, #24]	; (81015f8 <HAL_GPIO_EXTI_Callback+0x9c>)
 81015de:	f000 fe01 	bl	81021e4 <HAL_GPIO_WritePin>
		}
    }
}
 81015e2:	bf00      	nop
 81015e4:	3708      	adds	r7, #8
 81015e6:	46bd      	mov	sp, r7
 81015e8:	bd80      	pop	{r7, pc}
 81015ea:	bf00      	nop
 81015ec:	58020800 	.word	0x58020800
 81015f0:	58021000 	.word	0x58021000
 81015f4:	1000014c 	.word	0x1000014c
 81015f8:	58020c00 	.word	0x58020c00
 81015fc:	100000fe 	.word	0x100000fe

08101600 <MoveToPos>:
void initMotors(){
	initMotorX();
	//add Z motor
}

uint8_t MoveToPos(int16_t posX, int16_t posZ){
 8101600:	b580      	push	{r7, lr}
 8101602:	b082      	sub	sp, #8
 8101604:	af00      	add	r7, sp, #0
 8101606:	4603      	mov	r3, r0
 8101608:	460a      	mov	r2, r1
 810160a:	80fb      	strh	r3, [r7, #6]
 810160c:	4613      	mov	r3, r2
 810160e:	80bb      	strh	r3, [r7, #4]
	moveToPosX(posX);
 8101610:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101614:	4618      	mov	r0, r3
 8101616:	f7ff fec3 	bl	81013a0 <moveToPosX>
	return 1;
 810161a:	2301      	movs	r3, #1
}
 810161c:	4618      	mov	r0, r3
 810161e:	3708      	adds	r7, #8
 8101620:	46bd      	mov	sp, r7
 8101622:	bd80      	pop	{r7, pc}

08101624 <HomeMotors>:

uint8_t HomeMotors(uint8_t homeX, uint8_t homeZ){
 8101624:	b580      	push	{r7, lr}
 8101626:	b084      	sub	sp, #16
 8101628:	af00      	add	r7, sp, #0
 810162a:	4603      	mov	r3, r0
 810162c:	460a      	mov	r2, r1
 810162e:	71fb      	strb	r3, [r7, #7]
 8101630:	4613      	mov	r3, r2
 8101632:	71bb      	strb	r3, [r7, #6]
	uint8_t homeXflag = 0;
 8101634:	2300      	movs	r3, #0
 8101636:	73fb      	strb	r3, [r7, #15]
	if(homeX){
 8101638:	79fb      	ldrb	r3, [r7, #7]
 810163a:	2b00      	cmp	r3, #0
 810163c:	d001      	beq.n	8101642 <HomeMotors+0x1e>
		homeMotorX();
 810163e:	f7ff fe67 	bl	8101310 <homeMotorX>
	}
	if(homeZ){
		/* implement home Z */
	}
	return 1;
 8101642:	2301      	movs	r3, #1
}
 8101644:	4618      	mov	r0, r3
 8101646:	3710      	adds	r7, #16
 8101648:	46bd      	mov	sp, r7
 810164a:	bd80      	pop	{r7, pc}

0810164c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 810164c:	b580      	push	{r7, lr}
 810164e:	b082      	sub	sp, #8
 8101650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8101652:	4b0d      	ldr	r3, [pc, #52]	; (8101688 <HAL_MspInit+0x3c>)
 8101654:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101658:	4a0b      	ldr	r2, [pc, #44]	; (8101688 <HAL_MspInit+0x3c>)
 810165a:	f043 0302 	orr.w	r3, r3, #2
 810165e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8101662:	4b09      	ldr	r3, [pc, #36]	; (8101688 <HAL_MspInit+0x3c>)
 8101664:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101668:	f003 0302 	and.w	r3, r3, #2
 810166c:	607b      	str	r3, [r7, #4]
 810166e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM2_IRQn, 0, 0);
 8101670:	2200      	movs	r2, #0
 8101672:	2100      	movs	r1, #0
 8101674:	207e      	movs	r0, #126	; 0x7e
 8101676:	f000 fba4 	bl	8101dc2 <HAL_NVIC_SetPriority>
  /* HSEM2_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(HSEM2_IRQn);
 810167a:	207e      	movs	r0, #126	; 0x7e
 810167c:	f000 fbbb 	bl	8101df6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8101680:	bf00      	nop
 8101682:	3708      	adds	r7, #8
 8101684:	46bd      	mov	sp, r7
 8101686:	bd80      	pop	{r7, pc}
 8101688:	58024400 	.word	0x58024400

0810168c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 810168c:	b480      	push	{r7}
 810168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8101690:	e7fe      	b.n	8101690 <NMI_Handler+0x4>

08101692 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8101692:	b480      	push	{r7}
 8101694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8101696:	e7fe      	b.n	8101696 <HardFault_Handler+0x4>

08101698 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8101698:	b480      	push	{r7}
 810169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 810169c:	e7fe      	b.n	810169c <MemManage_Handler+0x4>

0810169e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 810169e:	b480      	push	{r7}
 81016a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 81016a2:	e7fe      	b.n	81016a2 <BusFault_Handler+0x4>

081016a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 81016a4:	b480      	push	{r7}
 81016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 81016a8:	e7fe      	b.n	81016a8 <UsageFault_Handler+0x4>

081016aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 81016aa:	b480      	push	{r7}
 81016ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 81016ae:	bf00      	nop
 81016b0:	46bd      	mov	sp, r7
 81016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81016b6:	4770      	bx	lr

081016b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 81016b8:	b480      	push	{r7}
 81016ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 81016bc:	bf00      	nop
 81016be:	46bd      	mov	sp, r7
 81016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81016c4:	4770      	bx	lr

081016c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 81016c6:	b480      	push	{r7}
 81016c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 81016ca:	bf00      	nop
 81016cc:	46bd      	mov	sp, r7
 81016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 81016d2:	4770      	bx	lr

081016d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 81016d4:	b580      	push	{r7, lr}
 81016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 81016d8:	f000 fa54 	bl	8101b84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 81016dc:	bf00      	nop
 81016de:	bd80      	pop	{r7, pc}

081016e0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 81016e0:	b580      	push	{r7, lr}
 81016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 81016e4:	4802      	ldr	r0, [pc, #8]	; (81016f0 <TIM2_IRQHandler+0x10>)
 81016e6:	f003 fa75 	bl	8104bd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 81016ea:	bf00      	nop
 81016ec:	bd80      	pop	{r7, pc}
 81016ee:	bf00      	nop
 81016f0:	10000100 	.word	0x10000100

081016f4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 81016f4:	b580      	push	{r7, lr}
 81016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Home_X_Pin);
 81016f8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 81016fc:	f000 fd8b 	bl	8102216 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8101700:	bf00      	nop
 8101702:	bd80      	pop	{r7, pc}

08101704 <HSEM2_IRQHandler>:

/**
  * @brief This function handles HSEM2 global interrupt.
  */
void HSEM2_IRQHandler(void)
{
 8101704:	b580      	push	{r7, lr}
 8101706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM2_IRQn 0 */

  /* USER CODE END HSEM2_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8101708:	f000 fde0 	bl	81022cc <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM2_IRQn 1 */

  /* USER CODE END HSEM2_IRQn 1 */
}
 810170c:	bf00      	nop
 810170e:	bd80      	pop	{r7, pc}

08101710 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8101710:	b580      	push	{r7, lr}
 8101712:	b08c      	sub	sp, #48	; 0x30
 8101714:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8101716:	f107 030c 	add.w	r3, r7, #12
 810171a:	2224      	movs	r2, #36	; 0x24
 810171c:	2100      	movs	r1, #0
 810171e:	4618      	mov	r0, r3
 8101720:	f004 f920 	bl	8105964 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8101724:	463b      	mov	r3, r7
 8101726:	2200      	movs	r2, #0
 8101728:	601a      	str	r2, [r3, #0]
 810172a:	605a      	str	r2, [r3, #4]
 810172c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 810172e:	4b21      	ldr	r3, [pc, #132]	; (81017b4 <MX_TIM2_Init+0xa4>)
 8101730:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8101734:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8101736:	4b1f      	ldr	r3, [pc, #124]	; (81017b4 <MX_TIM2_Init+0xa4>)
 8101738:	2200      	movs	r2, #0
 810173a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 810173c:	4b1d      	ldr	r3, [pc, #116]	; (81017b4 <MX_TIM2_Init+0xa4>)
 810173e:	2200      	movs	r2, #0
 8101740:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8101742:	4b1c      	ldr	r3, [pc, #112]	; (81017b4 <MX_TIM2_Init+0xa4>)
 8101744:	f04f 32ff 	mov.w	r2, #4294967295
 8101748:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 810174a:	4b1a      	ldr	r3, [pc, #104]	; (81017b4 <MX_TIM2_Init+0xa4>)
 810174c:	2200      	movs	r2, #0
 810174e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8101750:	4b18      	ldr	r3, [pc, #96]	; (81017b4 <MX_TIM2_Init+0xa4>)
 8101752:	2200      	movs	r2, #0
 8101754:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8101756:	2303      	movs	r3, #3
 8101758:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 810175a:	2300      	movs	r3, #0
 810175c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 810175e:	2301      	movs	r3, #1
 8101760:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8101762:	2300      	movs	r3, #0
 8101764:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8101766:	2300      	movs	r3, #0
 8101768:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 810176a:	2300      	movs	r3, #0
 810176c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 810176e:	2301      	movs	r3, #1
 8101770:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8101772:	2300      	movs	r3, #0
 8101774:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8101776:	2300      	movs	r3, #0
 8101778:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 810177a:	f107 030c 	add.w	r3, r7, #12
 810177e:	4619      	mov	r1, r3
 8101780:	480c      	ldr	r0, [pc, #48]	; (81017b4 <MX_TIM2_Init+0xa4>)
 8101782:	f003 f8d3 	bl	810492c <HAL_TIM_Encoder_Init>
 8101786:	4603      	mov	r3, r0
 8101788:	2b00      	cmp	r3, #0
 810178a:	d001      	beq.n	8101790 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 810178c:	f7ff fdba 	bl	8101304 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8101790:	2300      	movs	r3, #0
 8101792:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8101794:	2300      	movs	r3, #0
 8101796:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8101798:	463b      	mov	r3, r7
 810179a:	4619      	mov	r1, r3
 810179c:	4805      	ldr	r0, [pc, #20]	; (81017b4 <MX_TIM2_Init+0xa4>)
 810179e:	f004 f80b 	bl	81057b8 <HAL_TIMEx_MasterConfigSynchronization>
 81017a2:	4603      	mov	r3, r0
 81017a4:	2b00      	cmp	r3, #0
 81017a6:	d001      	beq.n	81017ac <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 81017a8:	f7ff fdac 	bl	8101304 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 81017ac:	bf00      	nop
 81017ae:	3730      	adds	r7, #48	; 0x30
 81017b0:	46bd      	mov	sp, r7
 81017b2:	bd80      	pop	{r7, pc}
 81017b4:	10000100 	.word	0x10000100

081017b8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 81017b8:	b580      	push	{r7, lr}
 81017ba:	b08a      	sub	sp, #40	; 0x28
 81017bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 81017be:	f107 031c 	add.w	r3, r7, #28
 81017c2:	2200      	movs	r2, #0
 81017c4:	601a      	str	r2, [r3, #0]
 81017c6:	605a      	str	r2, [r3, #4]
 81017c8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 81017ca:	463b      	mov	r3, r7
 81017cc:	2200      	movs	r2, #0
 81017ce:	601a      	str	r2, [r3, #0]
 81017d0:	605a      	str	r2, [r3, #4]
 81017d2:	609a      	str	r2, [r3, #8]
 81017d4:	60da      	str	r2, [r3, #12]
 81017d6:	611a      	str	r2, [r3, #16]
 81017d8:	615a      	str	r2, [r3, #20]
 81017da:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 81017dc:	4b21      	ldr	r3, [pc, #132]	; (8101864 <MX_TIM3_Init+0xac>)
 81017de:	4a22      	ldr	r2, [pc, #136]	; (8101868 <MX_TIM3_Init+0xb0>)
 81017e0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 20-1;
 81017e2:	4b20      	ldr	r3, [pc, #128]	; (8101864 <MX_TIM3_Init+0xac>)
 81017e4:	2213      	movs	r2, #19
 81017e6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 81017e8:	4b1e      	ldr	r3, [pc, #120]	; (8101864 <MX_TIM3_Init+0xac>)
 81017ea:	2200      	movs	r2, #0
 81017ec:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000-1;
 81017ee:	4b1d      	ldr	r3, [pc, #116]	; (8101864 <MX_TIM3_Init+0xac>)
 81017f0:	f240 72cf 	movw	r2, #1999	; 0x7cf
 81017f4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 81017f6:	4b1b      	ldr	r3, [pc, #108]	; (8101864 <MX_TIM3_Init+0xac>)
 81017f8:	2200      	movs	r2, #0
 81017fa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 81017fc:	4b19      	ldr	r3, [pc, #100]	; (8101864 <MX_TIM3_Init+0xac>)
 81017fe:	2200      	movs	r2, #0
 8101800:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8101802:	4818      	ldr	r0, [pc, #96]	; (8101864 <MX_TIM3_Init+0xac>)
 8101804:	f002 ff2c 	bl	8104660 <HAL_TIM_PWM_Init>
 8101808:	4603      	mov	r3, r0
 810180a:	2b00      	cmp	r3, #0
 810180c:	d001      	beq.n	8101812 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 810180e:	f7ff fd79 	bl	8101304 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8101812:	2300      	movs	r3, #0
 8101814:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8101816:	2300      	movs	r3, #0
 8101818:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 810181a:	f107 031c 	add.w	r3, r7, #28
 810181e:	4619      	mov	r1, r3
 8101820:	4810      	ldr	r0, [pc, #64]	; (8101864 <MX_TIM3_Init+0xac>)
 8101822:	f003 ffc9 	bl	81057b8 <HAL_TIMEx_MasterConfigSynchronization>
 8101826:	4603      	mov	r3, r0
 8101828:	2b00      	cmp	r3, #0
 810182a:	d001      	beq.n	8101830 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 810182c:	f7ff fd6a 	bl	8101304 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8101830:	2360      	movs	r3, #96	; 0x60
 8101832:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8101834:	2300      	movs	r3, #0
 8101836:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8101838:	2300      	movs	r3, #0
 810183a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 810183c:	2300      	movs	r3, #0
 810183e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8101840:	463b      	mov	r3, r7
 8101842:	2208      	movs	r2, #8
 8101844:	4619      	mov	r1, r3
 8101846:	4807      	ldr	r0, [pc, #28]	; (8101864 <MX_TIM3_Init+0xac>)
 8101848:	f003 fae4 	bl	8104e14 <HAL_TIM_PWM_ConfigChannel>
 810184c:	4603      	mov	r3, r0
 810184e:	2b00      	cmp	r3, #0
 8101850:	d001      	beq.n	8101856 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8101852:	f7ff fd57 	bl	8101304 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8101856:	4803      	ldr	r0, [pc, #12]	; (8101864 <MX_TIM3_Init+0xac>)
 8101858:	f000 f89a 	bl	8101990 <HAL_TIM_MspPostInit>

}
 810185c:	bf00      	nop
 810185e:	3728      	adds	r7, #40	; 0x28
 8101860:	46bd      	mov	sp, r7
 8101862:	bd80      	pop	{r7, pc}
 8101864:	1000014c 	.word	0x1000014c
 8101868:	40000400 	.word	0x40000400

0810186c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 810186c:	b580      	push	{r7, lr}
 810186e:	b08a      	sub	sp, #40	; 0x28
 8101870:	af00      	add	r7, sp, #0
 8101872:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101874:	f107 0314 	add.w	r3, r7, #20
 8101878:	2200      	movs	r2, #0
 810187a:	601a      	str	r2, [r3, #0]
 810187c:	605a      	str	r2, [r3, #4]
 810187e:	609a      	str	r2, [r3, #8]
 8101880:	60da      	str	r2, [r3, #12]
 8101882:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8101884:	687b      	ldr	r3, [r7, #4]
 8101886:	681b      	ldr	r3, [r3, #0]
 8101888:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810188c:	d154      	bne.n	8101938 <HAL_TIM_Encoder_MspInit+0xcc>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 810188e:	4b2c      	ldr	r3, [pc, #176]	; (8101940 <HAL_TIM_Encoder_MspInit+0xd4>)
 8101890:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101894:	4a2a      	ldr	r2, [pc, #168]	; (8101940 <HAL_TIM_Encoder_MspInit+0xd4>)
 8101896:	f043 0301 	orr.w	r3, r3, #1
 810189a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 810189e:	4b28      	ldr	r3, [pc, #160]	; (8101940 <HAL_TIM_Encoder_MspInit+0xd4>)
 81018a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81018a4:	f003 0301 	and.w	r3, r3, #1
 81018a8:	613b      	str	r3, [r7, #16]
 81018aa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 81018ac:	4b24      	ldr	r3, [pc, #144]	; (8101940 <HAL_TIM_Encoder_MspInit+0xd4>)
 81018ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81018b2:	4a23      	ldr	r2, [pc, #140]	; (8101940 <HAL_TIM_Encoder_MspInit+0xd4>)
 81018b4:	f043 0301 	orr.w	r3, r3, #1
 81018b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81018bc:	4b20      	ldr	r3, [pc, #128]	; (8101940 <HAL_TIM_Encoder_MspInit+0xd4>)
 81018be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81018c2:	f003 0301 	and.w	r3, r3, #1
 81018c6:	60fb      	str	r3, [r7, #12]
 81018c8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 81018ca:	4b1d      	ldr	r3, [pc, #116]	; (8101940 <HAL_TIM_Encoder_MspInit+0xd4>)
 81018cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81018d0:	4a1b      	ldr	r2, [pc, #108]	; (8101940 <HAL_TIM_Encoder_MspInit+0xd4>)
 81018d2:	f043 0302 	orr.w	r3, r3, #2
 81018d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81018da:	4b19      	ldr	r3, [pc, #100]	; (8101940 <HAL_TIM_Encoder_MspInit+0xd4>)
 81018dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81018e0:	f003 0302 	and.w	r3, r3, #2
 81018e4:	60bb      	str	r3, [r7, #8]
 81018e6:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB3 (JTDO/TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 81018e8:	2320      	movs	r3, #32
 81018ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81018ec:	2302      	movs	r3, #2
 81018ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81018f0:	2300      	movs	r3, #0
 81018f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81018f4:	2300      	movs	r3, #0
 81018f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 81018f8:	2301      	movs	r3, #1
 81018fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 81018fc:	f107 0314 	add.w	r3, r7, #20
 8101900:	4619      	mov	r1, r3
 8101902:	4810      	ldr	r0, [pc, #64]	; (8101944 <HAL_TIM_Encoder_MspInit+0xd8>)
 8101904:	f000 faa6 	bl	8101e54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8101908:	2308      	movs	r3, #8
 810190a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810190c:	2302      	movs	r3, #2
 810190e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101910:	2300      	movs	r3, #0
 8101912:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101914:	2300      	movs	r3, #0
 8101916:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8101918:	2301      	movs	r3, #1
 810191a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 810191c:	f107 0314 	add.w	r3, r7, #20
 8101920:	4619      	mov	r1, r3
 8101922:	4809      	ldr	r0, [pc, #36]	; (8101948 <HAL_TIM_Encoder_MspInit+0xdc>)
 8101924:	f000 fa96 	bl	8101e54 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8101928:	2200      	movs	r2, #0
 810192a:	2100      	movs	r1, #0
 810192c:	201c      	movs	r0, #28
 810192e:	f000 fa48 	bl	8101dc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8101932:	201c      	movs	r0, #28
 8101934:	f000 fa5f 	bl	8101df6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8101938:	bf00      	nop
 810193a:	3728      	adds	r7, #40	; 0x28
 810193c:	46bd      	mov	sp, r7
 810193e:	bd80      	pop	{r7, pc}
 8101940:	58024400 	.word	0x58024400
 8101944:	58020000 	.word	0x58020000
 8101948:	58020400 	.word	0x58020400

0810194c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 810194c:	b480      	push	{r7}
 810194e:	b085      	sub	sp, #20
 8101950:	af00      	add	r7, sp, #0
 8101952:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8101954:	687b      	ldr	r3, [r7, #4]
 8101956:	681b      	ldr	r3, [r3, #0]
 8101958:	4a0b      	ldr	r2, [pc, #44]	; (8101988 <HAL_TIM_PWM_MspInit+0x3c>)
 810195a:	4293      	cmp	r3, r2
 810195c:	d10e      	bne.n	810197c <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 810195e:	4b0b      	ldr	r3, [pc, #44]	; (810198c <HAL_TIM_PWM_MspInit+0x40>)
 8101960:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101964:	4a09      	ldr	r2, [pc, #36]	; (810198c <HAL_TIM_PWM_MspInit+0x40>)
 8101966:	f043 0302 	orr.w	r3, r3, #2
 810196a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 810196e:	4b07      	ldr	r3, [pc, #28]	; (810198c <HAL_TIM_PWM_MspInit+0x40>)
 8101970:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101974:	f003 0302 	and.w	r3, r3, #2
 8101978:	60fb      	str	r3, [r7, #12]
 810197a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 810197c:	bf00      	nop
 810197e:	3714      	adds	r7, #20
 8101980:	46bd      	mov	sp, r7
 8101982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101986:	4770      	bx	lr
 8101988:	40000400 	.word	0x40000400
 810198c:	58024400 	.word	0x58024400

08101990 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8101990:	b580      	push	{r7, lr}
 8101992:	b088      	sub	sp, #32
 8101994:	af00      	add	r7, sp, #0
 8101996:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101998:	f107 030c 	add.w	r3, r7, #12
 810199c:	2200      	movs	r2, #0
 810199e:	601a      	str	r2, [r3, #0]
 81019a0:	605a      	str	r2, [r3, #4]
 81019a2:	609a      	str	r2, [r3, #8]
 81019a4:	60da      	str	r2, [r3, #12]
 81019a6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 81019a8:	687b      	ldr	r3, [r7, #4]
 81019aa:	681b      	ldr	r3, [r3, #0]
 81019ac:	4a13      	ldr	r2, [pc, #76]	; (81019fc <HAL_TIM_MspPostInit+0x6c>)
 81019ae:	4293      	cmp	r3, r2
 81019b0:	d11f      	bne.n	81019f2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 81019b2:	4b13      	ldr	r3, [pc, #76]	; (8101a00 <HAL_TIM_MspPostInit+0x70>)
 81019b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81019b8:	4a11      	ldr	r2, [pc, #68]	; (8101a00 <HAL_TIM_MspPostInit+0x70>)
 81019ba:	f043 0304 	orr.w	r3, r3, #4
 81019be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81019c2:	4b0f      	ldr	r3, [pc, #60]	; (8101a00 <HAL_TIM_MspPostInit+0x70>)
 81019c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81019c8:	f003 0304 	and.w	r3, r3, #4
 81019cc:	60bb      	str	r3, [r7, #8]
 81019ce:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = PWM_X_Pin;
 81019d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 81019d4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81019d6:	2302      	movs	r3, #2
 81019d8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81019da:	2300      	movs	r3, #0
 81019dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81019de:	2300      	movs	r3, #0
 81019e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 81019e2:	2302      	movs	r3, #2
 81019e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_X_GPIO_Port, &GPIO_InitStruct);
 81019e6:	f107 030c 	add.w	r3, r7, #12
 81019ea:	4619      	mov	r1, r3
 81019ec:	4805      	ldr	r0, [pc, #20]	; (8101a04 <HAL_TIM_MspPostInit+0x74>)
 81019ee:	f000 fa31 	bl	8101e54 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 81019f2:	bf00      	nop
 81019f4:	3720      	adds	r7, #32
 81019f6:	46bd      	mov	sp, r7
 81019f8:	bd80      	pop	{r7, pc}
 81019fa:	bf00      	nop
 81019fc:	40000400 	.word	0x40000400
 8101a00:	58024400 	.word	0x58024400
 8101a04:	58020800 	.word	0x58020800

08101a08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8101a08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8101a40 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8101a0c:	f7ff f8f0 	bl	8100bf0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8101a10:	480c      	ldr	r0, [pc, #48]	; (8101a44 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8101a12:	490d      	ldr	r1, [pc, #52]	; (8101a48 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8101a14:	4a0d      	ldr	r2, [pc, #52]	; (8101a4c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8101a16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8101a18:	e002      	b.n	8101a20 <LoopCopyDataInit>

08101a1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8101a1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8101a1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8101a1e:	3304      	adds	r3, #4

08101a20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8101a20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8101a22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8101a24:	d3f9      	bcc.n	8101a1a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8101a26:	4a0a      	ldr	r2, [pc, #40]	; (8101a50 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8101a28:	4c0a      	ldr	r4, [pc, #40]	; (8101a54 <LoopFillZerobss+0x22>)
  movs r3, #0
 8101a2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8101a2c:	e001      	b.n	8101a32 <LoopFillZerobss>

08101a2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8101a2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8101a30:	3204      	adds	r2, #4

08101a32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8101a32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8101a34:	d3fb      	bcc.n	8101a2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8101a36:	f003 ff71 	bl	810591c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8101a3a:	f7ff fb47 	bl	81010cc <main>
  bx  lr
 8101a3e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8101a40:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8101a44:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8101a48:	1000007c 	.word	0x1000007c
  ldr r2, =_sidata
 8101a4c:	08106810 	.word	0x08106810
  ldr r2, =_sbss
 8101a50:	1000007c 	.word	0x1000007c
  ldr r4, =_ebss
 8101a54:	1000019c 	.word	0x1000019c

08101a58 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8101a58:	e7fe      	b.n	8101a58 <ADC3_IRQHandler>
	...

08101a5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8101a5c:	b580      	push	{r7, lr}
 8101a5e:	b082      	sub	sp, #8
 8101a60:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8101a62:	4b28      	ldr	r3, [pc, #160]	; (8101b04 <HAL_Init+0xa8>)
 8101a64:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101a68:	4a26      	ldr	r2, [pc, #152]	; (8101b04 <HAL_Init+0xa8>)
 8101a6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8101a6e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8101a72:	4b24      	ldr	r3, [pc, #144]	; (8101b04 <HAL_Init+0xa8>)
 8101a74:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101a78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8101a7c:	603b      	str	r3, [r7, #0]
 8101a7e:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8101a80:	4b21      	ldr	r3, [pc, #132]	; (8101b08 <HAL_Init+0xac>)
 8101a82:	681b      	ldr	r3, [r3, #0]
 8101a84:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8101a88:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8101a8c:	4a1e      	ldr	r2, [pc, #120]	; (8101b08 <HAL_Init+0xac>)
 8101a8e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8101a92:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8101a94:	4b1c      	ldr	r3, [pc, #112]	; (8101b08 <HAL_Init+0xac>)
 8101a96:	681b      	ldr	r3, [r3, #0]
 8101a98:	4a1b      	ldr	r2, [pc, #108]	; (8101b08 <HAL_Init+0xac>)
 8101a9a:	f043 0301 	orr.w	r3, r3, #1
 8101a9e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8101aa0:	2003      	movs	r0, #3
 8101aa2:	f000 f983 	bl	8101dac <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8101aa6:	f001 fbb7 	bl	8103218 <HAL_RCC_GetSysClockFreq>
 8101aaa:	4602      	mov	r2, r0
 8101aac:	4b15      	ldr	r3, [pc, #84]	; (8101b04 <HAL_Init+0xa8>)
 8101aae:	699b      	ldr	r3, [r3, #24]
 8101ab0:	0a1b      	lsrs	r3, r3, #8
 8101ab2:	f003 030f 	and.w	r3, r3, #15
 8101ab6:	4915      	ldr	r1, [pc, #84]	; (8101b0c <HAL_Init+0xb0>)
 8101ab8:	5ccb      	ldrb	r3, [r1, r3]
 8101aba:	f003 031f 	and.w	r3, r3, #31
 8101abe:	fa22 f303 	lsr.w	r3, r2, r3
 8101ac2:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8101ac4:	4b0f      	ldr	r3, [pc, #60]	; (8101b04 <HAL_Init+0xa8>)
 8101ac6:	699b      	ldr	r3, [r3, #24]
 8101ac8:	f003 030f 	and.w	r3, r3, #15
 8101acc:	4a0f      	ldr	r2, [pc, #60]	; (8101b0c <HAL_Init+0xb0>)
 8101ace:	5cd3      	ldrb	r3, [r2, r3]
 8101ad0:	f003 031f 	and.w	r3, r3, #31
 8101ad4:	687a      	ldr	r2, [r7, #4]
 8101ad6:	fa22 f303 	lsr.w	r3, r2, r3
 8101ada:	4a0d      	ldr	r2, [pc, #52]	; (8101b10 <HAL_Init+0xb4>)
 8101adc:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8101ade:	4b0c      	ldr	r3, [pc, #48]	; (8101b10 <HAL_Init+0xb4>)
 8101ae0:	681b      	ldr	r3, [r3, #0]
 8101ae2:	4a0c      	ldr	r2, [pc, #48]	; (8101b14 <HAL_Init+0xb8>)
 8101ae4:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8101ae6:	2000      	movs	r0, #0
 8101ae8:	f000 f816 	bl	8101b18 <HAL_InitTick>
 8101aec:	4603      	mov	r3, r0
 8101aee:	2b00      	cmp	r3, #0
 8101af0:	d001      	beq.n	8101af6 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8101af2:	2301      	movs	r3, #1
 8101af4:	e002      	b.n	8101afc <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8101af6:	f7ff fda9 	bl	810164c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8101afa:	2300      	movs	r3, #0
}
 8101afc:	4618      	mov	r0, r3
 8101afe:	3708      	adds	r7, #8
 8101b00:	46bd      	mov	sp, r7
 8101b02:	bd80      	pop	{r7, pc}
 8101b04:	58024400 	.word	0x58024400
 8101b08:	40024400 	.word	0x40024400
 8101b0c:	081067c8 	.word	0x081067c8
 8101b10:	10000004 	.word	0x10000004
 8101b14:	10000000 	.word	0x10000000

08101b18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8101b18:	b580      	push	{r7, lr}
 8101b1a:	b082      	sub	sp, #8
 8101b1c:	af00      	add	r7, sp, #0
 8101b1e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8101b20:	4b15      	ldr	r3, [pc, #84]	; (8101b78 <HAL_InitTick+0x60>)
 8101b22:	781b      	ldrb	r3, [r3, #0]
 8101b24:	2b00      	cmp	r3, #0
 8101b26:	d101      	bne.n	8101b2c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8101b28:	2301      	movs	r3, #1
 8101b2a:	e021      	b.n	8101b70 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8101b2c:	4b13      	ldr	r3, [pc, #76]	; (8101b7c <HAL_InitTick+0x64>)
 8101b2e:	681a      	ldr	r2, [r3, #0]
 8101b30:	4b11      	ldr	r3, [pc, #68]	; (8101b78 <HAL_InitTick+0x60>)
 8101b32:	781b      	ldrb	r3, [r3, #0]
 8101b34:	4619      	mov	r1, r3
 8101b36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8101b3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8101b3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8101b42:	4618      	mov	r0, r3
 8101b44:	f000 f965 	bl	8101e12 <HAL_SYSTICK_Config>
 8101b48:	4603      	mov	r3, r0
 8101b4a:	2b00      	cmp	r3, #0
 8101b4c:	d001      	beq.n	8101b52 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8101b4e:	2301      	movs	r3, #1
 8101b50:	e00e      	b.n	8101b70 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8101b52:	687b      	ldr	r3, [r7, #4]
 8101b54:	2b0f      	cmp	r3, #15
 8101b56:	d80a      	bhi.n	8101b6e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8101b58:	2200      	movs	r2, #0
 8101b5a:	6879      	ldr	r1, [r7, #4]
 8101b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8101b60:	f000 f92f 	bl	8101dc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8101b64:	4a06      	ldr	r2, [pc, #24]	; (8101b80 <HAL_InitTick+0x68>)
 8101b66:	687b      	ldr	r3, [r7, #4]
 8101b68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8101b6a:	2300      	movs	r3, #0
 8101b6c:	e000      	b.n	8101b70 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8101b6e:	2301      	movs	r3, #1
}
 8101b70:	4618      	mov	r0, r3
 8101b72:	3708      	adds	r7, #8
 8101b74:	46bd      	mov	sp, r7
 8101b76:	bd80      	pop	{r7, pc}
 8101b78:	10000014 	.word	0x10000014
 8101b7c:	10000000 	.word	0x10000000
 8101b80:	10000010 	.word	0x10000010

08101b84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8101b84:	b480      	push	{r7}
 8101b86:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8101b88:	4b06      	ldr	r3, [pc, #24]	; (8101ba4 <HAL_IncTick+0x20>)
 8101b8a:	781b      	ldrb	r3, [r3, #0]
 8101b8c:	461a      	mov	r2, r3
 8101b8e:	4b06      	ldr	r3, [pc, #24]	; (8101ba8 <HAL_IncTick+0x24>)
 8101b90:	681b      	ldr	r3, [r3, #0]
 8101b92:	4413      	add	r3, r2
 8101b94:	4a04      	ldr	r2, [pc, #16]	; (8101ba8 <HAL_IncTick+0x24>)
 8101b96:	6013      	str	r3, [r2, #0]
}
 8101b98:	bf00      	nop
 8101b9a:	46bd      	mov	sp, r7
 8101b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101ba0:	4770      	bx	lr
 8101ba2:	bf00      	nop
 8101ba4:	10000014 	.word	0x10000014
 8101ba8:	10000198 	.word	0x10000198

08101bac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8101bac:	b480      	push	{r7}
 8101bae:	af00      	add	r7, sp, #0
  return uwTick;
 8101bb0:	4b03      	ldr	r3, [pc, #12]	; (8101bc0 <HAL_GetTick+0x14>)
 8101bb2:	681b      	ldr	r3, [r3, #0]
}
 8101bb4:	4618      	mov	r0, r3
 8101bb6:	46bd      	mov	sp, r7
 8101bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101bbc:	4770      	bx	lr
 8101bbe:	bf00      	nop
 8101bc0:	10000198 	.word	0x10000198

08101bc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8101bc4:	b580      	push	{r7, lr}
 8101bc6:	b084      	sub	sp, #16
 8101bc8:	af00      	add	r7, sp, #0
 8101bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8101bcc:	f7ff ffee 	bl	8101bac <HAL_GetTick>
 8101bd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8101bd2:	687b      	ldr	r3, [r7, #4]
 8101bd4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8101bd6:	68fb      	ldr	r3, [r7, #12]
 8101bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8101bdc:	d005      	beq.n	8101bea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8101bde:	4b0a      	ldr	r3, [pc, #40]	; (8101c08 <HAL_Delay+0x44>)
 8101be0:	781b      	ldrb	r3, [r3, #0]
 8101be2:	461a      	mov	r2, r3
 8101be4:	68fb      	ldr	r3, [r7, #12]
 8101be6:	4413      	add	r3, r2
 8101be8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8101bea:	bf00      	nop
 8101bec:	f7ff ffde 	bl	8101bac <HAL_GetTick>
 8101bf0:	4602      	mov	r2, r0
 8101bf2:	68bb      	ldr	r3, [r7, #8]
 8101bf4:	1ad3      	subs	r3, r2, r3
 8101bf6:	68fa      	ldr	r2, [r7, #12]
 8101bf8:	429a      	cmp	r2, r3
 8101bfa:	d8f7      	bhi.n	8101bec <HAL_Delay+0x28>
  {
  }
}
 8101bfc:	bf00      	nop
 8101bfe:	bf00      	nop
 8101c00:	3710      	adds	r7, #16
 8101c02:	46bd      	mov	sp, r7
 8101c04:	bd80      	pop	{r7, pc}
 8101c06:	bf00      	nop
 8101c08:	10000014 	.word	0x10000014

08101c0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8101c0c:	b480      	push	{r7}
 8101c0e:	b085      	sub	sp, #20
 8101c10:	af00      	add	r7, sp, #0
 8101c12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8101c14:	687b      	ldr	r3, [r7, #4]
 8101c16:	f003 0307 	and.w	r3, r3, #7
 8101c1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8101c1c:	4b0c      	ldr	r3, [pc, #48]	; (8101c50 <__NVIC_SetPriorityGrouping+0x44>)
 8101c1e:	68db      	ldr	r3, [r3, #12]
 8101c20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8101c22:	68ba      	ldr	r2, [r7, #8]
 8101c24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8101c28:	4013      	ands	r3, r2
 8101c2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8101c2c:	68fb      	ldr	r3, [r7, #12]
 8101c2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8101c30:	68bb      	ldr	r3, [r7, #8]
 8101c32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8101c34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8101c38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8101c3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8101c3e:	4a04      	ldr	r2, [pc, #16]	; (8101c50 <__NVIC_SetPriorityGrouping+0x44>)
 8101c40:	68bb      	ldr	r3, [r7, #8]
 8101c42:	60d3      	str	r3, [r2, #12]
}
 8101c44:	bf00      	nop
 8101c46:	3714      	adds	r7, #20
 8101c48:	46bd      	mov	sp, r7
 8101c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101c4e:	4770      	bx	lr
 8101c50:	e000ed00 	.word	0xe000ed00

08101c54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8101c54:	b480      	push	{r7}
 8101c56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8101c58:	4b04      	ldr	r3, [pc, #16]	; (8101c6c <__NVIC_GetPriorityGrouping+0x18>)
 8101c5a:	68db      	ldr	r3, [r3, #12]
 8101c5c:	0a1b      	lsrs	r3, r3, #8
 8101c5e:	f003 0307 	and.w	r3, r3, #7
}
 8101c62:	4618      	mov	r0, r3
 8101c64:	46bd      	mov	sp, r7
 8101c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101c6a:	4770      	bx	lr
 8101c6c:	e000ed00 	.word	0xe000ed00

08101c70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8101c70:	b480      	push	{r7}
 8101c72:	b083      	sub	sp, #12
 8101c74:	af00      	add	r7, sp, #0
 8101c76:	4603      	mov	r3, r0
 8101c78:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8101c7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101c7e:	2b00      	cmp	r3, #0
 8101c80:	db0b      	blt.n	8101c9a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8101c82:	88fb      	ldrh	r3, [r7, #6]
 8101c84:	f003 021f 	and.w	r2, r3, #31
 8101c88:	4907      	ldr	r1, [pc, #28]	; (8101ca8 <__NVIC_EnableIRQ+0x38>)
 8101c8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101c8e:	095b      	lsrs	r3, r3, #5
 8101c90:	2001      	movs	r0, #1
 8101c92:	fa00 f202 	lsl.w	r2, r0, r2
 8101c96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8101c9a:	bf00      	nop
 8101c9c:	370c      	adds	r7, #12
 8101c9e:	46bd      	mov	sp, r7
 8101ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101ca4:	4770      	bx	lr
 8101ca6:	bf00      	nop
 8101ca8:	e000e100 	.word	0xe000e100

08101cac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8101cac:	b480      	push	{r7}
 8101cae:	b083      	sub	sp, #12
 8101cb0:	af00      	add	r7, sp, #0
 8101cb2:	4603      	mov	r3, r0
 8101cb4:	6039      	str	r1, [r7, #0]
 8101cb6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8101cb8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101cbc:	2b00      	cmp	r3, #0
 8101cbe:	db0a      	blt.n	8101cd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8101cc0:	683b      	ldr	r3, [r7, #0]
 8101cc2:	b2da      	uxtb	r2, r3
 8101cc4:	490c      	ldr	r1, [pc, #48]	; (8101cf8 <__NVIC_SetPriority+0x4c>)
 8101cc6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101cca:	0112      	lsls	r2, r2, #4
 8101ccc:	b2d2      	uxtb	r2, r2
 8101cce:	440b      	add	r3, r1
 8101cd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8101cd4:	e00a      	b.n	8101cec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8101cd6:	683b      	ldr	r3, [r7, #0]
 8101cd8:	b2da      	uxtb	r2, r3
 8101cda:	4908      	ldr	r1, [pc, #32]	; (8101cfc <__NVIC_SetPriority+0x50>)
 8101cdc:	88fb      	ldrh	r3, [r7, #6]
 8101cde:	f003 030f 	and.w	r3, r3, #15
 8101ce2:	3b04      	subs	r3, #4
 8101ce4:	0112      	lsls	r2, r2, #4
 8101ce6:	b2d2      	uxtb	r2, r2
 8101ce8:	440b      	add	r3, r1
 8101cea:	761a      	strb	r2, [r3, #24]
}
 8101cec:	bf00      	nop
 8101cee:	370c      	adds	r7, #12
 8101cf0:	46bd      	mov	sp, r7
 8101cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101cf6:	4770      	bx	lr
 8101cf8:	e000e100 	.word	0xe000e100
 8101cfc:	e000ed00 	.word	0xe000ed00

08101d00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8101d00:	b480      	push	{r7}
 8101d02:	b089      	sub	sp, #36	; 0x24
 8101d04:	af00      	add	r7, sp, #0
 8101d06:	60f8      	str	r0, [r7, #12]
 8101d08:	60b9      	str	r1, [r7, #8]
 8101d0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8101d0c:	68fb      	ldr	r3, [r7, #12]
 8101d0e:	f003 0307 	and.w	r3, r3, #7
 8101d12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8101d14:	69fb      	ldr	r3, [r7, #28]
 8101d16:	f1c3 0307 	rsb	r3, r3, #7
 8101d1a:	2b04      	cmp	r3, #4
 8101d1c:	bf28      	it	cs
 8101d1e:	2304      	movcs	r3, #4
 8101d20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8101d22:	69fb      	ldr	r3, [r7, #28]
 8101d24:	3304      	adds	r3, #4
 8101d26:	2b06      	cmp	r3, #6
 8101d28:	d902      	bls.n	8101d30 <NVIC_EncodePriority+0x30>
 8101d2a:	69fb      	ldr	r3, [r7, #28]
 8101d2c:	3b03      	subs	r3, #3
 8101d2e:	e000      	b.n	8101d32 <NVIC_EncodePriority+0x32>
 8101d30:	2300      	movs	r3, #0
 8101d32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101d34:	f04f 32ff 	mov.w	r2, #4294967295
 8101d38:	69bb      	ldr	r3, [r7, #24]
 8101d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8101d3e:	43da      	mvns	r2, r3
 8101d40:	68bb      	ldr	r3, [r7, #8]
 8101d42:	401a      	ands	r2, r3
 8101d44:	697b      	ldr	r3, [r7, #20]
 8101d46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8101d48:	f04f 31ff 	mov.w	r1, #4294967295
 8101d4c:	697b      	ldr	r3, [r7, #20]
 8101d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8101d52:	43d9      	mvns	r1, r3
 8101d54:	687b      	ldr	r3, [r7, #4]
 8101d56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101d58:	4313      	orrs	r3, r2
         );
}
 8101d5a:	4618      	mov	r0, r3
 8101d5c:	3724      	adds	r7, #36	; 0x24
 8101d5e:	46bd      	mov	sp, r7
 8101d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d64:	4770      	bx	lr
	...

08101d68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8101d68:	b580      	push	{r7, lr}
 8101d6a:	b082      	sub	sp, #8
 8101d6c:	af00      	add	r7, sp, #0
 8101d6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8101d70:	687b      	ldr	r3, [r7, #4]
 8101d72:	3b01      	subs	r3, #1
 8101d74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8101d78:	d301      	bcc.n	8101d7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8101d7a:	2301      	movs	r3, #1
 8101d7c:	e00f      	b.n	8101d9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8101d7e:	4a0a      	ldr	r2, [pc, #40]	; (8101da8 <SysTick_Config+0x40>)
 8101d80:	687b      	ldr	r3, [r7, #4]
 8101d82:	3b01      	subs	r3, #1
 8101d84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8101d86:	210f      	movs	r1, #15
 8101d88:	f04f 30ff 	mov.w	r0, #4294967295
 8101d8c:	f7ff ff8e 	bl	8101cac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8101d90:	4b05      	ldr	r3, [pc, #20]	; (8101da8 <SysTick_Config+0x40>)
 8101d92:	2200      	movs	r2, #0
 8101d94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8101d96:	4b04      	ldr	r3, [pc, #16]	; (8101da8 <SysTick_Config+0x40>)
 8101d98:	2207      	movs	r2, #7
 8101d9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8101d9c:	2300      	movs	r3, #0
}
 8101d9e:	4618      	mov	r0, r3
 8101da0:	3708      	adds	r7, #8
 8101da2:	46bd      	mov	sp, r7
 8101da4:	bd80      	pop	{r7, pc}
 8101da6:	bf00      	nop
 8101da8:	e000e010 	.word	0xe000e010

08101dac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8101dac:	b580      	push	{r7, lr}
 8101dae:	b082      	sub	sp, #8
 8101db0:	af00      	add	r7, sp, #0
 8101db2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8101db4:	6878      	ldr	r0, [r7, #4]
 8101db6:	f7ff ff29 	bl	8101c0c <__NVIC_SetPriorityGrouping>
}
 8101dba:	bf00      	nop
 8101dbc:	3708      	adds	r7, #8
 8101dbe:	46bd      	mov	sp, r7
 8101dc0:	bd80      	pop	{r7, pc}

08101dc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8101dc2:	b580      	push	{r7, lr}
 8101dc4:	b086      	sub	sp, #24
 8101dc6:	af00      	add	r7, sp, #0
 8101dc8:	4603      	mov	r3, r0
 8101dca:	60b9      	str	r1, [r7, #8]
 8101dcc:	607a      	str	r2, [r7, #4]
 8101dce:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8101dd0:	f7ff ff40 	bl	8101c54 <__NVIC_GetPriorityGrouping>
 8101dd4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8101dd6:	687a      	ldr	r2, [r7, #4]
 8101dd8:	68b9      	ldr	r1, [r7, #8]
 8101dda:	6978      	ldr	r0, [r7, #20]
 8101ddc:	f7ff ff90 	bl	8101d00 <NVIC_EncodePriority>
 8101de0:	4602      	mov	r2, r0
 8101de2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8101de6:	4611      	mov	r1, r2
 8101de8:	4618      	mov	r0, r3
 8101dea:	f7ff ff5f 	bl	8101cac <__NVIC_SetPriority>
}
 8101dee:	bf00      	nop
 8101df0:	3718      	adds	r7, #24
 8101df2:	46bd      	mov	sp, r7
 8101df4:	bd80      	pop	{r7, pc}

08101df6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8101df6:	b580      	push	{r7, lr}
 8101df8:	b082      	sub	sp, #8
 8101dfa:	af00      	add	r7, sp, #0
 8101dfc:	4603      	mov	r3, r0
 8101dfe:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8101e00:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101e04:	4618      	mov	r0, r3
 8101e06:	f7ff ff33 	bl	8101c70 <__NVIC_EnableIRQ>
}
 8101e0a:	bf00      	nop
 8101e0c:	3708      	adds	r7, #8
 8101e0e:	46bd      	mov	sp, r7
 8101e10:	bd80      	pop	{r7, pc}

08101e12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8101e12:	b580      	push	{r7, lr}
 8101e14:	b082      	sub	sp, #8
 8101e16:	af00      	add	r7, sp, #0
 8101e18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8101e1a:	6878      	ldr	r0, [r7, #4]
 8101e1c:	f7ff ffa4 	bl	8101d68 <SysTick_Config>
 8101e20:	4603      	mov	r3, r0
}
 8101e22:	4618      	mov	r0, r3
 8101e24:	3708      	adds	r7, #8
 8101e26:	46bd      	mov	sp, r7
 8101e28:	bd80      	pop	{r7, pc}
	...

08101e2c <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8101e2c:	b480      	push	{r7}
 8101e2e:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8101e30:	4b07      	ldr	r3, [pc, #28]	; (8101e50 <HAL_GetCurrentCPUID+0x24>)
 8101e32:	681b      	ldr	r3, [r3, #0]
 8101e34:	091b      	lsrs	r3, r3, #4
 8101e36:	f003 030f 	and.w	r3, r3, #15
 8101e3a:	2b07      	cmp	r3, #7
 8101e3c:	d101      	bne.n	8101e42 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8101e3e:	2303      	movs	r3, #3
 8101e40:	e000      	b.n	8101e44 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8101e42:	2301      	movs	r3, #1
  }
}
 8101e44:	4618      	mov	r0, r3
 8101e46:	46bd      	mov	sp, r7
 8101e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e4c:	4770      	bx	lr
 8101e4e:	bf00      	nop
 8101e50:	e000ed00 	.word	0xe000ed00

08101e54 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8101e54:	b480      	push	{r7}
 8101e56:	b089      	sub	sp, #36	; 0x24
 8101e58:	af00      	add	r7, sp, #0
 8101e5a:	6078      	str	r0, [r7, #4]
 8101e5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8101e5e:	2300      	movs	r3, #0
 8101e60:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8101e62:	4b89      	ldr	r3, [pc, #548]	; (8102088 <HAL_GPIO_Init+0x234>)
 8101e64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8101e66:	e194      	b.n	8102192 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8101e68:	683b      	ldr	r3, [r7, #0]
 8101e6a:	681a      	ldr	r2, [r3, #0]
 8101e6c:	2101      	movs	r1, #1
 8101e6e:	69fb      	ldr	r3, [r7, #28]
 8101e70:	fa01 f303 	lsl.w	r3, r1, r3
 8101e74:	4013      	ands	r3, r2
 8101e76:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8101e78:	693b      	ldr	r3, [r7, #16]
 8101e7a:	2b00      	cmp	r3, #0
 8101e7c:	f000 8186 	beq.w	810218c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8101e80:	683b      	ldr	r3, [r7, #0]
 8101e82:	685b      	ldr	r3, [r3, #4]
 8101e84:	f003 0303 	and.w	r3, r3, #3
 8101e88:	2b01      	cmp	r3, #1
 8101e8a:	d005      	beq.n	8101e98 <HAL_GPIO_Init+0x44>
 8101e8c:	683b      	ldr	r3, [r7, #0]
 8101e8e:	685b      	ldr	r3, [r3, #4]
 8101e90:	f003 0303 	and.w	r3, r3, #3
 8101e94:	2b02      	cmp	r3, #2
 8101e96:	d130      	bne.n	8101efa <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8101e98:	687b      	ldr	r3, [r7, #4]
 8101e9a:	689b      	ldr	r3, [r3, #8]
 8101e9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8101e9e:	69fb      	ldr	r3, [r7, #28]
 8101ea0:	005b      	lsls	r3, r3, #1
 8101ea2:	2203      	movs	r2, #3
 8101ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8101ea8:	43db      	mvns	r3, r3
 8101eaa:	69ba      	ldr	r2, [r7, #24]
 8101eac:	4013      	ands	r3, r2
 8101eae:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8101eb0:	683b      	ldr	r3, [r7, #0]
 8101eb2:	68da      	ldr	r2, [r3, #12]
 8101eb4:	69fb      	ldr	r3, [r7, #28]
 8101eb6:	005b      	lsls	r3, r3, #1
 8101eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8101ebc:	69ba      	ldr	r2, [r7, #24]
 8101ebe:	4313      	orrs	r3, r2
 8101ec0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8101ec2:	687b      	ldr	r3, [r7, #4]
 8101ec4:	69ba      	ldr	r2, [r7, #24]
 8101ec6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8101ec8:	687b      	ldr	r3, [r7, #4]
 8101eca:	685b      	ldr	r3, [r3, #4]
 8101ecc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8101ece:	2201      	movs	r2, #1
 8101ed0:	69fb      	ldr	r3, [r7, #28]
 8101ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8101ed6:	43db      	mvns	r3, r3
 8101ed8:	69ba      	ldr	r2, [r7, #24]
 8101eda:	4013      	ands	r3, r2
 8101edc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8101ede:	683b      	ldr	r3, [r7, #0]
 8101ee0:	685b      	ldr	r3, [r3, #4]
 8101ee2:	091b      	lsrs	r3, r3, #4
 8101ee4:	f003 0201 	and.w	r2, r3, #1
 8101ee8:	69fb      	ldr	r3, [r7, #28]
 8101eea:	fa02 f303 	lsl.w	r3, r2, r3
 8101eee:	69ba      	ldr	r2, [r7, #24]
 8101ef0:	4313      	orrs	r3, r2
 8101ef2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8101ef4:	687b      	ldr	r3, [r7, #4]
 8101ef6:	69ba      	ldr	r2, [r7, #24]
 8101ef8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8101efa:	683b      	ldr	r3, [r7, #0]
 8101efc:	685b      	ldr	r3, [r3, #4]
 8101efe:	f003 0303 	and.w	r3, r3, #3
 8101f02:	2b03      	cmp	r3, #3
 8101f04:	d017      	beq.n	8101f36 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8101f06:	687b      	ldr	r3, [r7, #4]
 8101f08:	68db      	ldr	r3, [r3, #12]
 8101f0a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8101f0c:	69fb      	ldr	r3, [r7, #28]
 8101f0e:	005b      	lsls	r3, r3, #1
 8101f10:	2203      	movs	r2, #3
 8101f12:	fa02 f303 	lsl.w	r3, r2, r3
 8101f16:	43db      	mvns	r3, r3
 8101f18:	69ba      	ldr	r2, [r7, #24]
 8101f1a:	4013      	ands	r3, r2
 8101f1c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8101f1e:	683b      	ldr	r3, [r7, #0]
 8101f20:	689a      	ldr	r2, [r3, #8]
 8101f22:	69fb      	ldr	r3, [r7, #28]
 8101f24:	005b      	lsls	r3, r3, #1
 8101f26:	fa02 f303 	lsl.w	r3, r2, r3
 8101f2a:	69ba      	ldr	r2, [r7, #24]
 8101f2c:	4313      	orrs	r3, r2
 8101f2e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8101f30:	687b      	ldr	r3, [r7, #4]
 8101f32:	69ba      	ldr	r2, [r7, #24]
 8101f34:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8101f36:	683b      	ldr	r3, [r7, #0]
 8101f38:	685b      	ldr	r3, [r3, #4]
 8101f3a:	f003 0303 	and.w	r3, r3, #3
 8101f3e:	2b02      	cmp	r3, #2
 8101f40:	d123      	bne.n	8101f8a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8101f42:	69fb      	ldr	r3, [r7, #28]
 8101f44:	08da      	lsrs	r2, r3, #3
 8101f46:	687b      	ldr	r3, [r7, #4]
 8101f48:	3208      	adds	r2, #8
 8101f4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8101f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8101f50:	69fb      	ldr	r3, [r7, #28]
 8101f52:	f003 0307 	and.w	r3, r3, #7
 8101f56:	009b      	lsls	r3, r3, #2
 8101f58:	220f      	movs	r2, #15
 8101f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8101f5e:	43db      	mvns	r3, r3
 8101f60:	69ba      	ldr	r2, [r7, #24]
 8101f62:	4013      	ands	r3, r2
 8101f64:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8101f66:	683b      	ldr	r3, [r7, #0]
 8101f68:	691a      	ldr	r2, [r3, #16]
 8101f6a:	69fb      	ldr	r3, [r7, #28]
 8101f6c:	f003 0307 	and.w	r3, r3, #7
 8101f70:	009b      	lsls	r3, r3, #2
 8101f72:	fa02 f303 	lsl.w	r3, r2, r3
 8101f76:	69ba      	ldr	r2, [r7, #24]
 8101f78:	4313      	orrs	r3, r2
 8101f7a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8101f7c:	69fb      	ldr	r3, [r7, #28]
 8101f7e:	08da      	lsrs	r2, r3, #3
 8101f80:	687b      	ldr	r3, [r7, #4]
 8101f82:	3208      	adds	r2, #8
 8101f84:	69b9      	ldr	r1, [r7, #24]
 8101f86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8101f8a:	687b      	ldr	r3, [r7, #4]
 8101f8c:	681b      	ldr	r3, [r3, #0]
 8101f8e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8101f90:	69fb      	ldr	r3, [r7, #28]
 8101f92:	005b      	lsls	r3, r3, #1
 8101f94:	2203      	movs	r2, #3
 8101f96:	fa02 f303 	lsl.w	r3, r2, r3
 8101f9a:	43db      	mvns	r3, r3
 8101f9c:	69ba      	ldr	r2, [r7, #24]
 8101f9e:	4013      	ands	r3, r2
 8101fa0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8101fa2:	683b      	ldr	r3, [r7, #0]
 8101fa4:	685b      	ldr	r3, [r3, #4]
 8101fa6:	f003 0203 	and.w	r2, r3, #3
 8101faa:	69fb      	ldr	r3, [r7, #28]
 8101fac:	005b      	lsls	r3, r3, #1
 8101fae:	fa02 f303 	lsl.w	r3, r2, r3
 8101fb2:	69ba      	ldr	r2, [r7, #24]
 8101fb4:	4313      	orrs	r3, r2
 8101fb6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8101fb8:	687b      	ldr	r3, [r7, #4]
 8101fba:	69ba      	ldr	r2, [r7, #24]
 8101fbc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8101fbe:	683b      	ldr	r3, [r7, #0]
 8101fc0:	685b      	ldr	r3, [r3, #4]
 8101fc2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8101fc6:	2b00      	cmp	r3, #0
 8101fc8:	f000 80e0 	beq.w	810218c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8101fcc:	4b2f      	ldr	r3, [pc, #188]	; (810208c <HAL_GPIO_Init+0x238>)
 8101fce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101fd2:	4a2e      	ldr	r2, [pc, #184]	; (810208c <HAL_GPIO_Init+0x238>)
 8101fd4:	f043 0302 	orr.w	r3, r3, #2
 8101fd8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8101fdc:	4b2b      	ldr	r3, [pc, #172]	; (810208c <HAL_GPIO_Init+0x238>)
 8101fde:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101fe2:	f003 0302 	and.w	r3, r3, #2
 8101fe6:	60fb      	str	r3, [r7, #12]
 8101fe8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8101fea:	4a29      	ldr	r2, [pc, #164]	; (8102090 <HAL_GPIO_Init+0x23c>)
 8101fec:	69fb      	ldr	r3, [r7, #28]
 8101fee:	089b      	lsrs	r3, r3, #2
 8101ff0:	3302      	adds	r3, #2
 8101ff2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8101ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8101ff8:	69fb      	ldr	r3, [r7, #28]
 8101ffa:	f003 0303 	and.w	r3, r3, #3
 8101ffe:	009b      	lsls	r3, r3, #2
 8102000:	220f      	movs	r2, #15
 8102002:	fa02 f303 	lsl.w	r3, r2, r3
 8102006:	43db      	mvns	r3, r3
 8102008:	69ba      	ldr	r2, [r7, #24]
 810200a:	4013      	ands	r3, r2
 810200c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 810200e:	687b      	ldr	r3, [r7, #4]
 8102010:	4a20      	ldr	r2, [pc, #128]	; (8102094 <HAL_GPIO_Init+0x240>)
 8102012:	4293      	cmp	r3, r2
 8102014:	d052      	beq.n	81020bc <HAL_GPIO_Init+0x268>
 8102016:	687b      	ldr	r3, [r7, #4]
 8102018:	4a1f      	ldr	r2, [pc, #124]	; (8102098 <HAL_GPIO_Init+0x244>)
 810201a:	4293      	cmp	r3, r2
 810201c:	d031      	beq.n	8102082 <HAL_GPIO_Init+0x22e>
 810201e:	687b      	ldr	r3, [r7, #4]
 8102020:	4a1e      	ldr	r2, [pc, #120]	; (810209c <HAL_GPIO_Init+0x248>)
 8102022:	4293      	cmp	r3, r2
 8102024:	d02b      	beq.n	810207e <HAL_GPIO_Init+0x22a>
 8102026:	687b      	ldr	r3, [r7, #4]
 8102028:	4a1d      	ldr	r2, [pc, #116]	; (81020a0 <HAL_GPIO_Init+0x24c>)
 810202a:	4293      	cmp	r3, r2
 810202c:	d025      	beq.n	810207a <HAL_GPIO_Init+0x226>
 810202e:	687b      	ldr	r3, [r7, #4]
 8102030:	4a1c      	ldr	r2, [pc, #112]	; (81020a4 <HAL_GPIO_Init+0x250>)
 8102032:	4293      	cmp	r3, r2
 8102034:	d01f      	beq.n	8102076 <HAL_GPIO_Init+0x222>
 8102036:	687b      	ldr	r3, [r7, #4]
 8102038:	4a1b      	ldr	r2, [pc, #108]	; (81020a8 <HAL_GPIO_Init+0x254>)
 810203a:	4293      	cmp	r3, r2
 810203c:	d019      	beq.n	8102072 <HAL_GPIO_Init+0x21e>
 810203e:	687b      	ldr	r3, [r7, #4]
 8102040:	4a1a      	ldr	r2, [pc, #104]	; (81020ac <HAL_GPIO_Init+0x258>)
 8102042:	4293      	cmp	r3, r2
 8102044:	d013      	beq.n	810206e <HAL_GPIO_Init+0x21a>
 8102046:	687b      	ldr	r3, [r7, #4]
 8102048:	4a19      	ldr	r2, [pc, #100]	; (81020b0 <HAL_GPIO_Init+0x25c>)
 810204a:	4293      	cmp	r3, r2
 810204c:	d00d      	beq.n	810206a <HAL_GPIO_Init+0x216>
 810204e:	687b      	ldr	r3, [r7, #4]
 8102050:	4a18      	ldr	r2, [pc, #96]	; (81020b4 <HAL_GPIO_Init+0x260>)
 8102052:	4293      	cmp	r3, r2
 8102054:	d007      	beq.n	8102066 <HAL_GPIO_Init+0x212>
 8102056:	687b      	ldr	r3, [r7, #4]
 8102058:	4a17      	ldr	r2, [pc, #92]	; (81020b8 <HAL_GPIO_Init+0x264>)
 810205a:	4293      	cmp	r3, r2
 810205c:	d101      	bne.n	8102062 <HAL_GPIO_Init+0x20e>
 810205e:	2309      	movs	r3, #9
 8102060:	e02d      	b.n	81020be <HAL_GPIO_Init+0x26a>
 8102062:	230a      	movs	r3, #10
 8102064:	e02b      	b.n	81020be <HAL_GPIO_Init+0x26a>
 8102066:	2308      	movs	r3, #8
 8102068:	e029      	b.n	81020be <HAL_GPIO_Init+0x26a>
 810206a:	2307      	movs	r3, #7
 810206c:	e027      	b.n	81020be <HAL_GPIO_Init+0x26a>
 810206e:	2306      	movs	r3, #6
 8102070:	e025      	b.n	81020be <HAL_GPIO_Init+0x26a>
 8102072:	2305      	movs	r3, #5
 8102074:	e023      	b.n	81020be <HAL_GPIO_Init+0x26a>
 8102076:	2304      	movs	r3, #4
 8102078:	e021      	b.n	81020be <HAL_GPIO_Init+0x26a>
 810207a:	2303      	movs	r3, #3
 810207c:	e01f      	b.n	81020be <HAL_GPIO_Init+0x26a>
 810207e:	2302      	movs	r3, #2
 8102080:	e01d      	b.n	81020be <HAL_GPIO_Init+0x26a>
 8102082:	2301      	movs	r3, #1
 8102084:	e01b      	b.n	81020be <HAL_GPIO_Init+0x26a>
 8102086:	bf00      	nop
 8102088:	580000c0 	.word	0x580000c0
 810208c:	58024400 	.word	0x58024400
 8102090:	58000400 	.word	0x58000400
 8102094:	58020000 	.word	0x58020000
 8102098:	58020400 	.word	0x58020400
 810209c:	58020800 	.word	0x58020800
 81020a0:	58020c00 	.word	0x58020c00
 81020a4:	58021000 	.word	0x58021000
 81020a8:	58021400 	.word	0x58021400
 81020ac:	58021800 	.word	0x58021800
 81020b0:	58021c00 	.word	0x58021c00
 81020b4:	58022000 	.word	0x58022000
 81020b8:	58022400 	.word	0x58022400
 81020bc:	2300      	movs	r3, #0
 81020be:	69fa      	ldr	r2, [r7, #28]
 81020c0:	f002 0203 	and.w	r2, r2, #3
 81020c4:	0092      	lsls	r2, r2, #2
 81020c6:	4093      	lsls	r3, r2
 81020c8:	69ba      	ldr	r2, [r7, #24]
 81020ca:	4313      	orrs	r3, r2
 81020cc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 81020ce:	4938      	ldr	r1, [pc, #224]	; (81021b0 <HAL_GPIO_Init+0x35c>)
 81020d0:	69fb      	ldr	r3, [r7, #28]
 81020d2:	089b      	lsrs	r3, r3, #2
 81020d4:	3302      	adds	r3, #2
 81020d6:	69ba      	ldr	r2, [r7, #24]
 81020d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 81020dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 81020e0:	681b      	ldr	r3, [r3, #0]
 81020e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81020e4:	693b      	ldr	r3, [r7, #16]
 81020e6:	43db      	mvns	r3, r3
 81020e8:	69ba      	ldr	r2, [r7, #24]
 81020ea:	4013      	ands	r3, r2
 81020ec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 81020ee:	683b      	ldr	r3, [r7, #0]
 81020f0:	685b      	ldr	r3, [r3, #4]
 81020f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 81020f6:	2b00      	cmp	r3, #0
 81020f8:	d003      	beq.n	8102102 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 81020fa:	69ba      	ldr	r2, [r7, #24]
 81020fc:	693b      	ldr	r3, [r7, #16]
 81020fe:	4313      	orrs	r3, r2
 8102100:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8102102:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8102106:	69bb      	ldr	r3, [r7, #24]
 8102108:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 810210a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 810210e:	685b      	ldr	r3, [r3, #4]
 8102110:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102112:	693b      	ldr	r3, [r7, #16]
 8102114:	43db      	mvns	r3, r3
 8102116:	69ba      	ldr	r2, [r7, #24]
 8102118:	4013      	ands	r3, r2
 810211a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 810211c:	683b      	ldr	r3, [r7, #0]
 810211e:	685b      	ldr	r3, [r3, #4]
 8102120:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8102124:	2b00      	cmp	r3, #0
 8102126:	d003      	beq.n	8102130 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8102128:	69ba      	ldr	r2, [r7, #24]
 810212a:	693b      	ldr	r3, [r7, #16]
 810212c:	4313      	orrs	r3, r2
 810212e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8102130:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8102134:	69bb      	ldr	r3, [r7, #24]
 8102136:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8102138:	697b      	ldr	r3, [r7, #20]
 810213a:	685b      	ldr	r3, [r3, #4]
 810213c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810213e:	693b      	ldr	r3, [r7, #16]
 8102140:	43db      	mvns	r3, r3
 8102142:	69ba      	ldr	r2, [r7, #24]
 8102144:	4013      	ands	r3, r2
 8102146:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8102148:	683b      	ldr	r3, [r7, #0]
 810214a:	685b      	ldr	r3, [r3, #4]
 810214c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8102150:	2b00      	cmp	r3, #0
 8102152:	d003      	beq.n	810215c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8102154:	69ba      	ldr	r2, [r7, #24]
 8102156:	693b      	ldr	r3, [r7, #16]
 8102158:	4313      	orrs	r3, r2
 810215a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 810215c:	697b      	ldr	r3, [r7, #20]
 810215e:	69ba      	ldr	r2, [r7, #24]
 8102160:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8102162:	697b      	ldr	r3, [r7, #20]
 8102164:	681b      	ldr	r3, [r3, #0]
 8102166:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102168:	693b      	ldr	r3, [r7, #16]
 810216a:	43db      	mvns	r3, r3
 810216c:	69ba      	ldr	r2, [r7, #24]
 810216e:	4013      	ands	r3, r2
 8102170:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8102172:	683b      	ldr	r3, [r7, #0]
 8102174:	685b      	ldr	r3, [r3, #4]
 8102176:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 810217a:	2b00      	cmp	r3, #0
 810217c:	d003      	beq.n	8102186 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 810217e:	69ba      	ldr	r2, [r7, #24]
 8102180:	693b      	ldr	r3, [r7, #16]
 8102182:	4313      	orrs	r3, r2
 8102184:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8102186:	697b      	ldr	r3, [r7, #20]
 8102188:	69ba      	ldr	r2, [r7, #24]
 810218a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 810218c:	69fb      	ldr	r3, [r7, #28]
 810218e:	3301      	adds	r3, #1
 8102190:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8102192:	683b      	ldr	r3, [r7, #0]
 8102194:	681a      	ldr	r2, [r3, #0]
 8102196:	69fb      	ldr	r3, [r7, #28]
 8102198:	fa22 f303 	lsr.w	r3, r2, r3
 810219c:	2b00      	cmp	r3, #0
 810219e:	f47f ae63 	bne.w	8101e68 <HAL_GPIO_Init+0x14>
  }
}
 81021a2:	bf00      	nop
 81021a4:	bf00      	nop
 81021a6:	3724      	adds	r7, #36	; 0x24
 81021a8:	46bd      	mov	sp, r7
 81021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81021ae:	4770      	bx	lr
 81021b0:	58000400 	.word	0x58000400

081021b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 81021b4:	b480      	push	{r7}
 81021b6:	b085      	sub	sp, #20
 81021b8:	af00      	add	r7, sp, #0
 81021ba:	6078      	str	r0, [r7, #4]
 81021bc:	460b      	mov	r3, r1
 81021be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 81021c0:	687b      	ldr	r3, [r7, #4]
 81021c2:	691a      	ldr	r2, [r3, #16]
 81021c4:	887b      	ldrh	r3, [r7, #2]
 81021c6:	4013      	ands	r3, r2
 81021c8:	2b00      	cmp	r3, #0
 81021ca:	d002      	beq.n	81021d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 81021cc:	2301      	movs	r3, #1
 81021ce:	73fb      	strb	r3, [r7, #15]
 81021d0:	e001      	b.n	81021d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 81021d2:	2300      	movs	r3, #0
 81021d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 81021d6:	7bfb      	ldrb	r3, [r7, #15]
}
 81021d8:	4618      	mov	r0, r3
 81021da:	3714      	adds	r7, #20
 81021dc:	46bd      	mov	sp, r7
 81021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 81021e2:	4770      	bx	lr

081021e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 81021e4:	b480      	push	{r7}
 81021e6:	b083      	sub	sp, #12
 81021e8:	af00      	add	r7, sp, #0
 81021ea:	6078      	str	r0, [r7, #4]
 81021ec:	460b      	mov	r3, r1
 81021ee:	807b      	strh	r3, [r7, #2]
 81021f0:	4613      	mov	r3, r2
 81021f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 81021f4:	787b      	ldrb	r3, [r7, #1]
 81021f6:	2b00      	cmp	r3, #0
 81021f8:	d003      	beq.n	8102202 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 81021fa:	887a      	ldrh	r2, [r7, #2]
 81021fc:	687b      	ldr	r3, [r7, #4]
 81021fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8102200:	e003      	b.n	810220a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8102202:	887b      	ldrh	r3, [r7, #2]
 8102204:	041a      	lsls	r2, r3, #16
 8102206:	687b      	ldr	r3, [r7, #4]
 8102208:	619a      	str	r2, [r3, #24]
}
 810220a:	bf00      	nop
 810220c:	370c      	adds	r7, #12
 810220e:	46bd      	mov	sp, r7
 8102210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102214:	4770      	bx	lr

08102216 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8102216:	b580      	push	{r7, lr}
 8102218:	b082      	sub	sp, #8
 810221a:	af00      	add	r7, sp, #0
 810221c:	4603      	mov	r3, r0
 810221e:	80fb      	strh	r3, [r7, #6]
#if defined(DUAL_CORE) && defined(CORE_CM4)
  if (__HAL_GPIO_EXTID2_GET_IT(GPIO_Pin) != 0x00U)
 8102220:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8102224:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8102228:	88fb      	ldrh	r3, [r7, #6]
 810222a:	4013      	ands	r3, r2
 810222c:	2b00      	cmp	r3, #0
 810222e:	d008      	beq.n	8102242 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
 8102230:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8102234:	88fb      	ldrh	r3, [r7, #6]
 8102236:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 810223a:	88fb      	ldrh	r3, [r7, #6]
 810223c:	4618      	mov	r0, r3
 810223e:	f7ff f98d 	bl	810155c <HAL_GPIO_EXTI_Callback>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#endif
}
 8102242:	bf00      	nop
 8102244:	3708      	adds	r7, #8
 8102246:	46bd      	mov	sp, r7
 8102248:	bd80      	pop	{r7, pc}
	...

0810224c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 810224c:	b480      	push	{r7}
 810224e:	b083      	sub	sp, #12
 8102250:	af00      	add	r7, sp, #0
 8102252:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8102254:	4a08      	ldr	r2, [pc, #32]	; (8102278 <HAL_HSEM_FastTake+0x2c>)
 8102256:	687b      	ldr	r3, [r7, #4]
 8102258:	3320      	adds	r3, #32
 810225a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 810225e:	4a07      	ldr	r2, [pc, #28]	; (810227c <HAL_HSEM_FastTake+0x30>)
 8102260:	4293      	cmp	r3, r2
 8102262:	d101      	bne.n	8102268 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8102264:	2300      	movs	r3, #0
 8102266:	e000      	b.n	810226a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8102268:	2301      	movs	r3, #1
}
 810226a:	4618      	mov	r0, r3
 810226c:	370c      	adds	r7, #12
 810226e:	46bd      	mov	sp, r7
 8102270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102274:	4770      	bx	lr
 8102276:	bf00      	nop
 8102278:	58026400 	.word	0x58026400
 810227c:	80000100 	.word	0x80000100

08102280 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8102280:	b480      	push	{r7}
 8102282:	b083      	sub	sp, #12
 8102284:	af00      	add	r7, sp, #0
 8102286:	6078      	str	r0, [r7, #4]
 8102288:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 810228a:	4906      	ldr	r1, [pc, #24]	; (81022a4 <HAL_HSEM_Release+0x24>)
 810228c:	683b      	ldr	r3, [r7, #0]
 810228e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8102292:	687b      	ldr	r3, [r7, #4]
 8102294:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8102298:	bf00      	nop
 810229a:	370c      	adds	r7, #12
 810229c:	46bd      	mov	sp, r7
 810229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 81022a2:	4770      	bx	lr
 81022a4:	58026400 	.word	0x58026400

081022a8 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 81022a8:	b480      	push	{r7}
 81022aa:	b083      	sub	sp, #12
 81022ac:	af00      	add	r7, sp, #0
 81022ae:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 81022b0:	4b05      	ldr	r3, [pc, #20]	; (81022c8 <HAL_HSEM_ActivateNotification+0x20>)
 81022b2:	681a      	ldr	r2, [r3, #0]
 81022b4:	4904      	ldr	r1, [pc, #16]	; (81022c8 <HAL_HSEM_ActivateNotification+0x20>)
 81022b6:	687b      	ldr	r3, [r7, #4]
 81022b8:	4313      	orrs	r3, r2
 81022ba:	600b      	str	r3, [r1, #0]
#endif
}
 81022bc:	bf00      	nop
 81022be:	370c      	adds	r7, #12
 81022c0:	46bd      	mov	sp, r7
 81022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81022c6:	4770      	bx	lr
 81022c8:	58026510 	.word	0x58026510

081022cc <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 81022cc:	b580      	push	{r7, lr}
 81022ce:	b082      	sub	sp, #8
 81022d0:	af00      	add	r7, sp, #0
    /*Clear Flags*/
    HSEM->C2ICR = ((uint32_t)statusreg);
  }
#else
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 81022d2:	4b0a      	ldr	r3, [pc, #40]	; (81022fc <HAL_HSEM_IRQHandler+0x30>)
 81022d4:	68db      	ldr	r3, [r3, #12]
 81022d6:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 81022d8:	4b08      	ldr	r3, [pc, #32]	; (81022fc <HAL_HSEM_IRQHandler+0x30>)
 81022da:	681a      	ldr	r2, [r3, #0]
 81022dc:	687b      	ldr	r3, [r7, #4]
 81022de:	43db      	mvns	r3, r3
 81022e0:	4906      	ldr	r1, [pc, #24]	; (81022fc <HAL_HSEM_IRQHandler+0x30>)
 81022e2:	4013      	ands	r3, r2
 81022e4:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 81022e6:	4a05      	ldr	r2, [pc, #20]	; (81022fc <HAL_HSEM_IRQHandler+0x30>)
 81022e8:	687b      	ldr	r3, [r7, #4]
 81022ea:	6053      	str	r3, [r2, #4]

#endif
  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 81022ec:	6878      	ldr	r0, [r7, #4]
 81022ee:	f7fe ffdf 	bl	81012b0 <HAL_HSEM_FreeCallback>
}
 81022f2:	bf00      	nop
 81022f4:	3708      	adds	r7, #8
 81022f6:	46bd      	mov	sp, r7
 81022f8:	bd80      	pop	{r7, pc}
 81022fa:	bf00      	nop
 81022fc:	58026510 	.word	0x58026510

08102300 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8102300:	b580      	push	{r7, lr}
 8102302:	b082      	sub	sp, #8
 8102304:	af00      	add	r7, sp, #0
 8102306:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8102308:	687b      	ldr	r3, [r7, #4]
 810230a:	2b00      	cmp	r3, #0
 810230c:	d101      	bne.n	8102312 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 810230e:	2301      	movs	r3, #1
 8102310:	e081      	b.n	8102416 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8102312:	687b      	ldr	r3, [r7, #4]
 8102314:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8102318:	b2db      	uxtb	r3, r3
 810231a:	2b00      	cmp	r3, #0
 810231c:	d106      	bne.n	810232c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 810231e:	687b      	ldr	r3, [r7, #4]
 8102320:	2200      	movs	r2, #0
 8102322:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8102326:	6878      	ldr	r0, [r7, #4]
 8102328:	f7fe fde6 	bl	8100ef8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 810232c:	687b      	ldr	r3, [r7, #4]
 810232e:	2224      	movs	r2, #36	; 0x24
 8102330:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8102334:	687b      	ldr	r3, [r7, #4]
 8102336:	681b      	ldr	r3, [r3, #0]
 8102338:	681a      	ldr	r2, [r3, #0]
 810233a:	687b      	ldr	r3, [r7, #4]
 810233c:	681b      	ldr	r3, [r3, #0]
 810233e:	f022 0201 	bic.w	r2, r2, #1
 8102342:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8102344:	687b      	ldr	r3, [r7, #4]
 8102346:	685a      	ldr	r2, [r3, #4]
 8102348:	687b      	ldr	r3, [r7, #4]
 810234a:	681b      	ldr	r3, [r3, #0]
 810234c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8102350:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8102352:	687b      	ldr	r3, [r7, #4]
 8102354:	681b      	ldr	r3, [r3, #0]
 8102356:	689a      	ldr	r2, [r3, #8]
 8102358:	687b      	ldr	r3, [r7, #4]
 810235a:	681b      	ldr	r3, [r3, #0]
 810235c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8102360:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8102362:	687b      	ldr	r3, [r7, #4]
 8102364:	68db      	ldr	r3, [r3, #12]
 8102366:	2b01      	cmp	r3, #1
 8102368:	d107      	bne.n	810237a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 810236a:	687b      	ldr	r3, [r7, #4]
 810236c:	689a      	ldr	r2, [r3, #8]
 810236e:	687b      	ldr	r3, [r7, #4]
 8102370:	681b      	ldr	r3, [r3, #0]
 8102372:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8102376:	609a      	str	r2, [r3, #8]
 8102378:	e006      	b.n	8102388 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 810237a:	687b      	ldr	r3, [r7, #4]
 810237c:	689a      	ldr	r2, [r3, #8]
 810237e:	687b      	ldr	r3, [r7, #4]
 8102380:	681b      	ldr	r3, [r3, #0]
 8102382:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8102386:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8102388:	687b      	ldr	r3, [r7, #4]
 810238a:	68db      	ldr	r3, [r3, #12]
 810238c:	2b02      	cmp	r3, #2
 810238e:	d104      	bne.n	810239a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8102390:	687b      	ldr	r3, [r7, #4]
 8102392:	681b      	ldr	r3, [r3, #0]
 8102394:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8102398:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 810239a:	687b      	ldr	r3, [r7, #4]
 810239c:	681b      	ldr	r3, [r3, #0]
 810239e:	685b      	ldr	r3, [r3, #4]
 81023a0:	687a      	ldr	r2, [r7, #4]
 81023a2:	6812      	ldr	r2, [r2, #0]
 81023a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 81023a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 81023ac:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 81023ae:	687b      	ldr	r3, [r7, #4]
 81023b0:	681b      	ldr	r3, [r3, #0]
 81023b2:	68da      	ldr	r2, [r3, #12]
 81023b4:	687b      	ldr	r3, [r7, #4]
 81023b6:	681b      	ldr	r3, [r3, #0]
 81023b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 81023bc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 81023be:	687b      	ldr	r3, [r7, #4]
 81023c0:	691a      	ldr	r2, [r3, #16]
 81023c2:	687b      	ldr	r3, [r7, #4]
 81023c4:	695b      	ldr	r3, [r3, #20]
 81023c6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 81023ca:	687b      	ldr	r3, [r7, #4]
 81023cc:	699b      	ldr	r3, [r3, #24]
 81023ce:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 81023d0:	687b      	ldr	r3, [r7, #4]
 81023d2:	681b      	ldr	r3, [r3, #0]
 81023d4:	430a      	orrs	r2, r1
 81023d6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 81023d8:	687b      	ldr	r3, [r7, #4]
 81023da:	69d9      	ldr	r1, [r3, #28]
 81023dc:	687b      	ldr	r3, [r7, #4]
 81023de:	6a1a      	ldr	r2, [r3, #32]
 81023e0:	687b      	ldr	r3, [r7, #4]
 81023e2:	681b      	ldr	r3, [r3, #0]
 81023e4:	430a      	orrs	r2, r1
 81023e6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 81023e8:	687b      	ldr	r3, [r7, #4]
 81023ea:	681b      	ldr	r3, [r3, #0]
 81023ec:	681a      	ldr	r2, [r3, #0]
 81023ee:	687b      	ldr	r3, [r7, #4]
 81023f0:	681b      	ldr	r3, [r3, #0]
 81023f2:	f042 0201 	orr.w	r2, r2, #1
 81023f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 81023f8:	687b      	ldr	r3, [r7, #4]
 81023fa:	2200      	movs	r2, #0
 81023fc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 81023fe:	687b      	ldr	r3, [r7, #4]
 8102400:	2220      	movs	r2, #32
 8102402:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8102406:	687b      	ldr	r3, [r7, #4]
 8102408:	2200      	movs	r2, #0
 810240a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 810240c:	687b      	ldr	r3, [r7, #4]
 810240e:	2200      	movs	r2, #0
 8102410:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8102414:	2300      	movs	r3, #0
}
 8102416:	4618      	mov	r0, r3
 8102418:	3708      	adds	r7, #8
 810241a:	46bd      	mov	sp, r7
 810241c:	bd80      	pop	{r7, pc}
	...

08102420 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8102420:	b580      	push	{r7, lr}
 8102422:	b088      	sub	sp, #32
 8102424:	af02      	add	r7, sp, #8
 8102426:	60f8      	str	r0, [r7, #12]
 8102428:	4608      	mov	r0, r1
 810242a:	4611      	mov	r1, r2
 810242c:	461a      	mov	r2, r3
 810242e:	4603      	mov	r3, r0
 8102430:	817b      	strh	r3, [r7, #10]
 8102432:	460b      	mov	r3, r1
 8102434:	813b      	strh	r3, [r7, #8]
 8102436:	4613      	mov	r3, r2
 8102438:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 810243a:	68fb      	ldr	r3, [r7, #12]
 810243c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8102440:	b2db      	uxtb	r3, r3
 8102442:	2b20      	cmp	r3, #32
 8102444:	f040 80f9 	bne.w	810263a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8102448:	6a3b      	ldr	r3, [r7, #32]
 810244a:	2b00      	cmp	r3, #0
 810244c:	d002      	beq.n	8102454 <HAL_I2C_Mem_Write+0x34>
 810244e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8102450:	2b00      	cmp	r3, #0
 8102452:	d105      	bne.n	8102460 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8102454:	68fb      	ldr	r3, [r7, #12]
 8102456:	f44f 7200 	mov.w	r2, #512	; 0x200
 810245a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 810245c:	2301      	movs	r3, #1
 810245e:	e0ed      	b.n	810263c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8102460:	68fb      	ldr	r3, [r7, #12]
 8102462:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8102466:	2b01      	cmp	r3, #1
 8102468:	d101      	bne.n	810246e <HAL_I2C_Mem_Write+0x4e>
 810246a:	2302      	movs	r3, #2
 810246c:	e0e6      	b.n	810263c <HAL_I2C_Mem_Write+0x21c>
 810246e:	68fb      	ldr	r3, [r7, #12]
 8102470:	2201      	movs	r2, #1
 8102472:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8102476:	f7ff fb99 	bl	8101bac <HAL_GetTick>
 810247a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 810247c:	697b      	ldr	r3, [r7, #20]
 810247e:	9300      	str	r3, [sp, #0]
 8102480:	2319      	movs	r3, #25
 8102482:	2201      	movs	r2, #1
 8102484:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8102488:	68f8      	ldr	r0, [r7, #12]
 810248a:	f000 fbcb 	bl	8102c24 <I2C_WaitOnFlagUntilTimeout>
 810248e:	4603      	mov	r3, r0
 8102490:	2b00      	cmp	r3, #0
 8102492:	d001      	beq.n	8102498 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8102494:	2301      	movs	r3, #1
 8102496:	e0d1      	b.n	810263c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8102498:	68fb      	ldr	r3, [r7, #12]
 810249a:	2221      	movs	r2, #33	; 0x21
 810249c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 81024a0:	68fb      	ldr	r3, [r7, #12]
 81024a2:	2240      	movs	r2, #64	; 0x40
 81024a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 81024a8:	68fb      	ldr	r3, [r7, #12]
 81024aa:	2200      	movs	r2, #0
 81024ac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 81024ae:	68fb      	ldr	r3, [r7, #12]
 81024b0:	6a3a      	ldr	r2, [r7, #32]
 81024b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 81024b4:	68fb      	ldr	r3, [r7, #12]
 81024b6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 81024b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 81024ba:	68fb      	ldr	r3, [r7, #12]
 81024bc:	2200      	movs	r2, #0
 81024be:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 81024c0:	88f8      	ldrh	r0, [r7, #6]
 81024c2:	893a      	ldrh	r2, [r7, #8]
 81024c4:	8979      	ldrh	r1, [r7, #10]
 81024c6:	697b      	ldr	r3, [r7, #20]
 81024c8:	9301      	str	r3, [sp, #4]
 81024ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81024cc:	9300      	str	r3, [sp, #0]
 81024ce:	4603      	mov	r3, r0
 81024d0:	68f8      	ldr	r0, [r7, #12]
 81024d2:	f000 fadb 	bl	8102a8c <I2C_RequestMemoryWrite>
 81024d6:	4603      	mov	r3, r0
 81024d8:	2b00      	cmp	r3, #0
 81024da:	d005      	beq.n	81024e8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 81024dc:	68fb      	ldr	r3, [r7, #12]
 81024de:	2200      	movs	r2, #0
 81024e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 81024e4:	2301      	movs	r3, #1
 81024e6:	e0a9      	b.n	810263c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 81024e8:	68fb      	ldr	r3, [r7, #12]
 81024ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81024ec:	b29b      	uxth	r3, r3
 81024ee:	2bff      	cmp	r3, #255	; 0xff
 81024f0:	d90e      	bls.n	8102510 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 81024f2:	68fb      	ldr	r3, [r7, #12]
 81024f4:	22ff      	movs	r2, #255	; 0xff
 81024f6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 81024f8:	68fb      	ldr	r3, [r7, #12]
 81024fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81024fc:	b2da      	uxtb	r2, r3
 81024fe:	8979      	ldrh	r1, [r7, #10]
 8102500:	2300      	movs	r3, #0
 8102502:	9300      	str	r3, [sp, #0]
 8102504:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8102508:	68f8      	ldr	r0, [r7, #12]
 810250a:	f000 fd33 	bl	8102f74 <I2C_TransferConfig>
 810250e:	e00f      	b.n	8102530 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8102510:	68fb      	ldr	r3, [r7, #12]
 8102512:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102514:	b29a      	uxth	r2, r3
 8102516:	68fb      	ldr	r3, [r7, #12]
 8102518:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 810251a:	68fb      	ldr	r3, [r7, #12]
 810251c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810251e:	b2da      	uxtb	r2, r3
 8102520:	8979      	ldrh	r1, [r7, #10]
 8102522:	2300      	movs	r3, #0
 8102524:	9300      	str	r3, [sp, #0]
 8102526:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 810252a:	68f8      	ldr	r0, [r7, #12]
 810252c:	f000 fd22 	bl	8102f74 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8102530:	697a      	ldr	r2, [r7, #20]
 8102532:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8102534:	68f8      	ldr	r0, [r7, #12]
 8102536:	f000 fbb5 	bl	8102ca4 <I2C_WaitOnTXISFlagUntilTimeout>
 810253a:	4603      	mov	r3, r0
 810253c:	2b00      	cmp	r3, #0
 810253e:	d001      	beq.n	8102544 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8102540:	2301      	movs	r3, #1
 8102542:	e07b      	b.n	810263c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8102544:	68fb      	ldr	r3, [r7, #12]
 8102546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102548:	781a      	ldrb	r2, [r3, #0]
 810254a:	68fb      	ldr	r3, [r7, #12]
 810254c:	681b      	ldr	r3, [r3, #0]
 810254e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8102550:	68fb      	ldr	r3, [r7, #12]
 8102552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102554:	1c5a      	adds	r2, r3, #1
 8102556:	68fb      	ldr	r3, [r7, #12]
 8102558:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 810255a:	68fb      	ldr	r3, [r7, #12]
 810255c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810255e:	b29b      	uxth	r3, r3
 8102560:	3b01      	subs	r3, #1
 8102562:	b29a      	uxth	r2, r3
 8102564:	68fb      	ldr	r3, [r7, #12]
 8102566:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8102568:	68fb      	ldr	r3, [r7, #12]
 810256a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810256c:	3b01      	subs	r3, #1
 810256e:	b29a      	uxth	r2, r3
 8102570:	68fb      	ldr	r3, [r7, #12]
 8102572:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8102574:	68fb      	ldr	r3, [r7, #12]
 8102576:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102578:	b29b      	uxth	r3, r3
 810257a:	2b00      	cmp	r3, #0
 810257c:	d034      	beq.n	81025e8 <HAL_I2C_Mem_Write+0x1c8>
 810257e:	68fb      	ldr	r3, [r7, #12]
 8102580:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102582:	2b00      	cmp	r3, #0
 8102584:	d130      	bne.n	81025e8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8102586:	697b      	ldr	r3, [r7, #20]
 8102588:	9300      	str	r3, [sp, #0]
 810258a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810258c:	2200      	movs	r2, #0
 810258e:	2180      	movs	r1, #128	; 0x80
 8102590:	68f8      	ldr	r0, [r7, #12]
 8102592:	f000 fb47 	bl	8102c24 <I2C_WaitOnFlagUntilTimeout>
 8102596:	4603      	mov	r3, r0
 8102598:	2b00      	cmp	r3, #0
 810259a:	d001      	beq.n	81025a0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 810259c:	2301      	movs	r3, #1
 810259e:	e04d      	b.n	810263c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 81025a0:	68fb      	ldr	r3, [r7, #12]
 81025a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81025a4:	b29b      	uxth	r3, r3
 81025a6:	2bff      	cmp	r3, #255	; 0xff
 81025a8:	d90e      	bls.n	81025c8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 81025aa:	68fb      	ldr	r3, [r7, #12]
 81025ac:	22ff      	movs	r2, #255	; 0xff
 81025ae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 81025b0:	68fb      	ldr	r3, [r7, #12]
 81025b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81025b4:	b2da      	uxtb	r2, r3
 81025b6:	8979      	ldrh	r1, [r7, #10]
 81025b8:	2300      	movs	r3, #0
 81025ba:	9300      	str	r3, [sp, #0]
 81025bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 81025c0:	68f8      	ldr	r0, [r7, #12]
 81025c2:	f000 fcd7 	bl	8102f74 <I2C_TransferConfig>
 81025c6:	e00f      	b.n	81025e8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 81025c8:	68fb      	ldr	r3, [r7, #12]
 81025ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81025cc:	b29a      	uxth	r2, r3
 81025ce:	68fb      	ldr	r3, [r7, #12]
 81025d0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 81025d2:	68fb      	ldr	r3, [r7, #12]
 81025d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81025d6:	b2da      	uxtb	r2, r3
 81025d8:	8979      	ldrh	r1, [r7, #10]
 81025da:	2300      	movs	r3, #0
 81025dc:	9300      	str	r3, [sp, #0]
 81025de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 81025e2:	68f8      	ldr	r0, [r7, #12]
 81025e4:	f000 fcc6 	bl	8102f74 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 81025e8:	68fb      	ldr	r3, [r7, #12]
 81025ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81025ec:	b29b      	uxth	r3, r3
 81025ee:	2b00      	cmp	r3, #0
 81025f0:	d19e      	bne.n	8102530 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 81025f2:	697a      	ldr	r2, [r7, #20]
 81025f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 81025f6:	68f8      	ldr	r0, [r7, #12]
 81025f8:	f000 fb94 	bl	8102d24 <I2C_WaitOnSTOPFlagUntilTimeout>
 81025fc:	4603      	mov	r3, r0
 81025fe:	2b00      	cmp	r3, #0
 8102600:	d001      	beq.n	8102606 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8102602:	2301      	movs	r3, #1
 8102604:	e01a      	b.n	810263c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8102606:	68fb      	ldr	r3, [r7, #12]
 8102608:	681b      	ldr	r3, [r3, #0]
 810260a:	2220      	movs	r2, #32
 810260c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 810260e:	68fb      	ldr	r3, [r7, #12]
 8102610:	681b      	ldr	r3, [r3, #0]
 8102612:	6859      	ldr	r1, [r3, #4]
 8102614:	68fb      	ldr	r3, [r7, #12]
 8102616:	681a      	ldr	r2, [r3, #0]
 8102618:	4b0a      	ldr	r3, [pc, #40]	; (8102644 <HAL_I2C_Mem_Write+0x224>)
 810261a:	400b      	ands	r3, r1
 810261c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 810261e:	68fb      	ldr	r3, [r7, #12]
 8102620:	2220      	movs	r2, #32
 8102622:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8102626:	68fb      	ldr	r3, [r7, #12]
 8102628:	2200      	movs	r2, #0
 810262a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 810262e:	68fb      	ldr	r3, [r7, #12]
 8102630:	2200      	movs	r2, #0
 8102632:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8102636:	2300      	movs	r3, #0
 8102638:	e000      	b.n	810263c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 810263a:	2302      	movs	r3, #2
  }
}
 810263c:	4618      	mov	r0, r3
 810263e:	3718      	adds	r7, #24
 8102640:	46bd      	mov	sp, r7
 8102642:	bd80      	pop	{r7, pc}
 8102644:	fe00e800 	.word	0xfe00e800

08102648 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8102648:	b580      	push	{r7, lr}
 810264a:	b088      	sub	sp, #32
 810264c:	af02      	add	r7, sp, #8
 810264e:	60f8      	str	r0, [r7, #12]
 8102650:	4608      	mov	r0, r1
 8102652:	4611      	mov	r1, r2
 8102654:	461a      	mov	r2, r3
 8102656:	4603      	mov	r3, r0
 8102658:	817b      	strh	r3, [r7, #10]
 810265a:	460b      	mov	r3, r1
 810265c:	813b      	strh	r3, [r7, #8]
 810265e:	4613      	mov	r3, r2
 8102660:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8102662:	68fb      	ldr	r3, [r7, #12]
 8102664:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8102668:	b2db      	uxtb	r3, r3
 810266a:	2b20      	cmp	r3, #32
 810266c:	f040 80fd 	bne.w	810286a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8102670:	6a3b      	ldr	r3, [r7, #32]
 8102672:	2b00      	cmp	r3, #0
 8102674:	d002      	beq.n	810267c <HAL_I2C_Mem_Read+0x34>
 8102676:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8102678:	2b00      	cmp	r3, #0
 810267a:	d105      	bne.n	8102688 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 810267c:	68fb      	ldr	r3, [r7, #12]
 810267e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8102682:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8102684:	2301      	movs	r3, #1
 8102686:	e0f1      	b.n	810286c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8102688:	68fb      	ldr	r3, [r7, #12]
 810268a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810268e:	2b01      	cmp	r3, #1
 8102690:	d101      	bne.n	8102696 <HAL_I2C_Mem_Read+0x4e>
 8102692:	2302      	movs	r3, #2
 8102694:	e0ea      	b.n	810286c <HAL_I2C_Mem_Read+0x224>
 8102696:	68fb      	ldr	r3, [r7, #12]
 8102698:	2201      	movs	r2, #1
 810269a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 810269e:	f7ff fa85 	bl	8101bac <HAL_GetTick>
 81026a2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 81026a4:	697b      	ldr	r3, [r7, #20]
 81026a6:	9300      	str	r3, [sp, #0]
 81026a8:	2319      	movs	r3, #25
 81026aa:	2201      	movs	r2, #1
 81026ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 81026b0:	68f8      	ldr	r0, [r7, #12]
 81026b2:	f000 fab7 	bl	8102c24 <I2C_WaitOnFlagUntilTimeout>
 81026b6:	4603      	mov	r3, r0
 81026b8:	2b00      	cmp	r3, #0
 81026ba:	d001      	beq.n	81026c0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 81026bc:	2301      	movs	r3, #1
 81026be:	e0d5      	b.n	810286c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 81026c0:	68fb      	ldr	r3, [r7, #12]
 81026c2:	2222      	movs	r2, #34	; 0x22
 81026c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 81026c8:	68fb      	ldr	r3, [r7, #12]
 81026ca:	2240      	movs	r2, #64	; 0x40
 81026cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 81026d0:	68fb      	ldr	r3, [r7, #12]
 81026d2:	2200      	movs	r2, #0
 81026d4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 81026d6:	68fb      	ldr	r3, [r7, #12]
 81026d8:	6a3a      	ldr	r2, [r7, #32]
 81026da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 81026dc:	68fb      	ldr	r3, [r7, #12]
 81026de:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 81026e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 81026e2:	68fb      	ldr	r3, [r7, #12]
 81026e4:	2200      	movs	r2, #0
 81026e6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 81026e8:	88f8      	ldrh	r0, [r7, #6]
 81026ea:	893a      	ldrh	r2, [r7, #8]
 81026ec:	8979      	ldrh	r1, [r7, #10]
 81026ee:	697b      	ldr	r3, [r7, #20]
 81026f0:	9301      	str	r3, [sp, #4]
 81026f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81026f4:	9300      	str	r3, [sp, #0]
 81026f6:	4603      	mov	r3, r0
 81026f8:	68f8      	ldr	r0, [r7, #12]
 81026fa:	f000 fa1b 	bl	8102b34 <I2C_RequestMemoryRead>
 81026fe:	4603      	mov	r3, r0
 8102700:	2b00      	cmp	r3, #0
 8102702:	d005      	beq.n	8102710 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8102704:	68fb      	ldr	r3, [r7, #12]
 8102706:	2200      	movs	r2, #0
 8102708:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 810270c:	2301      	movs	r3, #1
 810270e:	e0ad      	b.n	810286c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8102710:	68fb      	ldr	r3, [r7, #12]
 8102712:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102714:	b29b      	uxth	r3, r3
 8102716:	2bff      	cmp	r3, #255	; 0xff
 8102718:	d90e      	bls.n	8102738 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 810271a:	68fb      	ldr	r3, [r7, #12]
 810271c:	22ff      	movs	r2, #255	; 0xff
 810271e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8102720:	68fb      	ldr	r3, [r7, #12]
 8102722:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102724:	b2da      	uxtb	r2, r3
 8102726:	8979      	ldrh	r1, [r7, #10]
 8102728:	4b52      	ldr	r3, [pc, #328]	; (8102874 <HAL_I2C_Mem_Read+0x22c>)
 810272a:	9300      	str	r3, [sp, #0]
 810272c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8102730:	68f8      	ldr	r0, [r7, #12]
 8102732:	f000 fc1f 	bl	8102f74 <I2C_TransferConfig>
 8102736:	e00f      	b.n	8102758 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8102738:	68fb      	ldr	r3, [r7, #12]
 810273a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810273c:	b29a      	uxth	r2, r3
 810273e:	68fb      	ldr	r3, [r7, #12]
 8102740:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8102742:	68fb      	ldr	r3, [r7, #12]
 8102744:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102746:	b2da      	uxtb	r2, r3
 8102748:	8979      	ldrh	r1, [r7, #10]
 810274a:	4b4a      	ldr	r3, [pc, #296]	; (8102874 <HAL_I2C_Mem_Read+0x22c>)
 810274c:	9300      	str	r3, [sp, #0]
 810274e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8102752:	68f8      	ldr	r0, [r7, #12]
 8102754:	f000 fc0e 	bl	8102f74 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8102758:	697b      	ldr	r3, [r7, #20]
 810275a:	9300      	str	r3, [sp, #0]
 810275c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810275e:	2200      	movs	r2, #0
 8102760:	2104      	movs	r1, #4
 8102762:	68f8      	ldr	r0, [r7, #12]
 8102764:	f000 fa5e 	bl	8102c24 <I2C_WaitOnFlagUntilTimeout>
 8102768:	4603      	mov	r3, r0
 810276a:	2b00      	cmp	r3, #0
 810276c:	d001      	beq.n	8102772 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 810276e:	2301      	movs	r3, #1
 8102770:	e07c      	b.n	810286c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8102772:	68fb      	ldr	r3, [r7, #12]
 8102774:	681b      	ldr	r3, [r3, #0]
 8102776:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8102778:	68fb      	ldr	r3, [r7, #12]
 810277a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810277c:	b2d2      	uxtb	r2, r2
 810277e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8102780:	68fb      	ldr	r3, [r7, #12]
 8102782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102784:	1c5a      	adds	r2, r3, #1
 8102786:	68fb      	ldr	r3, [r7, #12]
 8102788:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 810278a:	68fb      	ldr	r3, [r7, #12]
 810278c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810278e:	3b01      	subs	r3, #1
 8102790:	b29a      	uxth	r2, r3
 8102792:	68fb      	ldr	r3, [r7, #12]
 8102794:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8102796:	68fb      	ldr	r3, [r7, #12]
 8102798:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810279a:	b29b      	uxth	r3, r3
 810279c:	3b01      	subs	r3, #1
 810279e:	b29a      	uxth	r2, r3
 81027a0:	68fb      	ldr	r3, [r7, #12]
 81027a2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 81027a4:	68fb      	ldr	r3, [r7, #12]
 81027a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81027a8:	b29b      	uxth	r3, r3
 81027aa:	2b00      	cmp	r3, #0
 81027ac:	d034      	beq.n	8102818 <HAL_I2C_Mem_Read+0x1d0>
 81027ae:	68fb      	ldr	r3, [r7, #12]
 81027b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81027b2:	2b00      	cmp	r3, #0
 81027b4:	d130      	bne.n	8102818 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 81027b6:	697b      	ldr	r3, [r7, #20]
 81027b8:	9300      	str	r3, [sp, #0]
 81027ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81027bc:	2200      	movs	r2, #0
 81027be:	2180      	movs	r1, #128	; 0x80
 81027c0:	68f8      	ldr	r0, [r7, #12]
 81027c2:	f000 fa2f 	bl	8102c24 <I2C_WaitOnFlagUntilTimeout>
 81027c6:	4603      	mov	r3, r0
 81027c8:	2b00      	cmp	r3, #0
 81027ca:	d001      	beq.n	81027d0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 81027cc:	2301      	movs	r3, #1
 81027ce:	e04d      	b.n	810286c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 81027d0:	68fb      	ldr	r3, [r7, #12]
 81027d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81027d4:	b29b      	uxth	r3, r3
 81027d6:	2bff      	cmp	r3, #255	; 0xff
 81027d8:	d90e      	bls.n	81027f8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 81027da:	68fb      	ldr	r3, [r7, #12]
 81027dc:	22ff      	movs	r2, #255	; 0xff
 81027de:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 81027e0:	68fb      	ldr	r3, [r7, #12]
 81027e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81027e4:	b2da      	uxtb	r2, r3
 81027e6:	8979      	ldrh	r1, [r7, #10]
 81027e8:	2300      	movs	r3, #0
 81027ea:	9300      	str	r3, [sp, #0]
 81027ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 81027f0:	68f8      	ldr	r0, [r7, #12]
 81027f2:	f000 fbbf 	bl	8102f74 <I2C_TransferConfig>
 81027f6:	e00f      	b.n	8102818 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 81027f8:	68fb      	ldr	r3, [r7, #12]
 81027fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81027fc:	b29a      	uxth	r2, r3
 81027fe:	68fb      	ldr	r3, [r7, #12]
 8102800:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8102802:	68fb      	ldr	r3, [r7, #12]
 8102804:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102806:	b2da      	uxtb	r2, r3
 8102808:	8979      	ldrh	r1, [r7, #10]
 810280a:	2300      	movs	r3, #0
 810280c:	9300      	str	r3, [sp, #0]
 810280e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8102812:	68f8      	ldr	r0, [r7, #12]
 8102814:	f000 fbae 	bl	8102f74 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8102818:	68fb      	ldr	r3, [r7, #12]
 810281a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810281c:	b29b      	uxth	r3, r3
 810281e:	2b00      	cmp	r3, #0
 8102820:	d19a      	bne.n	8102758 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8102822:	697a      	ldr	r2, [r7, #20]
 8102824:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8102826:	68f8      	ldr	r0, [r7, #12]
 8102828:	f000 fa7c 	bl	8102d24 <I2C_WaitOnSTOPFlagUntilTimeout>
 810282c:	4603      	mov	r3, r0
 810282e:	2b00      	cmp	r3, #0
 8102830:	d001      	beq.n	8102836 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8102832:	2301      	movs	r3, #1
 8102834:	e01a      	b.n	810286c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8102836:	68fb      	ldr	r3, [r7, #12]
 8102838:	681b      	ldr	r3, [r3, #0]
 810283a:	2220      	movs	r2, #32
 810283c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 810283e:	68fb      	ldr	r3, [r7, #12]
 8102840:	681b      	ldr	r3, [r3, #0]
 8102842:	6859      	ldr	r1, [r3, #4]
 8102844:	68fb      	ldr	r3, [r7, #12]
 8102846:	681a      	ldr	r2, [r3, #0]
 8102848:	4b0b      	ldr	r3, [pc, #44]	; (8102878 <HAL_I2C_Mem_Read+0x230>)
 810284a:	400b      	ands	r3, r1
 810284c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 810284e:	68fb      	ldr	r3, [r7, #12]
 8102850:	2220      	movs	r2, #32
 8102852:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8102856:	68fb      	ldr	r3, [r7, #12]
 8102858:	2200      	movs	r2, #0
 810285a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 810285e:	68fb      	ldr	r3, [r7, #12]
 8102860:	2200      	movs	r2, #0
 8102862:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8102866:	2300      	movs	r3, #0
 8102868:	e000      	b.n	810286c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 810286a:	2302      	movs	r3, #2
  }
}
 810286c:	4618      	mov	r0, r3
 810286e:	3718      	adds	r7, #24
 8102870:	46bd      	mov	sp, r7
 8102872:	bd80      	pop	{r7, pc}
 8102874:	80002400 	.word	0x80002400
 8102878:	fe00e800 	.word	0xfe00e800

0810287c <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 810287c:	b580      	push	{r7, lr}
 810287e:	b08a      	sub	sp, #40	; 0x28
 8102880:	af02      	add	r7, sp, #8
 8102882:	60f8      	str	r0, [r7, #12]
 8102884:	607a      	str	r2, [r7, #4]
 8102886:	603b      	str	r3, [r7, #0]
 8102888:	460b      	mov	r3, r1
 810288a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 810288c:	2300      	movs	r3, #0
 810288e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8102890:	68fb      	ldr	r3, [r7, #12]
 8102892:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8102896:	b2db      	uxtb	r3, r3
 8102898:	2b20      	cmp	r3, #32
 810289a:	f040 80f1 	bne.w	8102a80 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 810289e:	68fb      	ldr	r3, [r7, #12]
 81028a0:	681b      	ldr	r3, [r3, #0]
 81028a2:	699b      	ldr	r3, [r3, #24]
 81028a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 81028a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 81028ac:	d101      	bne.n	81028b2 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 81028ae:	2302      	movs	r3, #2
 81028b0:	e0e7      	b.n	8102a82 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 81028b2:	68fb      	ldr	r3, [r7, #12]
 81028b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 81028b8:	2b01      	cmp	r3, #1
 81028ba:	d101      	bne.n	81028c0 <HAL_I2C_IsDeviceReady+0x44>
 81028bc:	2302      	movs	r3, #2
 81028be:	e0e0      	b.n	8102a82 <HAL_I2C_IsDeviceReady+0x206>
 81028c0:	68fb      	ldr	r3, [r7, #12]
 81028c2:	2201      	movs	r2, #1
 81028c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 81028c8:	68fb      	ldr	r3, [r7, #12]
 81028ca:	2224      	movs	r2, #36	; 0x24
 81028cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 81028d0:	68fb      	ldr	r3, [r7, #12]
 81028d2:	2200      	movs	r2, #0
 81028d4:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 81028d6:	68fb      	ldr	r3, [r7, #12]
 81028d8:	68db      	ldr	r3, [r3, #12]
 81028da:	2b01      	cmp	r3, #1
 81028dc:	d107      	bne.n	81028ee <HAL_I2C_IsDeviceReady+0x72>
 81028de:	897b      	ldrh	r3, [r7, #10]
 81028e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 81028e4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 81028e8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 81028ec:	e004      	b.n	81028f8 <HAL_I2C_IsDeviceReady+0x7c>
 81028ee:	897b      	ldrh	r3, [r7, #10]
 81028f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 81028f4:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 81028f8:	68fa      	ldr	r2, [r7, #12]
 81028fa:	6812      	ldr	r2, [r2, #0]
 81028fc:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 81028fe:	f7ff f955 	bl	8101bac <HAL_GetTick>
 8102902:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8102904:	68fb      	ldr	r3, [r7, #12]
 8102906:	681b      	ldr	r3, [r3, #0]
 8102908:	699b      	ldr	r3, [r3, #24]
 810290a:	f003 0320 	and.w	r3, r3, #32
 810290e:	2b20      	cmp	r3, #32
 8102910:	bf0c      	ite	eq
 8102912:	2301      	moveq	r3, #1
 8102914:	2300      	movne	r3, #0
 8102916:	b2db      	uxtb	r3, r3
 8102918:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 810291a:	68fb      	ldr	r3, [r7, #12]
 810291c:	681b      	ldr	r3, [r3, #0]
 810291e:	699b      	ldr	r3, [r3, #24]
 8102920:	f003 0310 	and.w	r3, r3, #16
 8102924:	2b10      	cmp	r3, #16
 8102926:	bf0c      	ite	eq
 8102928:	2301      	moveq	r3, #1
 810292a:	2300      	movne	r3, #0
 810292c:	b2db      	uxtb	r3, r3
 810292e:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8102930:	e034      	b.n	810299c <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8102932:	683b      	ldr	r3, [r7, #0]
 8102934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102938:	d01a      	beq.n	8102970 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 810293a:	f7ff f937 	bl	8101bac <HAL_GetTick>
 810293e:	4602      	mov	r2, r0
 8102940:	69bb      	ldr	r3, [r7, #24]
 8102942:	1ad3      	subs	r3, r2, r3
 8102944:	683a      	ldr	r2, [r7, #0]
 8102946:	429a      	cmp	r2, r3
 8102948:	d302      	bcc.n	8102950 <HAL_I2C_IsDeviceReady+0xd4>
 810294a:	683b      	ldr	r3, [r7, #0]
 810294c:	2b00      	cmp	r3, #0
 810294e:	d10f      	bne.n	8102970 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8102950:	68fb      	ldr	r3, [r7, #12]
 8102952:	2220      	movs	r2, #32
 8102954:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8102958:	68fb      	ldr	r3, [r7, #12]
 810295a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810295c:	f043 0220 	orr.w	r2, r3, #32
 8102960:	68fb      	ldr	r3, [r7, #12]
 8102962:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8102964:	68fb      	ldr	r3, [r7, #12]
 8102966:	2200      	movs	r2, #0
 8102968:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 810296c:	2301      	movs	r3, #1
 810296e:	e088      	b.n	8102a82 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8102970:	68fb      	ldr	r3, [r7, #12]
 8102972:	681b      	ldr	r3, [r3, #0]
 8102974:	699b      	ldr	r3, [r3, #24]
 8102976:	f003 0320 	and.w	r3, r3, #32
 810297a:	2b20      	cmp	r3, #32
 810297c:	bf0c      	ite	eq
 810297e:	2301      	moveq	r3, #1
 8102980:	2300      	movne	r3, #0
 8102982:	b2db      	uxtb	r3, r3
 8102984:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8102986:	68fb      	ldr	r3, [r7, #12]
 8102988:	681b      	ldr	r3, [r3, #0]
 810298a:	699b      	ldr	r3, [r3, #24]
 810298c:	f003 0310 	and.w	r3, r3, #16
 8102990:	2b10      	cmp	r3, #16
 8102992:	bf0c      	ite	eq
 8102994:	2301      	moveq	r3, #1
 8102996:	2300      	movne	r3, #0
 8102998:	b2db      	uxtb	r3, r3
 810299a:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 810299c:	7ffb      	ldrb	r3, [r7, #31]
 810299e:	2b00      	cmp	r3, #0
 81029a0:	d102      	bne.n	81029a8 <HAL_I2C_IsDeviceReady+0x12c>
 81029a2:	7fbb      	ldrb	r3, [r7, #30]
 81029a4:	2b00      	cmp	r3, #0
 81029a6:	d0c4      	beq.n	8102932 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 81029a8:	68fb      	ldr	r3, [r7, #12]
 81029aa:	681b      	ldr	r3, [r3, #0]
 81029ac:	699b      	ldr	r3, [r3, #24]
 81029ae:	f003 0310 	and.w	r3, r3, #16
 81029b2:	2b10      	cmp	r3, #16
 81029b4:	d01a      	beq.n	81029ec <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 81029b6:	69bb      	ldr	r3, [r7, #24]
 81029b8:	9300      	str	r3, [sp, #0]
 81029ba:	683b      	ldr	r3, [r7, #0]
 81029bc:	2200      	movs	r2, #0
 81029be:	2120      	movs	r1, #32
 81029c0:	68f8      	ldr	r0, [r7, #12]
 81029c2:	f000 f92f 	bl	8102c24 <I2C_WaitOnFlagUntilTimeout>
 81029c6:	4603      	mov	r3, r0
 81029c8:	2b00      	cmp	r3, #0
 81029ca:	d001      	beq.n	81029d0 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 81029cc:	2301      	movs	r3, #1
 81029ce:	e058      	b.n	8102a82 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 81029d0:	68fb      	ldr	r3, [r7, #12]
 81029d2:	681b      	ldr	r3, [r3, #0]
 81029d4:	2220      	movs	r2, #32
 81029d6:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 81029d8:	68fb      	ldr	r3, [r7, #12]
 81029da:	2220      	movs	r2, #32
 81029dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 81029e0:	68fb      	ldr	r3, [r7, #12]
 81029e2:	2200      	movs	r2, #0
 81029e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 81029e8:	2300      	movs	r3, #0
 81029ea:	e04a      	b.n	8102a82 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 81029ec:	69bb      	ldr	r3, [r7, #24]
 81029ee:	9300      	str	r3, [sp, #0]
 81029f0:	683b      	ldr	r3, [r7, #0]
 81029f2:	2200      	movs	r2, #0
 81029f4:	2120      	movs	r1, #32
 81029f6:	68f8      	ldr	r0, [r7, #12]
 81029f8:	f000 f914 	bl	8102c24 <I2C_WaitOnFlagUntilTimeout>
 81029fc:	4603      	mov	r3, r0
 81029fe:	2b00      	cmp	r3, #0
 8102a00:	d001      	beq.n	8102a06 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8102a02:	2301      	movs	r3, #1
 8102a04:	e03d      	b.n	8102a82 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8102a06:	68fb      	ldr	r3, [r7, #12]
 8102a08:	681b      	ldr	r3, [r3, #0]
 8102a0a:	2210      	movs	r2, #16
 8102a0c:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8102a0e:	68fb      	ldr	r3, [r7, #12]
 8102a10:	681b      	ldr	r3, [r3, #0]
 8102a12:	2220      	movs	r2, #32
 8102a14:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8102a16:	697b      	ldr	r3, [r7, #20]
 8102a18:	687a      	ldr	r2, [r7, #4]
 8102a1a:	429a      	cmp	r2, r3
 8102a1c:	d118      	bne.n	8102a50 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8102a1e:	68fb      	ldr	r3, [r7, #12]
 8102a20:	681b      	ldr	r3, [r3, #0]
 8102a22:	685a      	ldr	r2, [r3, #4]
 8102a24:	68fb      	ldr	r3, [r7, #12]
 8102a26:	681b      	ldr	r3, [r3, #0]
 8102a28:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8102a2c:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8102a2e:	69bb      	ldr	r3, [r7, #24]
 8102a30:	9300      	str	r3, [sp, #0]
 8102a32:	683b      	ldr	r3, [r7, #0]
 8102a34:	2200      	movs	r2, #0
 8102a36:	2120      	movs	r1, #32
 8102a38:	68f8      	ldr	r0, [r7, #12]
 8102a3a:	f000 f8f3 	bl	8102c24 <I2C_WaitOnFlagUntilTimeout>
 8102a3e:	4603      	mov	r3, r0
 8102a40:	2b00      	cmp	r3, #0
 8102a42:	d001      	beq.n	8102a48 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8102a44:	2301      	movs	r3, #1
 8102a46:	e01c      	b.n	8102a82 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8102a48:	68fb      	ldr	r3, [r7, #12]
 8102a4a:	681b      	ldr	r3, [r3, #0]
 8102a4c:	2220      	movs	r2, #32
 8102a4e:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8102a50:	697b      	ldr	r3, [r7, #20]
 8102a52:	3301      	adds	r3, #1
 8102a54:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8102a56:	697b      	ldr	r3, [r7, #20]
 8102a58:	687a      	ldr	r2, [r7, #4]
 8102a5a:	429a      	cmp	r2, r3
 8102a5c:	f63f af3b 	bhi.w	81028d6 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8102a60:	68fb      	ldr	r3, [r7, #12]
 8102a62:	2220      	movs	r2, #32
 8102a64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8102a68:	68fb      	ldr	r3, [r7, #12]
 8102a6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102a6c:	f043 0220 	orr.w	r2, r3, #32
 8102a70:	68fb      	ldr	r3, [r7, #12]
 8102a72:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8102a74:	68fb      	ldr	r3, [r7, #12]
 8102a76:	2200      	movs	r2, #0
 8102a78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8102a7c:	2301      	movs	r3, #1
 8102a7e:	e000      	b.n	8102a82 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8102a80:	2302      	movs	r3, #2
  }
}
 8102a82:	4618      	mov	r0, r3
 8102a84:	3720      	adds	r7, #32
 8102a86:	46bd      	mov	sp, r7
 8102a88:	bd80      	pop	{r7, pc}
	...

08102a8c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8102a8c:	b580      	push	{r7, lr}
 8102a8e:	b086      	sub	sp, #24
 8102a90:	af02      	add	r7, sp, #8
 8102a92:	60f8      	str	r0, [r7, #12]
 8102a94:	4608      	mov	r0, r1
 8102a96:	4611      	mov	r1, r2
 8102a98:	461a      	mov	r2, r3
 8102a9a:	4603      	mov	r3, r0
 8102a9c:	817b      	strh	r3, [r7, #10]
 8102a9e:	460b      	mov	r3, r1
 8102aa0:	813b      	strh	r3, [r7, #8]
 8102aa2:	4613      	mov	r3, r2
 8102aa4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8102aa6:	88fb      	ldrh	r3, [r7, #6]
 8102aa8:	b2da      	uxtb	r2, r3
 8102aaa:	8979      	ldrh	r1, [r7, #10]
 8102aac:	4b20      	ldr	r3, [pc, #128]	; (8102b30 <I2C_RequestMemoryWrite+0xa4>)
 8102aae:	9300      	str	r3, [sp, #0]
 8102ab0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8102ab4:	68f8      	ldr	r0, [r7, #12]
 8102ab6:	f000 fa5d 	bl	8102f74 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8102aba:	69fa      	ldr	r2, [r7, #28]
 8102abc:	69b9      	ldr	r1, [r7, #24]
 8102abe:	68f8      	ldr	r0, [r7, #12]
 8102ac0:	f000 f8f0 	bl	8102ca4 <I2C_WaitOnTXISFlagUntilTimeout>
 8102ac4:	4603      	mov	r3, r0
 8102ac6:	2b00      	cmp	r3, #0
 8102ac8:	d001      	beq.n	8102ace <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8102aca:	2301      	movs	r3, #1
 8102acc:	e02c      	b.n	8102b28 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8102ace:	88fb      	ldrh	r3, [r7, #6]
 8102ad0:	2b01      	cmp	r3, #1
 8102ad2:	d105      	bne.n	8102ae0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8102ad4:	893b      	ldrh	r3, [r7, #8]
 8102ad6:	b2da      	uxtb	r2, r3
 8102ad8:	68fb      	ldr	r3, [r7, #12]
 8102ada:	681b      	ldr	r3, [r3, #0]
 8102adc:	629a      	str	r2, [r3, #40]	; 0x28
 8102ade:	e015      	b.n	8102b0c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8102ae0:	893b      	ldrh	r3, [r7, #8]
 8102ae2:	0a1b      	lsrs	r3, r3, #8
 8102ae4:	b29b      	uxth	r3, r3
 8102ae6:	b2da      	uxtb	r2, r3
 8102ae8:	68fb      	ldr	r3, [r7, #12]
 8102aea:	681b      	ldr	r3, [r3, #0]
 8102aec:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8102aee:	69fa      	ldr	r2, [r7, #28]
 8102af0:	69b9      	ldr	r1, [r7, #24]
 8102af2:	68f8      	ldr	r0, [r7, #12]
 8102af4:	f000 f8d6 	bl	8102ca4 <I2C_WaitOnTXISFlagUntilTimeout>
 8102af8:	4603      	mov	r3, r0
 8102afa:	2b00      	cmp	r3, #0
 8102afc:	d001      	beq.n	8102b02 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8102afe:	2301      	movs	r3, #1
 8102b00:	e012      	b.n	8102b28 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8102b02:	893b      	ldrh	r3, [r7, #8]
 8102b04:	b2da      	uxtb	r2, r3
 8102b06:	68fb      	ldr	r3, [r7, #12]
 8102b08:	681b      	ldr	r3, [r3, #0]
 8102b0a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8102b0c:	69fb      	ldr	r3, [r7, #28]
 8102b0e:	9300      	str	r3, [sp, #0]
 8102b10:	69bb      	ldr	r3, [r7, #24]
 8102b12:	2200      	movs	r2, #0
 8102b14:	2180      	movs	r1, #128	; 0x80
 8102b16:	68f8      	ldr	r0, [r7, #12]
 8102b18:	f000 f884 	bl	8102c24 <I2C_WaitOnFlagUntilTimeout>
 8102b1c:	4603      	mov	r3, r0
 8102b1e:	2b00      	cmp	r3, #0
 8102b20:	d001      	beq.n	8102b26 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8102b22:	2301      	movs	r3, #1
 8102b24:	e000      	b.n	8102b28 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8102b26:	2300      	movs	r3, #0
}
 8102b28:	4618      	mov	r0, r3
 8102b2a:	3710      	adds	r7, #16
 8102b2c:	46bd      	mov	sp, r7
 8102b2e:	bd80      	pop	{r7, pc}
 8102b30:	80002000 	.word	0x80002000

08102b34 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8102b34:	b580      	push	{r7, lr}
 8102b36:	b086      	sub	sp, #24
 8102b38:	af02      	add	r7, sp, #8
 8102b3a:	60f8      	str	r0, [r7, #12]
 8102b3c:	4608      	mov	r0, r1
 8102b3e:	4611      	mov	r1, r2
 8102b40:	461a      	mov	r2, r3
 8102b42:	4603      	mov	r3, r0
 8102b44:	817b      	strh	r3, [r7, #10]
 8102b46:	460b      	mov	r3, r1
 8102b48:	813b      	strh	r3, [r7, #8]
 8102b4a:	4613      	mov	r3, r2
 8102b4c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8102b4e:	88fb      	ldrh	r3, [r7, #6]
 8102b50:	b2da      	uxtb	r2, r3
 8102b52:	8979      	ldrh	r1, [r7, #10]
 8102b54:	4b20      	ldr	r3, [pc, #128]	; (8102bd8 <I2C_RequestMemoryRead+0xa4>)
 8102b56:	9300      	str	r3, [sp, #0]
 8102b58:	2300      	movs	r3, #0
 8102b5a:	68f8      	ldr	r0, [r7, #12]
 8102b5c:	f000 fa0a 	bl	8102f74 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8102b60:	69fa      	ldr	r2, [r7, #28]
 8102b62:	69b9      	ldr	r1, [r7, #24]
 8102b64:	68f8      	ldr	r0, [r7, #12]
 8102b66:	f000 f89d 	bl	8102ca4 <I2C_WaitOnTXISFlagUntilTimeout>
 8102b6a:	4603      	mov	r3, r0
 8102b6c:	2b00      	cmp	r3, #0
 8102b6e:	d001      	beq.n	8102b74 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8102b70:	2301      	movs	r3, #1
 8102b72:	e02c      	b.n	8102bce <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8102b74:	88fb      	ldrh	r3, [r7, #6]
 8102b76:	2b01      	cmp	r3, #1
 8102b78:	d105      	bne.n	8102b86 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8102b7a:	893b      	ldrh	r3, [r7, #8]
 8102b7c:	b2da      	uxtb	r2, r3
 8102b7e:	68fb      	ldr	r3, [r7, #12]
 8102b80:	681b      	ldr	r3, [r3, #0]
 8102b82:	629a      	str	r2, [r3, #40]	; 0x28
 8102b84:	e015      	b.n	8102bb2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8102b86:	893b      	ldrh	r3, [r7, #8]
 8102b88:	0a1b      	lsrs	r3, r3, #8
 8102b8a:	b29b      	uxth	r3, r3
 8102b8c:	b2da      	uxtb	r2, r3
 8102b8e:	68fb      	ldr	r3, [r7, #12]
 8102b90:	681b      	ldr	r3, [r3, #0]
 8102b92:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8102b94:	69fa      	ldr	r2, [r7, #28]
 8102b96:	69b9      	ldr	r1, [r7, #24]
 8102b98:	68f8      	ldr	r0, [r7, #12]
 8102b9a:	f000 f883 	bl	8102ca4 <I2C_WaitOnTXISFlagUntilTimeout>
 8102b9e:	4603      	mov	r3, r0
 8102ba0:	2b00      	cmp	r3, #0
 8102ba2:	d001      	beq.n	8102ba8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8102ba4:	2301      	movs	r3, #1
 8102ba6:	e012      	b.n	8102bce <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8102ba8:	893b      	ldrh	r3, [r7, #8]
 8102baa:	b2da      	uxtb	r2, r3
 8102bac:	68fb      	ldr	r3, [r7, #12]
 8102bae:	681b      	ldr	r3, [r3, #0]
 8102bb0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8102bb2:	69fb      	ldr	r3, [r7, #28]
 8102bb4:	9300      	str	r3, [sp, #0]
 8102bb6:	69bb      	ldr	r3, [r7, #24]
 8102bb8:	2200      	movs	r2, #0
 8102bba:	2140      	movs	r1, #64	; 0x40
 8102bbc:	68f8      	ldr	r0, [r7, #12]
 8102bbe:	f000 f831 	bl	8102c24 <I2C_WaitOnFlagUntilTimeout>
 8102bc2:	4603      	mov	r3, r0
 8102bc4:	2b00      	cmp	r3, #0
 8102bc6:	d001      	beq.n	8102bcc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8102bc8:	2301      	movs	r3, #1
 8102bca:	e000      	b.n	8102bce <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8102bcc:	2300      	movs	r3, #0
}
 8102bce:	4618      	mov	r0, r3
 8102bd0:	3710      	adds	r7, #16
 8102bd2:	46bd      	mov	sp, r7
 8102bd4:	bd80      	pop	{r7, pc}
 8102bd6:	bf00      	nop
 8102bd8:	80002000 	.word	0x80002000

08102bdc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8102bdc:	b480      	push	{r7}
 8102bde:	b083      	sub	sp, #12
 8102be0:	af00      	add	r7, sp, #0
 8102be2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8102be4:	687b      	ldr	r3, [r7, #4]
 8102be6:	681b      	ldr	r3, [r3, #0]
 8102be8:	699b      	ldr	r3, [r3, #24]
 8102bea:	f003 0302 	and.w	r3, r3, #2
 8102bee:	2b02      	cmp	r3, #2
 8102bf0:	d103      	bne.n	8102bfa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8102bf2:	687b      	ldr	r3, [r7, #4]
 8102bf4:	681b      	ldr	r3, [r3, #0]
 8102bf6:	2200      	movs	r2, #0
 8102bf8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8102bfa:	687b      	ldr	r3, [r7, #4]
 8102bfc:	681b      	ldr	r3, [r3, #0]
 8102bfe:	699b      	ldr	r3, [r3, #24]
 8102c00:	f003 0301 	and.w	r3, r3, #1
 8102c04:	2b01      	cmp	r3, #1
 8102c06:	d007      	beq.n	8102c18 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8102c08:	687b      	ldr	r3, [r7, #4]
 8102c0a:	681b      	ldr	r3, [r3, #0]
 8102c0c:	699a      	ldr	r2, [r3, #24]
 8102c0e:	687b      	ldr	r3, [r7, #4]
 8102c10:	681b      	ldr	r3, [r3, #0]
 8102c12:	f042 0201 	orr.w	r2, r2, #1
 8102c16:	619a      	str	r2, [r3, #24]
  }
}
 8102c18:	bf00      	nop
 8102c1a:	370c      	adds	r7, #12
 8102c1c:	46bd      	mov	sp, r7
 8102c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102c22:	4770      	bx	lr

08102c24 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8102c24:	b580      	push	{r7, lr}
 8102c26:	b084      	sub	sp, #16
 8102c28:	af00      	add	r7, sp, #0
 8102c2a:	60f8      	str	r0, [r7, #12]
 8102c2c:	60b9      	str	r1, [r7, #8]
 8102c2e:	603b      	str	r3, [r7, #0]
 8102c30:	4613      	mov	r3, r2
 8102c32:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8102c34:	e022      	b.n	8102c7c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8102c36:	683b      	ldr	r3, [r7, #0]
 8102c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102c3c:	d01e      	beq.n	8102c7c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8102c3e:	f7fe ffb5 	bl	8101bac <HAL_GetTick>
 8102c42:	4602      	mov	r2, r0
 8102c44:	69bb      	ldr	r3, [r7, #24]
 8102c46:	1ad3      	subs	r3, r2, r3
 8102c48:	683a      	ldr	r2, [r7, #0]
 8102c4a:	429a      	cmp	r2, r3
 8102c4c:	d302      	bcc.n	8102c54 <I2C_WaitOnFlagUntilTimeout+0x30>
 8102c4e:	683b      	ldr	r3, [r7, #0]
 8102c50:	2b00      	cmp	r3, #0
 8102c52:	d113      	bne.n	8102c7c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8102c54:	68fb      	ldr	r3, [r7, #12]
 8102c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102c58:	f043 0220 	orr.w	r2, r3, #32
 8102c5c:	68fb      	ldr	r3, [r7, #12]
 8102c5e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8102c60:	68fb      	ldr	r3, [r7, #12]
 8102c62:	2220      	movs	r2, #32
 8102c64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8102c68:	68fb      	ldr	r3, [r7, #12]
 8102c6a:	2200      	movs	r2, #0
 8102c6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8102c70:	68fb      	ldr	r3, [r7, #12]
 8102c72:	2200      	movs	r2, #0
 8102c74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8102c78:	2301      	movs	r3, #1
 8102c7a:	e00f      	b.n	8102c9c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8102c7c:	68fb      	ldr	r3, [r7, #12]
 8102c7e:	681b      	ldr	r3, [r3, #0]
 8102c80:	699a      	ldr	r2, [r3, #24]
 8102c82:	68bb      	ldr	r3, [r7, #8]
 8102c84:	4013      	ands	r3, r2
 8102c86:	68ba      	ldr	r2, [r7, #8]
 8102c88:	429a      	cmp	r2, r3
 8102c8a:	bf0c      	ite	eq
 8102c8c:	2301      	moveq	r3, #1
 8102c8e:	2300      	movne	r3, #0
 8102c90:	b2db      	uxtb	r3, r3
 8102c92:	461a      	mov	r2, r3
 8102c94:	79fb      	ldrb	r3, [r7, #7]
 8102c96:	429a      	cmp	r2, r3
 8102c98:	d0cd      	beq.n	8102c36 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8102c9a:	2300      	movs	r3, #0
}
 8102c9c:	4618      	mov	r0, r3
 8102c9e:	3710      	adds	r7, #16
 8102ca0:	46bd      	mov	sp, r7
 8102ca2:	bd80      	pop	{r7, pc}

08102ca4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8102ca4:	b580      	push	{r7, lr}
 8102ca6:	b084      	sub	sp, #16
 8102ca8:	af00      	add	r7, sp, #0
 8102caa:	60f8      	str	r0, [r7, #12]
 8102cac:	60b9      	str	r1, [r7, #8]
 8102cae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8102cb0:	e02c      	b.n	8102d0c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8102cb2:	687a      	ldr	r2, [r7, #4]
 8102cb4:	68b9      	ldr	r1, [r7, #8]
 8102cb6:	68f8      	ldr	r0, [r7, #12]
 8102cb8:	f000 f870 	bl	8102d9c <I2C_IsErrorOccurred>
 8102cbc:	4603      	mov	r3, r0
 8102cbe:	2b00      	cmp	r3, #0
 8102cc0:	d001      	beq.n	8102cc6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8102cc2:	2301      	movs	r3, #1
 8102cc4:	e02a      	b.n	8102d1c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8102cc6:	68bb      	ldr	r3, [r7, #8]
 8102cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102ccc:	d01e      	beq.n	8102d0c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8102cce:	f7fe ff6d 	bl	8101bac <HAL_GetTick>
 8102cd2:	4602      	mov	r2, r0
 8102cd4:	687b      	ldr	r3, [r7, #4]
 8102cd6:	1ad3      	subs	r3, r2, r3
 8102cd8:	68ba      	ldr	r2, [r7, #8]
 8102cda:	429a      	cmp	r2, r3
 8102cdc:	d302      	bcc.n	8102ce4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8102cde:	68bb      	ldr	r3, [r7, #8]
 8102ce0:	2b00      	cmp	r3, #0
 8102ce2:	d113      	bne.n	8102d0c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8102ce4:	68fb      	ldr	r3, [r7, #12]
 8102ce6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102ce8:	f043 0220 	orr.w	r2, r3, #32
 8102cec:	68fb      	ldr	r3, [r7, #12]
 8102cee:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8102cf0:	68fb      	ldr	r3, [r7, #12]
 8102cf2:	2220      	movs	r2, #32
 8102cf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8102cf8:	68fb      	ldr	r3, [r7, #12]
 8102cfa:	2200      	movs	r2, #0
 8102cfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8102d00:	68fb      	ldr	r3, [r7, #12]
 8102d02:	2200      	movs	r2, #0
 8102d04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8102d08:	2301      	movs	r3, #1
 8102d0a:	e007      	b.n	8102d1c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8102d0c:	68fb      	ldr	r3, [r7, #12]
 8102d0e:	681b      	ldr	r3, [r3, #0]
 8102d10:	699b      	ldr	r3, [r3, #24]
 8102d12:	f003 0302 	and.w	r3, r3, #2
 8102d16:	2b02      	cmp	r3, #2
 8102d18:	d1cb      	bne.n	8102cb2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8102d1a:	2300      	movs	r3, #0
}
 8102d1c:	4618      	mov	r0, r3
 8102d1e:	3710      	adds	r7, #16
 8102d20:	46bd      	mov	sp, r7
 8102d22:	bd80      	pop	{r7, pc}

08102d24 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8102d24:	b580      	push	{r7, lr}
 8102d26:	b084      	sub	sp, #16
 8102d28:	af00      	add	r7, sp, #0
 8102d2a:	60f8      	str	r0, [r7, #12]
 8102d2c:	60b9      	str	r1, [r7, #8]
 8102d2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8102d30:	e028      	b.n	8102d84 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8102d32:	687a      	ldr	r2, [r7, #4]
 8102d34:	68b9      	ldr	r1, [r7, #8]
 8102d36:	68f8      	ldr	r0, [r7, #12]
 8102d38:	f000 f830 	bl	8102d9c <I2C_IsErrorOccurred>
 8102d3c:	4603      	mov	r3, r0
 8102d3e:	2b00      	cmp	r3, #0
 8102d40:	d001      	beq.n	8102d46 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8102d42:	2301      	movs	r3, #1
 8102d44:	e026      	b.n	8102d94 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8102d46:	f7fe ff31 	bl	8101bac <HAL_GetTick>
 8102d4a:	4602      	mov	r2, r0
 8102d4c:	687b      	ldr	r3, [r7, #4]
 8102d4e:	1ad3      	subs	r3, r2, r3
 8102d50:	68ba      	ldr	r2, [r7, #8]
 8102d52:	429a      	cmp	r2, r3
 8102d54:	d302      	bcc.n	8102d5c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8102d56:	68bb      	ldr	r3, [r7, #8]
 8102d58:	2b00      	cmp	r3, #0
 8102d5a:	d113      	bne.n	8102d84 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8102d5c:	68fb      	ldr	r3, [r7, #12]
 8102d5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102d60:	f043 0220 	orr.w	r2, r3, #32
 8102d64:	68fb      	ldr	r3, [r7, #12]
 8102d66:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8102d68:	68fb      	ldr	r3, [r7, #12]
 8102d6a:	2220      	movs	r2, #32
 8102d6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8102d70:	68fb      	ldr	r3, [r7, #12]
 8102d72:	2200      	movs	r2, #0
 8102d74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8102d78:	68fb      	ldr	r3, [r7, #12]
 8102d7a:	2200      	movs	r2, #0
 8102d7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8102d80:	2301      	movs	r3, #1
 8102d82:	e007      	b.n	8102d94 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8102d84:	68fb      	ldr	r3, [r7, #12]
 8102d86:	681b      	ldr	r3, [r3, #0]
 8102d88:	699b      	ldr	r3, [r3, #24]
 8102d8a:	f003 0320 	and.w	r3, r3, #32
 8102d8e:	2b20      	cmp	r3, #32
 8102d90:	d1cf      	bne.n	8102d32 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8102d92:	2300      	movs	r3, #0
}
 8102d94:	4618      	mov	r0, r3
 8102d96:	3710      	adds	r7, #16
 8102d98:	46bd      	mov	sp, r7
 8102d9a:	bd80      	pop	{r7, pc}

08102d9c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8102d9c:	b580      	push	{r7, lr}
 8102d9e:	b08a      	sub	sp, #40	; 0x28
 8102da0:	af00      	add	r7, sp, #0
 8102da2:	60f8      	str	r0, [r7, #12]
 8102da4:	60b9      	str	r1, [r7, #8]
 8102da6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8102da8:	2300      	movs	r3, #0
 8102daa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8102dae:	68fb      	ldr	r3, [r7, #12]
 8102db0:	681b      	ldr	r3, [r3, #0]
 8102db2:	699b      	ldr	r3, [r3, #24]
 8102db4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8102db6:	2300      	movs	r3, #0
 8102db8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8102dba:	687b      	ldr	r3, [r7, #4]
 8102dbc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8102dbe:	69bb      	ldr	r3, [r7, #24]
 8102dc0:	f003 0310 	and.w	r3, r3, #16
 8102dc4:	2b00      	cmp	r3, #0
 8102dc6:	d075      	beq.n	8102eb4 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8102dc8:	68fb      	ldr	r3, [r7, #12]
 8102dca:	681b      	ldr	r3, [r3, #0]
 8102dcc:	2210      	movs	r2, #16
 8102dce:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8102dd0:	e056      	b.n	8102e80 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8102dd2:	68bb      	ldr	r3, [r7, #8]
 8102dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102dd8:	d052      	beq.n	8102e80 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8102dda:	f7fe fee7 	bl	8101bac <HAL_GetTick>
 8102dde:	4602      	mov	r2, r0
 8102de0:	69fb      	ldr	r3, [r7, #28]
 8102de2:	1ad3      	subs	r3, r2, r3
 8102de4:	68ba      	ldr	r2, [r7, #8]
 8102de6:	429a      	cmp	r2, r3
 8102de8:	d302      	bcc.n	8102df0 <I2C_IsErrorOccurred+0x54>
 8102dea:	68bb      	ldr	r3, [r7, #8]
 8102dec:	2b00      	cmp	r3, #0
 8102dee:	d147      	bne.n	8102e80 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8102df0:	68fb      	ldr	r3, [r7, #12]
 8102df2:	681b      	ldr	r3, [r3, #0]
 8102df4:	685b      	ldr	r3, [r3, #4]
 8102df6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8102dfa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8102dfc:	68fb      	ldr	r3, [r7, #12]
 8102dfe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8102e02:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8102e04:	68fb      	ldr	r3, [r7, #12]
 8102e06:	681b      	ldr	r3, [r3, #0]
 8102e08:	699b      	ldr	r3, [r3, #24]
 8102e0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8102e0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8102e12:	d12e      	bne.n	8102e72 <I2C_IsErrorOccurred+0xd6>
 8102e14:	697b      	ldr	r3, [r7, #20]
 8102e16:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8102e1a:	d02a      	beq.n	8102e72 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8102e1c:	7cfb      	ldrb	r3, [r7, #19]
 8102e1e:	2b20      	cmp	r3, #32
 8102e20:	d027      	beq.n	8102e72 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8102e22:	68fb      	ldr	r3, [r7, #12]
 8102e24:	681b      	ldr	r3, [r3, #0]
 8102e26:	685a      	ldr	r2, [r3, #4]
 8102e28:	68fb      	ldr	r3, [r7, #12]
 8102e2a:	681b      	ldr	r3, [r3, #0]
 8102e2c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8102e30:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8102e32:	f7fe febb 	bl	8101bac <HAL_GetTick>
 8102e36:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8102e38:	e01b      	b.n	8102e72 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8102e3a:	f7fe feb7 	bl	8101bac <HAL_GetTick>
 8102e3e:	4602      	mov	r2, r0
 8102e40:	69fb      	ldr	r3, [r7, #28]
 8102e42:	1ad3      	subs	r3, r2, r3
 8102e44:	2b19      	cmp	r3, #25
 8102e46:	d914      	bls.n	8102e72 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8102e48:	68fb      	ldr	r3, [r7, #12]
 8102e4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102e4c:	f043 0220 	orr.w	r2, r3, #32
 8102e50:	68fb      	ldr	r3, [r7, #12]
 8102e52:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8102e54:	68fb      	ldr	r3, [r7, #12]
 8102e56:	2220      	movs	r2, #32
 8102e58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8102e5c:	68fb      	ldr	r3, [r7, #12]
 8102e5e:	2200      	movs	r2, #0
 8102e60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8102e64:	68fb      	ldr	r3, [r7, #12]
 8102e66:	2200      	movs	r2, #0
 8102e68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8102e6c:	2301      	movs	r3, #1
 8102e6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8102e72:	68fb      	ldr	r3, [r7, #12]
 8102e74:	681b      	ldr	r3, [r3, #0]
 8102e76:	699b      	ldr	r3, [r3, #24]
 8102e78:	f003 0320 	and.w	r3, r3, #32
 8102e7c:	2b20      	cmp	r3, #32
 8102e7e:	d1dc      	bne.n	8102e3a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8102e80:	68fb      	ldr	r3, [r7, #12]
 8102e82:	681b      	ldr	r3, [r3, #0]
 8102e84:	699b      	ldr	r3, [r3, #24]
 8102e86:	f003 0320 	and.w	r3, r3, #32
 8102e8a:	2b20      	cmp	r3, #32
 8102e8c:	d003      	beq.n	8102e96 <I2C_IsErrorOccurred+0xfa>
 8102e8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8102e92:	2b00      	cmp	r3, #0
 8102e94:	d09d      	beq.n	8102dd2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8102e96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8102e9a:	2b00      	cmp	r3, #0
 8102e9c:	d103      	bne.n	8102ea6 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8102e9e:	68fb      	ldr	r3, [r7, #12]
 8102ea0:	681b      	ldr	r3, [r3, #0]
 8102ea2:	2220      	movs	r2, #32
 8102ea4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8102ea6:	6a3b      	ldr	r3, [r7, #32]
 8102ea8:	f043 0304 	orr.w	r3, r3, #4
 8102eac:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8102eae:	2301      	movs	r3, #1
 8102eb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8102eb4:	68fb      	ldr	r3, [r7, #12]
 8102eb6:	681b      	ldr	r3, [r3, #0]
 8102eb8:	699b      	ldr	r3, [r3, #24]
 8102eba:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8102ebc:	69bb      	ldr	r3, [r7, #24]
 8102ebe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8102ec2:	2b00      	cmp	r3, #0
 8102ec4:	d00b      	beq.n	8102ede <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8102ec6:	6a3b      	ldr	r3, [r7, #32]
 8102ec8:	f043 0301 	orr.w	r3, r3, #1
 8102ecc:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8102ece:	68fb      	ldr	r3, [r7, #12]
 8102ed0:	681b      	ldr	r3, [r3, #0]
 8102ed2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8102ed6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8102ed8:	2301      	movs	r3, #1
 8102eda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8102ede:	69bb      	ldr	r3, [r7, #24]
 8102ee0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8102ee4:	2b00      	cmp	r3, #0
 8102ee6:	d00b      	beq.n	8102f00 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8102ee8:	6a3b      	ldr	r3, [r7, #32]
 8102eea:	f043 0308 	orr.w	r3, r3, #8
 8102eee:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8102ef0:	68fb      	ldr	r3, [r7, #12]
 8102ef2:	681b      	ldr	r3, [r3, #0]
 8102ef4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8102ef8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8102efa:	2301      	movs	r3, #1
 8102efc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8102f00:	69bb      	ldr	r3, [r7, #24]
 8102f02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8102f06:	2b00      	cmp	r3, #0
 8102f08:	d00b      	beq.n	8102f22 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8102f0a:	6a3b      	ldr	r3, [r7, #32]
 8102f0c:	f043 0302 	orr.w	r3, r3, #2
 8102f10:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8102f12:	68fb      	ldr	r3, [r7, #12]
 8102f14:	681b      	ldr	r3, [r3, #0]
 8102f16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8102f1a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8102f1c:	2301      	movs	r3, #1
 8102f1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8102f22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8102f26:	2b00      	cmp	r3, #0
 8102f28:	d01c      	beq.n	8102f64 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8102f2a:	68f8      	ldr	r0, [r7, #12]
 8102f2c:	f7ff fe56 	bl	8102bdc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8102f30:	68fb      	ldr	r3, [r7, #12]
 8102f32:	681b      	ldr	r3, [r3, #0]
 8102f34:	6859      	ldr	r1, [r3, #4]
 8102f36:	68fb      	ldr	r3, [r7, #12]
 8102f38:	681a      	ldr	r2, [r3, #0]
 8102f3a:	4b0d      	ldr	r3, [pc, #52]	; (8102f70 <I2C_IsErrorOccurred+0x1d4>)
 8102f3c:	400b      	ands	r3, r1
 8102f3e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8102f40:	68fb      	ldr	r3, [r7, #12]
 8102f42:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8102f44:	6a3b      	ldr	r3, [r7, #32]
 8102f46:	431a      	orrs	r2, r3
 8102f48:	68fb      	ldr	r3, [r7, #12]
 8102f4a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8102f4c:	68fb      	ldr	r3, [r7, #12]
 8102f4e:	2220      	movs	r2, #32
 8102f50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8102f54:	68fb      	ldr	r3, [r7, #12]
 8102f56:	2200      	movs	r2, #0
 8102f58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8102f5c:	68fb      	ldr	r3, [r7, #12]
 8102f5e:	2200      	movs	r2, #0
 8102f60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8102f64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8102f68:	4618      	mov	r0, r3
 8102f6a:	3728      	adds	r7, #40	; 0x28
 8102f6c:	46bd      	mov	sp, r7
 8102f6e:	bd80      	pop	{r7, pc}
 8102f70:	fe00e800 	.word	0xfe00e800

08102f74 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8102f74:	b480      	push	{r7}
 8102f76:	b087      	sub	sp, #28
 8102f78:	af00      	add	r7, sp, #0
 8102f7a:	60f8      	str	r0, [r7, #12]
 8102f7c:	607b      	str	r3, [r7, #4]
 8102f7e:	460b      	mov	r3, r1
 8102f80:	817b      	strh	r3, [r7, #10]
 8102f82:	4613      	mov	r3, r2
 8102f84:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8102f86:	897b      	ldrh	r3, [r7, #10]
 8102f88:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8102f8c:	7a7b      	ldrb	r3, [r7, #9]
 8102f8e:	041b      	lsls	r3, r3, #16
 8102f90:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8102f94:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8102f96:	687b      	ldr	r3, [r7, #4]
 8102f98:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8102f9a:	6a3b      	ldr	r3, [r7, #32]
 8102f9c:	4313      	orrs	r3, r2
 8102f9e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8102fa2:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8102fa4:	68fb      	ldr	r3, [r7, #12]
 8102fa6:	681b      	ldr	r3, [r3, #0]
 8102fa8:	685a      	ldr	r2, [r3, #4]
 8102faa:	6a3b      	ldr	r3, [r7, #32]
 8102fac:	0d5b      	lsrs	r3, r3, #21
 8102fae:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8102fb2:	4b08      	ldr	r3, [pc, #32]	; (8102fd4 <I2C_TransferConfig+0x60>)
 8102fb4:	430b      	orrs	r3, r1
 8102fb6:	43db      	mvns	r3, r3
 8102fb8:	ea02 0103 	and.w	r1, r2, r3
 8102fbc:	68fb      	ldr	r3, [r7, #12]
 8102fbe:	681b      	ldr	r3, [r3, #0]
 8102fc0:	697a      	ldr	r2, [r7, #20]
 8102fc2:	430a      	orrs	r2, r1
 8102fc4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8102fc6:	bf00      	nop
 8102fc8:	371c      	adds	r7, #28
 8102fca:	46bd      	mov	sp, r7
 8102fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102fd0:	4770      	bx	lr
 8102fd2:	bf00      	nop
 8102fd4:	03ff63ff 	.word	0x03ff63ff

08102fd8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8102fd8:	b480      	push	{r7}
 8102fda:	b083      	sub	sp, #12
 8102fdc:	af00      	add	r7, sp, #0
 8102fde:	6078      	str	r0, [r7, #4]
 8102fe0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8102fe2:	687b      	ldr	r3, [r7, #4]
 8102fe4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8102fe8:	b2db      	uxtb	r3, r3
 8102fea:	2b20      	cmp	r3, #32
 8102fec:	d138      	bne.n	8103060 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8102fee:	687b      	ldr	r3, [r7, #4]
 8102ff0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8102ff4:	2b01      	cmp	r3, #1
 8102ff6:	d101      	bne.n	8102ffc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8102ff8:	2302      	movs	r3, #2
 8102ffa:	e032      	b.n	8103062 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8102ffc:	687b      	ldr	r3, [r7, #4]
 8102ffe:	2201      	movs	r2, #1
 8103000:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8103004:	687b      	ldr	r3, [r7, #4]
 8103006:	2224      	movs	r2, #36	; 0x24
 8103008:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 810300c:	687b      	ldr	r3, [r7, #4]
 810300e:	681b      	ldr	r3, [r3, #0]
 8103010:	681a      	ldr	r2, [r3, #0]
 8103012:	687b      	ldr	r3, [r7, #4]
 8103014:	681b      	ldr	r3, [r3, #0]
 8103016:	f022 0201 	bic.w	r2, r2, #1
 810301a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 810301c:	687b      	ldr	r3, [r7, #4]
 810301e:	681b      	ldr	r3, [r3, #0]
 8103020:	681a      	ldr	r2, [r3, #0]
 8103022:	687b      	ldr	r3, [r7, #4]
 8103024:	681b      	ldr	r3, [r3, #0]
 8103026:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 810302a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 810302c:	687b      	ldr	r3, [r7, #4]
 810302e:	681b      	ldr	r3, [r3, #0]
 8103030:	6819      	ldr	r1, [r3, #0]
 8103032:	687b      	ldr	r3, [r7, #4]
 8103034:	681b      	ldr	r3, [r3, #0]
 8103036:	683a      	ldr	r2, [r7, #0]
 8103038:	430a      	orrs	r2, r1
 810303a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 810303c:	687b      	ldr	r3, [r7, #4]
 810303e:	681b      	ldr	r3, [r3, #0]
 8103040:	681a      	ldr	r2, [r3, #0]
 8103042:	687b      	ldr	r3, [r7, #4]
 8103044:	681b      	ldr	r3, [r3, #0]
 8103046:	f042 0201 	orr.w	r2, r2, #1
 810304a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 810304c:	687b      	ldr	r3, [r7, #4]
 810304e:	2220      	movs	r2, #32
 8103050:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8103054:	687b      	ldr	r3, [r7, #4]
 8103056:	2200      	movs	r2, #0
 8103058:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 810305c:	2300      	movs	r3, #0
 810305e:	e000      	b.n	8103062 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8103060:	2302      	movs	r3, #2
  }
}
 8103062:	4618      	mov	r0, r3
 8103064:	370c      	adds	r7, #12
 8103066:	46bd      	mov	sp, r7
 8103068:	f85d 7b04 	ldr.w	r7, [sp], #4
 810306c:	4770      	bx	lr

0810306e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 810306e:	b480      	push	{r7}
 8103070:	b085      	sub	sp, #20
 8103072:	af00      	add	r7, sp, #0
 8103074:	6078      	str	r0, [r7, #4]
 8103076:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8103078:	687b      	ldr	r3, [r7, #4]
 810307a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 810307e:	b2db      	uxtb	r3, r3
 8103080:	2b20      	cmp	r3, #32
 8103082:	d139      	bne.n	81030f8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8103084:	687b      	ldr	r3, [r7, #4]
 8103086:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810308a:	2b01      	cmp	r3, #1
 810308c:	d101      	bne.n	8103092 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 810308e:	2302      	movs	r3, #2
 8103090:	e033      	b.n	81030fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8103092:	687b      	ldr	r3, [r7, #4]
 8103094:	2201      	movs	r2, #1
 8103096:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 810309a:	687b      	ldr	r3, [r7, #4]
 810309c:	2224      	movs	r2, #36	; 0x24
 810309e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 81030a2:	687b      	ldr	r3, [r7, #4]
 81030a4:	681b      	ldr	r3, [r3, #0]
 81030a6:	681a      	ldr	r2, [r3, #0]
 81030a8:	687b      	ldr	r3, [r7, #4]
 81030aa:	681b      	ldr	r3, [r3, #0]
 81030ac:	f022 0201 	bic.w	r2, r2, #1
 81030b0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 81030b2:	687b      	ldr	r3, [r7, #4]
 81030b4:	681b      	ldr	r3, [r3, #0]
 81030b6:	681b      	ldr	r3, [r3, #0]
 81030b8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 81030ba:	68fb      	ldr	r3, [r7, #12]
 81030bc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 81030c0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 81030c2:	683b      	ldr	r3, [r7, #0]
 81030c4:	021b      	lsls	r3, r3, #8
 81030c6:	68fa      	ldr	r2, [r7, #12]
 81030c8:	4313      	orrs	r3, r2
 81030ca:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 81030cc:	687b      	ldr	r3, [r7, #4]
 81030ce:	681b      	ldr	r3, [r3, #0]
 81030d0:	68fa      	ldr	r2, [r7, #12]
 81030d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 81030d4:	687b      	ldr	r3, [r7, #4]
 81030d6:	681b      	ldr	r3, [r3, #0]
 81030d8:	681a      	ldr	r2, [r3, #0]
 81030da:	687b      	ldr	r3, [r7, #4]
 81030dc:	681b      	ldr	r3, [r3, #0]
 81030de:	f042 0201 	orr.w	r2, r2, #1
 81030e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 81030e4:	687b      	ldr	r3, [r7, #4]
 81030e6:	2220      	movs	r2, #32
 81030e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 81030ec:	687b      	ldr	r3, [r7, #4]
 81030ee:	2200      	movs	r2, #0
 81030f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 81030f4:	2300      	movs	r3, #0
 81030f6:	e000      	b.n	81030fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 81030f8:	2302      	movs	r3, #2
  }
}
 81030fa:	4618      	mov	r0, r3
 81030fc:	3714      	adds	r7, #20
 81030fe:	46bd      	mov	sp, r7
 8103100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103104:	4770      	bx	lr
	...

08103108 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8103108:	b580      	push	{r7, lr}
 810310a:	b084      	sub	sp, #16
 810310c:	af00      	add	r7, sp, #0
 810310e:	60f8      	str	r0, [r7, #12]
 8103110:	460b      	mov	r3, r1
 8103112:	607a      	str	r2, [r7, #4]
 8103114:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8103116:	4b37      	ldr	r3, [pc, #220]	; (81031f4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103118:	681b      	ldr	r3, [r3, #0]
 810311a:	f023 0201 	bic.w	r2, r3, #1
 810311e:	4935      	ldr	r1, [pc, #212]	; (81031f4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103120:	68fb      	ldr	r3, [r7, #12]
 8103122:	4313      	orrs	r3, r2
 8103124:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8103126:	687b      	ldr	r3, [r7, #4]
 8103128:	2b00      	cmp	r3, #0
 810312a:	d123      	bne.n	8103174 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 810312c:	f7fe fe7e 	bl	8101e2c <HAL_GetCurrentCPUID>
 8103130:	4603      	mov	r3, r0
 8103132:	2b03      	cmp	r3, #3
 8103134:	d158      	bne.n	81031e8 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8103136:	4b2f      	ldr	r3, [pc, #188]	; (81031f4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103138:	691b      	ldr	r3, [r3, #16]
 810313a:	4a2e      	ldr	r2, [pc, #184]	; (81031f4 <HAL_PWREx_EnterSTOPMode+0xec>)
 810313c:	f023 0301 	bic.w	r3, r3, #1
 8103140:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8103142:	4b2d      	ldr	r3, [pc, #180]	; (81031f8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103144:	691b      	ldr	r3, [r3, #16]
 8103146:	4a2c      	ldr	r2, [pc, #176]	; (81031f8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103148:	f043 0304 	orr.w	r3, r3, #4
 810314c:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 810314e:	f3bf 8f4f 	dsb	sy
}
 8103152:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8103154:	f3bf 8f6f 	isb	sy
}
 8103158:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 810315a:	7afb      	ldrb	r3, [r7, #11]
 810315c:	2b01      	cmp	r3, #1
 810315e:	d101      	bne.n	8103164 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8103160:	bf30      	wfi
 8103162:	e000      	b.n	8103166 <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8103164:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8103166:	4b24      	ldr	r3, [pc, #144]	; (81031f8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103168:	691b      	ldr	r3, [r3, #16]
 810316a:	4a23      	ldr	r2, [pc, #140]	; (81031f8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810316c:	f023 0304 	bic.w	r3, r3, #4
 8103170:	6113      	str	r3, [r2, #16]
 8103172:	e03c      	b.n	81031ee <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8103174:	687b      	ldr	r3, [r7, #4]
 8103176:	2b01      	cmp	r3, #1
 8103178:	d123      	bne.n	81031c2 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 810317a:	f7fe fe57 	bl	8101e2c <HAL_GetCurrentCPUID>
 810317e:	4603      	mov	r3, r0
 8103180:	2b01      	cmp	r3, #1
 8103182:	d133      	bne.n	81031ec <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8103184:	4b1b      	ldr	r3, [pc, #108]	; (81031f4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103186:	695b      	ldr	r3, [r3, #20]
 8103188:	4a1a      	ldr	r2, [pc, #104]	; (81031f4 <HAL_PWREx_EnterSTOPMode+0xec>)
 810318a:	f023 0302 	bic.w	r3, r3, #2
 810318e:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8103190:	4b19      	ldr	r3, [pc, #100]	; (81031f8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103192:	691b      	ldr	r3, [r3, #16]
 8103194:	4a18      	ldr	r2, [pc, #96]	; (81031f8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103196:	f043 0304 	orr.w	r3, r3, #4
 810319a:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 810319c:	f3bf 8f4f 	dsb	sy
}
 81031a0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 81031a2:	f3bf 8f6f 	isb	sy
}
 81031a6:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 81031a8:	7afb      	ldrb	r3, [r7, #11]
 81031aa:	2b01      	cmp	r3, #1
 81031ac:	d101      	bne.n	81031b2 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 81031ae:	bf30      	wfi
 81031b0:	e000      	b.n	81031b4 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 81031b2:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81031b4:	4b10      	ldr	r3, [pc, #64]	; (81031f8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81031b6:	691b      	ldr	r3, [r3, #16]
 81031b8:	4a0f      	ldr	r2, [pc, #60]	; (81031f8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81031ba:	f023 0304 	bic.w	r3, r3, #4
 81031be:	6113      	str	r3, [r2, #16]
 81031c0:	e015      	b.n	81031ee <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81031c2:	f7fe fe33 	bl	8101e2c <HAL_GetCurrentCPUID>
 81031c6:	4603      	mov	r3, r0
 81031c8:	2b03      	cmp	r3, #3
 81031ca:	d106      	bne.n	81031da <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 81031cc:	4b09      	ldr	r3, [pc, #36]	; (81031f4 <HAL_PWREx_EnterSTOPMode+0xec>)
 81031ce:	691b      	ldr	r3, [r3, #16]
 81031d0:	4a08      	ldr	r2, [pc, #32]	; (81031f4 <HAL_PWREx_EnterSTOPMode+0xec>)
 81031d2:	f023 0304 	bic.w	r3, r3, #4
 81031d6:	6113      	str	r3, [r2, #16]
 81031d8:	e009      	b.n	81031ee <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 81031da:	4b06      	ldr	r3, [pc, #24]	; (81031f4 <HAL_PWREx_EnterSTOPMode+0xec>)
 81031dc:	695b      	ldr	r3, [r3, #20]
 81031de:	4a05      	ldr	r2, [pc, #20]	; (81031f4 <HAL_PWREx_EnterSTOPMode+0xec>)
 81031e0:	f023 0304 	bic.w	r3, r3, #4
 81031e4:	6153      	str	r3, [r2, #20]
 81031e6:	e002      	b.n	81031ee <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 81031e8:	bf00      	nop
 81031ea:	e000      	b.n	81031ee <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 81031ec:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 81031ee:	3710      	adds	r7, #16
 81031f0:	46bd      	mov	sp, r7
 81031f2:	bd80      	pop	{r7, pc}
 81031f4:	58024800 	.word	0x58024800
 81031f8:	e000ed00 	.word	0xe000ed00

081031fc <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 81031fc:	b580      	push	{r7, lr}
 81031fe:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8103200:	f7fe fe14 	bl	8101e2c <HAL_GetCurrentCPUID>
 8103204:	4603      	mov	r3, r0
 8103206:	2b03      	cmp	r3, #3
 8103208:	d101      	bne.n	810320e <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 810320a:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 810320c:	e001      	b.n	8103212 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 810320e:	bf40      	sev
    __WFE ();
 8103210:	bf20      	wfe
}
 8103212:	bf00      	nop
 8103214:	bd80      	pop	{r7, pc}
	...

08103218 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8103218:	b480      	push	{r7}
 810321a:	b089      	sub	sp, #36	; 0x24
 810321c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 810321e:	4bb3      	ldr	r3, [pc, #716]	; (81034ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103220:	691b      	ldr	r3, [r3, #16]
 8103222:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8103226:	2b18      	cmp	r3, #24
 8103228:	f200 8155 	bhi.w	81034d6 <HAL_RCC_GetSysClockFreq+0x2be>
 810322c:	a201      	add	r2, pc, #4	; (adr r2, 8103234 <HAL_RCC_GetSysClockFreq+0x1c>)
 810322e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103232:	bf00      	nop
 8103234:	08103299 	.word	0x08103299
 8103238:	081034d7 	.word	0x081034d7
 810323c:	081034d7 	.word	0x081034d7
 8103240:	081034d7 	.word	0x081034d7
 8103244:	081034d7 	.word	0x081034d7
 8103248:	081034d7 	.word	0x081034d7
 810324c:	081034d7 	.word	0x081034d7
 8103250:	081034d7 	.word	0x081034d7
 8103254:	081032bf 	.word	0x081032bf
 8103258:	081034d7 	.word	0x081034d7
 810325c:	081034d7 	.word	0x081034d7
 8103260:	081034d7 	.word	0x081034d7
 8103264:	081034d7 	.word	0x081034d7
 8103268:	081034d7 	.word	0x081034d7
 810326c:	081034d7 	.word	0x081034d7
 8103270:	081034d7 	.word	0x081034d7
 8103274:	081032c5 	.word	0x081032c5
 8103278:	081034d7 	.word	0x081034d7
 810327c:	081034d7 	.word	0x081034d7
 8103280:	081034d7 	.word	0x081034d7
 8103284:	081034d7 	.word	0x081034d7
 8103288:	081034d7 	.word	0x081034d7
 810328c:	081034d7 	.word	0x081034d7
 8103290:	081034d7 	.word	0x081034d7
 8103294:	081032cb 	.word	0x081032cb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8103298:	4b94      	ldr	r3, [pc, #592]	; (81034ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 810329a:	681b      	ldr	r3, [r3, #0]
 810329c:	f003 0320 	and.w	r3, r3, #32
 81032a0:	2b00      	cmp	r3, #0
 81032a2:	d009      	beq.n	81032b8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81032a4:	4b91      	ldr	r3, [pc, #580]	; (81034ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 81032a6:	681b      	ldr	r3, [r3, #0]
 81032a8:	08db      	lsrs	r3, r3, #3
 81032aa:	f003 0303 	and.w	r3, r3, #3
 81032ae:	4a90      	ldr	r2, [pc, #576]	; (81034f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81032b0:	fa22 f303 	lsr.w	r3, r2, r3
 81032b4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 81032b6:	e111      	b.n	81034dc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 81032b8:	4b8d      	ldr	r3, [pc, #564]	; (81034f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81032ba:	61bb      	str	r3, [r7, #24]
    break;
 81032bc:	e10e      	b.n	81034dc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 81032be:	4b8d      	ldr	r3, [pc, #564]	; (81034f4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 81032c0:	61bb      	str	r3, [r7, #24]
    break;
 81032c2:	e10b      	b.n	81034dc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 81032c4:	4b8c      	ldr	r3, [pc, #560]	; (81034f8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 81032c6:	61bb      	str	r3, [r7, #24]
    break;
 81032c8:	e108      	b.n	81034dc <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81032ca:	4b88      	ldr	r3, [pc, #544]	; (81034ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 81032cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81032ce:	f003 0303 	and.w	r3, r3, #3
 81032d2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 81032d4:	4b85      	ldr	r3, [pc, #532]	; (81034ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 81032d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81032d8:	091b      	lsrs	r3, r3, #4
 81032da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81032de:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 81032e0:	4b82      	ldr	r3, [pc, #520]	; (81034ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 81032e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81032e4:	f003 0301 	and.w	r3, r3, #1
 81032e8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 81032ea:	4b80      	ldr	r3, [pc, #512]	; (81034ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 81032ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81032ee:	08db      	lsrs	r3, r3, #3
 81032f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81032f4:	68fa      	ldr	r2, [r7, #12]
 81032f6:	fb02 f303 	mul.w	r3, r2, r3
 81032fa:	ee07 3a90 	vmov	s15, r3
 81032fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103302:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8103306:	693b      	ldr	r3, [r7, #16]
 8103308:	2b00      	cmp	r3, #0
 810330a:	f000 80e1 	beq.w	81034d0 <HAL_RCC_GetSysClockFreq+0x2b8>
 810330e:	697b      	ldr	r3, [r7, #20]
 8103310:	2b02      	cmp	r3, #2
 8103312:	f000 8083 	beq.w	810341c <HAL_RCC_GetSysClockFreq+0x204>
 8103316:	697b      	ldr	r3, [r7, #20]
 8103318:	2b02      	cmp	r3, #2
 810331a:	f200 80a1 	bhi.w	8103460 <HAL_RCC_GetSysClockFreq+0x248>
 810331e:	697b      	ldr	r3, [r7, #20]
 8103320:	2b00      	cmp	r3, #0
 8103322:	d003      	beq.n	810332c <HAL_RCC_GetSysClockFreq+0x114>
 8103324:	697b      	ldr	r3, [r7, #20]
 8103326:	2b01      	cmp	r3, #1
 8103328:	d056      	beq.n	81033d8 <HAL_RCC_GetSysClockFreq+0x1c0>
 810332a:	e099      	b.n	8103460 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810332c:	4b6f      	ldr	r3, [pc, #444]	; (81034ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 810332e:	681b      	ldr	r3, [r3, #0]
 8103330:	f003 0320 	and.w	r3, r3, #32
 8103334:	2b00      	cmp	r3, #0
 8103336:	d02d      	beq.n	8103394 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8103338:	4b6c      	ldr	r3, [pc, #432]	; (81034ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 810333a:	681b      	ldr	r3, [r3, #0]
 810333c:	08db      	lsrs	r3, r3, #3
 810333e:	f003 0303 	and.w	r3, r3, #3
 8103342:	4a6b      	ldr	r2, [pc, #428]	; (81034f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8103344:	fa22 f303 	lsr.w	r3, r2, r3
 8103348:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810334a:	687b      	ldr	r3, [r7, #4]
 810334c:	ee07 3a90 	vmov	s15, r3
 8103350:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103354:	693b      	ldr	r3, [r7, #16]
 8103356:	ee07 3a90 	vmov	s15, r3
 810335a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810335e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103362:	4b62      	ldr	r3, [pc, #392]	; (81034ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103366:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810336a:	ee07 3a90 	vmov	s15, r3
 810336e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103372:	ed97 6a02 	vldr	s12, [r7, #8]
 8103376:	eddf 5a61 	vldr	s11, [pc, #388]	; 81034fc <HAL_RCC_GetSysClockFreq+0x2e4>
 810337a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810337e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103382:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103386:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810338a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810338e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8103392:	e087      	b.n	81034a4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8103394:	693b      	ldr	r3, [r7, #16]
 8103396:	ee07 3a90 	vmov	s15, r3
 810339a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810339e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8103500 <HAL_RCC_GetSysClockFreq+0x2e8>
 81033a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81033a6:	4b51      	ldr	r3, [pc, #324]	; (81034ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 81033a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81033aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81033ae:	ee07 3a90 	vmov	s15, r3
 81033b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81033b6:	ed97 6a02 	vldr	s12, [r7, #8]
 81033ba:	eddf 5a50 	vldr	s11, [pc, #320]	; 81034fc <HAL_RCC_GetSysClockFreq+0x2e4>
 81033be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81033c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81033c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81033ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81033ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 81033d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81033d6:	e065      	b.n	81034a4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81033d8:	693b      	ldr	r3, [r7, #16]
 81033da:	ee07 3a90 	vmov	s15, r3
 81033de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81033e2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8103504 <HAL_RCC_GetSysClockFreq+0x2ec>
 81033e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81033ea:	4b40      	ldr	r3, [pc, #256]	; (81034ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 81033ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81033ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81033f2:	ee07 3a90 	vmov	s15, r3
 81033f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81033fa:	ed97 6a02 	vldr	s12, [r7, #8]
 81033fe:	eddf 5a3f 	vldr	s11, [pc, #252]	; 81034fc <HAL_RCC_GetSysClockFreq+0x2e4>
 8103402:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103406:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810340a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810340e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103412:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103416:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810341a:	e043      	b.n	81034a4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810341c:	693b      	ldr	r3, [r7, #16]
 810341e:	ee07 3a90 	vmov	s15, r3
 8103422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103426:	eddf 6a38 	vldr	s13, [pc, #224]	; 8103508 <HAL_RCC_GetSysClockFreq+0x2f0>
 810342a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810342e:	4b2f      	ldr	r3, [pc, #188]	; (81034ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103432:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103436:	ee07 3a90 	vmov	s15, r3
 810343a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810343e:	ed97 6a02 	vldr	s12, [r7, #8]
 8103442:	eddf 5a2e 	vldr	s11, [pc, #184]	; 81034fc <HAL_RCC_GetSysClockFreq+0x2e4>
 8103446:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810344a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810344e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103452:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103456:	ee67 7a27 	vmul.f32	s15, s14, s15
 810345a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810345e:	e021      	b.n	81034a4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8103460:	693b      	ldr	r3, [r7, #16]
 8103462:	ee07 3a90 	vmov	s15, r3
 8103466:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810346a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8103504 <HAL_RCC_GetSysClockFreq+0x2ec>
 810346e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103472:	4b1e      	ldr	r3, [pc, #120]	; (81034ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103476:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810347a:	ee07 3a90 	vmov	s15, r3
 810347e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103482:	ed97 6a02 	vldr	s12, [r7, #8]
 8103486:	eddf 5a1d 	vldr	s11, [pc, #116]	; 81034fc <HAL_RCC_GetSysClockFreq+0x2e4>
 810348a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810348e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103492:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103496:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810349a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810349e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81034a2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 81034a4:	4b11      	ldr	r3, [pc, #68]	; (81034ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 81034a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81034a8:	0a5b      	lsrs	r3, r3, #9
 81034aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81034ae:	3301      	adds	r3, #1
 81034b0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 81034b2:	683b      	ldr	r3, [r7, #0]
 81034b4:	ee07 3a90 	vmov	s15, r3
 81034b8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 81034bc:	edd7 6a07 	vldr	s13, [r7, #28]
 81034c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81034c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81034c8:	ee17 3a90 	vmov	r3, s15
 81034cc:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 81034ce:	e005      	b.n	81034dc <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 81034d0:	2300      	movs	r3, #0
 81034d2:	61bb      	str	r3, [r7, #24]
    break;
 81034d4:	e002      	b.n	81034dc <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 81034d6:	4b07      	ldr	r3, [pc, #28]	; (81034f4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 81034d8:	61bb      	str	r3, [r7, #24]
    break;
 81034da:	bf00      	nop
  }

  return sysclockfreq;
 81034dc:	69bb      	ldr	r3, [r7, #24]
}
 81034de:	4618      	mov	r0, r3
 81034e0:	3724      	adds	r7, #36	; 0x24
 81034e2:	46bd      	mov	sp, r7
 81034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81034e8:	4770      	bx	lr
 81034ea:	bf00      	nop
 81034ec:	58024400 	.word	0x58024400
 81034f0:	03d09000 	.word	0x03d09000
 81034f4:	003d0900 	.word	0x003d0900
 81034f8:	007a1200 	.word	0x007a1200
 81034fc:	46000000 	.word	0x46000000
 8103500:	4c742400 	.word	0x4c742400
 8103504:	4a742400 	.word	0x4a742400
 8103508:	4af42400 	.word	0x4af42400

0810350c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 810350c:	b580      	push	{r7, lr}
 810350e:	b086      	sub	sp, #24
 8103510:	af00      	add	r7, sp, #0
 8103512:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8103514:	2300      	movs	r3, #0
 8103516:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8103518:	2300      	movs	r3, #0
 810351a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 810351c:	687b      	ldr	r3, [r7, #4]
 810351e:	681b      	ldr	r3, [r3, #0]
 8103520:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8103524:	2b00      	cmp	r3, #0
 8103526:	d03f      	beq.n	81035a8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8103528:	687b      	ldr	r3, [r7, #4]
 810352a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810352c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8103530:	d02a      	beq.n	8103588 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8103532:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8103536:	d824      	bhi.n	8103582 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8103538:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 810353c:	d018      	beq.n	8103570 <HAL_RCCEx_PeriphCLKConfig+0x64>
 810353e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8103542:	d81e      	bhi.n	8103582 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8103544:	2b00      	cmp	r3, #0
 8103546:	d003      	beq.n	8103550 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8103548:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810354c:	d007      	beq.n	810355e <HAL_RCCEx_PeriphCLKConfig+0x52>
 810354e:	e018      	b.n	8103582 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103550:	4ba3      	ldr	r3, [pc, #652]	; (81037e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103554:	4aa2      	ldr	r2, [pc, #648]	; (81037e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103556:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810355a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 810355c:	e015      	b.n	810358a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 810355e:	687b      	ldr	r3, [r7, #4]
 8103560:	3304      	adds	r3, #4
 8103562:	2102      	movs	r1, #2
 8103564:	4618      	mov	r0, r3
 8103566:	f000 ff17 	bl	8104398 <RCCEx_PLL2_Config>
 810356a:	4603      	mov	r3, r0
 810356c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 810356e:	e00c      	b.n	810358a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8103570:	687b      	ldr	r3, [r7, #4]
 8103572:	3324      	adds	r3, #36	; 0x24
 8103574:	2102      	movs	r1, #2
 8103576:	4618      	mov	r0, r3
 8103578:	f000 ffc0 	bl	81044fc <RCCEx_PLL3_Config>
 810357c:	4603      	mov	r3, r0
 810357e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8103580:	e003      	b.n	810358a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103582:	2301      	movs	r3, #1
 8103584:	75fb      	strb	r3, [r7, #23]
      break;
 8103586:	e000      	b.n	810358a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8103588:	bf00      	nop
    }

    if(ret == HAL_OK)
 810358a:	7dfb      	ldrb	r3, [r7, #23]
 810358c:	2b00      	cmp	r3, #0
 810358e:	d109      	bne.n	81035a4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8103590:	4b93      	ldr	r3, [pc, #588]	; (81037e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103592:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103594:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8103598:	687b      	ldr	r3, [r7, #4]
 810359a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810359c:	4990      	ldr	r1, [pc, #576]	; (81037e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 810359e:	4313      	orrs	r3, r2
 81035a0:	650b      	str	r3, [r1, #80]	; 0x50
 81035a2:	e001      	b.n	81035a8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81035a4:	7dfb      	ldrb	r3, [r7, #23]
 81035a6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 81035a8:	687b      	ldr	r3, [r7, #4]
 81035aa:	681b      	ldr	r3, [r3, #0]
 81035ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81035b0:	2b00      	cmp	r3, #0
 81035b2:	d03d      	beq.n	8103630 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 81035b4:	687b      	ldr	r3, [r7, #4]
 81035b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81035b8:	2b04      	cmp	r3, #4
 81035ba:	d826      	bhi.n	810360a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 81035bc:	a201      	add	r2, pc, #4	; (adr r2, 81035c4 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 81035be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81035c2:	bf00      	nop
 81035c4:	081035d9 	.word	0x081035d9
 81035c8:	081035e7 	.word	0x081035e7
 81035cc:	081035f9 	.word	0x081035f9
 81035d0:	08103611 	.word	0x08103611
 81035d4:	08103611 	.word	0x08103611
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81035d8:	4b81      	ldr	r3, [pc, #516]	; (81037e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81035da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81035dc:	4a80      	ldr	r2, [pc, #512]	; (81037e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81035de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81035e2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81035e4:	e015      	b.n	8103612 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81035e6:	687b      	ldr	r3, [r7, #4]
 81035e8:	3304      	adds	r3, #4
 81035ea:	2100      	movs	r1, #0
 81035ec:	4618      	mov	r0, r3
 81035ee:	f000 fed3 	bl	8104398 <RCCEx_PLL2_Config>
 81035f2:	4603      	mov	r3, r0
 81035f4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81035f6:	e00c      	b.n	8103612 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 81035f8:	687b      	ldr	r3, [r7, #4]
 81035fa:	3324      	adds	r3, #36	; 0x24
 81035fc:	2100      	movs	r1, #0
 81035fe:	4618      	mov	r0, r3
 8103600:	f000 ff7c 	bl	81044fc <RCCEx_PLL3_Config>
 8103604:	4603      	mov	r3, r0
 8103606:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8103608:	e003      	b.n	8103612 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810360a:	2301      	movs	r3, #1
 810360c:	75fb      	strb	r3, [r7, #23]
      break;
 810360e:	e000      	b.n	8103612 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8103610:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103612:	7dfb      	ldrb	r3, [r7, #23]
 8103614:	2b00      	cmp	r3, #0
 8103616:	d109      	bne.n	810362c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8103618:	4b71      	ldr	r3, [pc, #452]	; (81037e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 810361a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810361c:	f023 0207 	bic.w	r2, r3, #7
 8103620:	687b      	ldr	r3, [r7, #4]
 8103622:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103624:	496e      	ldr	r1, [pc, #440]	; (81037e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103626:	4313      	orrs	r3, r2
 8103628:	650b      	str	r3, [r1, #80]	; 0x50
 810362a:	e001      	b.n	8103630 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810362c:	7dfb      	ldrb	r3, [r7, #23]
 810362e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8103630:	687b      	ldr	r3, [r7, #4]
 8103632:	681b      	ldr	r3, [r3, #0]
 8103634:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8103638:	2b00      	cmp	r3, #0
 810363a:	d042      	beq.n	81036c2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 810363c:	687b      	ldr	r3, [r7, #4]
 810363e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103640:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8103644:	d02b      	beq.n	810369e <HAL_RCCEx_PeriphCLKConfig+0x192>
 8103646:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810364a:	d825      	bhi.n	8103698 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 810364c:	2bc0      	cmp	r3, #192	; 0xc0
 810364e:	d028      	beq.n	81036a2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8103650:	2bc0      	cmp	r3, #192	; 0xc0
 8103652:	d821      	bhi.n	8103698 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8103654:	2b80      	cmp	r3, #128	; 0x80
 8103656:	d016      	beq.n	8103686 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8103658:	2b80      	cmp	r3, #128	; 0x80
 810365a:	d81d      	bhi.n	8103698 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 810365c:	2b00      	cmp	r3, #0
 810365e:	d002      	beq.n	8103666 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8103660:	2b40      	cmp	r3, #64	; 0x40
 8103662:	d007      	beq.n	8103674 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8103664:	e018      	b.n	8103698 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103666:	4b5e      	ldr	r3, [pc, #376]	; (81037e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810366a:	4a5d      	ldr	r2, [pc, #372]	; (81037e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 810366c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103670:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8103672:	e017      	b.n	81036a4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103674:	687b      	ldr	r3, [r7, #4]
 8103676:	3304      	adds	r3, #4
 8103678:	2100      	movs	r1, #0
 810367a:	4618      	mov	r0, r3
 810367c:	f000 fe8c 	bl	8104398 <RCCEx_PLL2_Config>
 8103680:	4603      	mov	r3, r0
 8103682:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8103684:	e00e      	b.n	81036a4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8103686:	687b      	ldr	r3, [r7, #4]
 8103688:	3324      	adds	r3, #36	; 0x24
 810368a:	2100      	movs	r1, #0
 810368c:	4618      	mov	r0, r3
 810368e:	f000 ff35 	bl	81044fc <RCCEx_PLL3_Config>
 8103692:	4603      	mov	r3, r0
 8103694:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8103696:	e005      	b.n	81036a4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103698:	2301      	movs	r3, #1
 810369a:	75fb      	strb	r3, [r7, #23]
      break;
 810369c:	e002      	b.n	81036a4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 810369e:	bf00      	nop
 81036a0:	e000      	b.n	81036a4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 81036a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 81036a4:	7dfb      	ldrb	r3, [r7, #23]
 81036a6:	2b00      	cmp	r3, #0
 81036a8:	d109      	bne.n	81036be <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 81036aa:	4b4d      	ldr	r3, [pc, #308]	; (81037e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81036ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81036ae:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 81036b2:	687b      	ldr	r3, [r7, #4]
 81036b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81036b6:	494a      	ldr	r1, [pc, #296]	; (81037e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81036b8:	4313      	orrs	r3, r2
 81036ba:	650b      	str	r3, [r1, #80]	; 0x50
 81036bc:	e001      	b.n	81036c2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81036be:	7dfb      	ldrb	r3, [r7, #23]
 81036c0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 81036c2:	687b      	ldr	r3, [r7, #4]
 81036c4:	681b      	ldr	r3, [r3, #0]
 81036c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 81036ca:	2b00      	cmp	r3, #0
 81036cc:	d049      	beq.n	8103762 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 81036ce:	687b      	ldr	r3, [r7, #4]
 81036d0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 81036d4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 81036d8:	d030      	beq.n	810373c <HAL_RCCEx_PeriphCLKConfig+0x230>
 81036da:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 81036de:	d82a      	bhi.n	8103736 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 81036e0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 81036e4:	d02c      	beq.n	8103740 <HAL_RCCEx_PeriphCLKConfig+0x234>
 81036e6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 81036ea:	d824      	bhi.n	8103736 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 81036ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 81036f0:	d018      	beq.n	8103724 <HAL_RCCEx_PeriphCLKConfig+0x218>
 81036f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 81036f6:	d81e      	bhi.n	8103736 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 81036f8:	2b00      	cmp	r3, #0
 81036fa:	d003      	beq.n	8103704 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 81036fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8103700:	d007      	beq.n	8103712 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8103702:	e018      	b.n	8103736 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103704:	4b36      	ldr	r3, [pc, #216]	; (81037e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103708:	4a35      	ldr	r2, [pc, #212]	; (81037e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 810370a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810370e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8103710:	e017      	b.n	8103742 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103712:	687b      	ldr	r3, [r7, #4]
 8103714:	3304      	adds	r3, #4
 8103716:	2100      	movs	r1, #0
 8103718:	4618      	mov	r0, r3
 810371a:	f000 fe3d 	bl	8104398 <RCCEx_PLL2_Config>
 810371e:	4603      	mov	r3, r0
 8103720:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8103722:	e00e      	b.n	8103742 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8103724:	687b      	ldr	r3, [r7, #4]
 8103726:	3324      	adds	r3, #36	; 0x24
 8103728:	2100      	movs	r1, #0
 810372a:	4618      	mov	r0, r3
 810372c:	f000 fee6 	bl	81044fc <RCCEx_PLL3_Config>
 8103730:	4603      	mov	r3, r0
 8103732:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8103734:	e005      	b.n	8103742 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8103736:	2301      	movs	r3, #1
 8103738:	75fb      	strb	r3, [r7, #23]
      break;
 810373a:	e002      	b.n	8103742 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 810373c:	bf00      	nop
 810373e:	e000      	b.n	8103742 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8103740:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103742:	7dfb      	ldrb	r3, [r7, #23]
 8103744:	2b00      	cmp	r3, #0
 8103746:	d10a      	bne.n	810375e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8103748:	4b25      	ldr	r3, [pc, #148]	; (81037e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 810374a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810374c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8103750:	687b      	ldr	r3, [r7, #4]
 8103752:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8103756:	4922      	ldr	r1, [pc, #136]	; (81037e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103758:	4313      	orrs	r3, r2
 810375a:	658b      	str	r3, [r1, #88]	; 0x58
 810375c:	e001      	b.n	8103762 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810375e:	7dfb      	ldrb	r3, [r7, #23]
 8103760:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8103762:	687b      	ldr	r3, [r7, #4]
 8103764:	681b      	ldr	r3, [r3, #0]
 8103766:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 810376a:	2b00      	cmp	r3, #0
 810376c:	d04b      	beq.n	8103806 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 810376e:	687b      	ldr	r3, [r7, #4]
 8103770:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8103774:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8103778:	d030      	beq.n	81037dc <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 810377a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 810377e:	d82a      	bhi.n	81037d6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8103780:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8103784:	d02e      	beq.n	81037e4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8103786:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 810378a:	d824      	bhi.n	81037d6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 810378c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8103790:	d018      	beq.n	81037c4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8103792:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8103796:	d81e      	bhi.n	81037d6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8103798:	2b00      	cmp	r3, #0
 810379a:	d003      	beq.n	81037a4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 810379c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 81037a0:	d007      	beq.n	81037b2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 81037a2:	e018      	b.n	81037d6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81037a4:	4b0e      	ldr	r3, [pc, #56]	; (81037e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81037a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81037a8:	4a0d      	ldr	r2, [pc, #52]	; (81037e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81037aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81037ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81037b0:	e019      	b.n	81037e6 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81037b2:	687b      	ldr	r3, [r7, #4]
 81037b4:	3304      	adds	r3, #4
 81037b6:	2100      	movs	r1, #0
 81037b8:	4618      	mov	r0, r3
 81037ba:	f000 fded 	bl	8104398 <RCCEx_PLL2_Config>
 81037be:	4603      	mov	r3, r0
 81037c0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 81037c2:	e010      	b.n	81037e6 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81037c4:	687b      	ldr	r3, [r7, #4]
 81037c6:	3324      	adds	r3, #36	; 0x24
 81037c8:	2100      	movs	r1, #0
 81037ca:	4618      	mov	r0, r3
 81037cc:	f000 fe96 	bl	81044fc <RCCEx_PLL3_Config>
 81037d0:	4603      	mov	r3, r0
 81037d2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81037d4:	e007      	b.n	81037e6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 81037d6:	2301      	movs	r3, #1
 81037d8:	75fb      	strb	r3, [r7, #23]
      break;
 81037da:	e004      	b.n	81037e6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 81037dc:	bf00      	nop
 81037de:	e002      	b.n	81037e6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 81037e0:	58024400 	.word	0x58024400
      break;
 81037e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 81037e6:	7dfb      	ldrb	r3, [r7, #23]
 81037e8:	2b00      	cmp	r3, #0
 81037ea:	d10a      	bne.n	8103802 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 81037ec:	4b99      	ldr	r3, [pc, #612]	; (8103a54 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 81037ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81037f0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 81037f4:	687b      	ldr	r3, [r7, #4]
 81037f6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 81037fa:	4996      	ldr	r1, [pc, #600]	; (8103a54 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 81037fc:	4313      	orrs	r3, r2
 81037fe:	658b      	str	r3, [r1, #88]	; 0x58
 8103800:	e001      	b.n	8103806 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103802:	7dfb      	ldrb	r3, [r7, #23]
 8103804:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8103806:	687b      	ldr	r3, [r7, #4]
 8103808:	681b      	ldr	r3, [r3, #0]
 810380a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810380e:	2b00      	cmp	r3, #0
 8103810:	d032      	beq.n	8103878 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8103812:	687b      	ldr	r3, [r7, #4]
 8103814:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8103816:	2b30      	cmp	r3, #48	; 0x30
 8103818:	d01c      	beq.n	8103854 <HAL_RCCEx_PeriphCLKConfig+0x348>
 810381a:	2b30      	cmp	r3, #48	; 0x30
 810381c:	d817      	bhi.n	810384e <HAL_RCCEx_PeriphCLKConfig+0x342>
 810381e:	2b20      	cmp	r3, #32
 8103820:	d00c      	beq.n	810383c <HAL_RCCEx_PeriphCLKConfig+0x330>
 8103822:	2b20      	cmp	r3, #32
 8103824:	d813      	bhi.n	810384e <HAL_RCCEx_PeriphCLKConfig+0x342>
 8103826:	2b00      	cmp	r3, #0
 8103828:	d016      	beq.n	8103858 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 810382a:	2b10      	cmp	r3, #16
 810382c:	d10f      	bne.n	810384e <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810382e:	4b89      	ldr	r3, [pc, #548]	; (8103a54 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103832:	4a88      	ldr	r2, [pc, #544]	; (8103a54 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103834:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103838:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 810383a:	e00e      	b.n	810385a <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 810383c:	687b      	ldr	r3, [r7, #4]
 810383e:	3304      	adds	r3, #4
 8103840:	2102      	movs	r1, #2
 8103842:	4618      	mov	r0, r3
 8103844:	f000 fda8 	bl	8104398 <RCCEx_PLL2_Config>
 8103848:	4603      	mov	r3, r0
 810384a:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 810384c:	e005      	b.n	810385a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 810384e:	2301      	movs	r3, #1
 8103850:	75fb      	strb	r3, [r7, #23]
      break;
 8103852:	e002      	b.n	810385a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8103854:	bf00      	nop
 8103856:	e000      	b.n	810385a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8103858:	bf00      	nop
    }

    if(ret == HAL_OK)
 810385a:	7dfb      	ldrb	r3, [r7, #23]
 810385c:	2b00      	cmp	r3, #0
 810385e:	d109      	bne.n	8103874 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8103860:	4b7c      	ldr	r3, [pc, #496]	; (8103a54 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103862:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103864:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8103868:	687b      	ldr	r3, [r7, #4]
 810386a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810386c:	4979      	ldr	r1, [pc, #484]	; (8103a54 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 810386e:	4313      	orrs	r3, r2
 8103870:	64cb      	str	r3, [r1, #76]	; 0x4c
 8103872:	e001      	b.n	8103878 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103874:	7dfb      	ldrb	r3, [r7, #23]
 8103876:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8103878:	687b      	ldr	r3, [r7, #4]
 810387a:	681b      	ldr	r3, [r3, #0]
 810387c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8103880:	2b00      	cmp	r3, #0
 8103882:	d047      	beq.n	8103914 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8103884:	687b      	ldr	r3, [r7, #4]
 8103886:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103888:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810388c:	d030      	beq.n	81038f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 810388e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8103892:	d82a      	bhi.n	81038ea <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8103894:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8103898:	d02c      	beq.n	81038f4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 810389a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 810389e:	d824      	bhi.n	81038ea <HAL_RCCEx_PeriphCLKConfig+0x3de>
 81038a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81038a4:	d018      	beq.n	81038d8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 81038a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81038aa:	d81e      	bhi.n	81038ea <HAL_RCCEx_PeriphCLKConfig+0x3de>
 81038ac:	2b00      	cmp	r3, #0
 81038ae:	d003      	beq.n	81038b8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 81038b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81038b4:	d007      	beq.n	81038c6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 81038b6:	e018      	b.n	81038ea <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81038b8:	4b66      	ldr	r3, [pc, #408]	; (8103a54 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 81038ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81038bc:	4a65      	ldr	r2, [pc, #404]	; (8103a54 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 81038be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81038c2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 81038c4:	e017      	b.n	81038f6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81038c6:	687b      	ldr	r3, [r7, #4]
 81038c8:	3304      	adds	r3, #4
 81038ca:	2100      	movs	r1, #0
 81038cc:	4618      	mov	r0, r3
 81038ce:	f000 fd63 	bl	8104398 <RCCEx_PLL2_Config>
 81038d2:	4603      	mov	r3, r0
 81038d4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 81038d6:	e00e      	b.n	81038f6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 81038d8:	687b      	ldr	r3, [r7, #4]
 81038da:	3324      	adds	r3, #36	; 0x24
 81038dc:	2100      	movs	r1, #0
 81038de:	4618      	mov	r0, r3
 81038e0:	f000 fe0c 	bl	81044fc <RCCEx_PLL3_Config>
 81038e4:	4603      	mov	r3, r0
 81038e6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 81038e8:	e005      	b.n	81038f6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81038ea:	2301      	movs	r3, #1
 81038ec:	75fb      	strb	r3, [r7, #23]
      break;
 81038ee:	e002      	b.n	81038f6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 81038f0:	bf00      	nop
 81038f2:	e000      	b.n	81038f6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 81038f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 81038f6:	7dfb      	ldrb	r3, [r7, #23]
 81038f8:	2b00      	cmp	r3, #0
 81038fa:	d109      	bne.n	8103910 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 81038fc:	4b55      	ldr	r3, [pc, #340]	; (8103a54 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 81038fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103900:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8103904:	687b      	ldr	r3, [r7, #4]
 8103906:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103908:	4952      	ldr	r1, [pc, #328]	; (8103a54 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 810390a:	4313      	orrs	r3, r2
 810390c:	650b      	str	r3, [r1, #80]	; 0x50
 810390e:	e001      	b.n	8103914 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103910:	7dfb      	ldrb	r3, [r7, #23]
 8103912:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8103914:	687b      	ldr	r3, [r7, #4]
 8103916:	681b      	ldr	r3, [r3, #0]
 8103918:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 810391c:	2b00      	cmp	r3, #0
 810391e:	d049      	beq.n	81039b4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8103920:	687b      	ldr	r3, [r7, #4]
 8103922:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8103924:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8103928:	d02e      	beq.n	8103988 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 810392a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 810392e:	d828      	bhi.n	8103982 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8103930:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8103934:	d02a      	beq.n	810398c <HAL_RCCEx_PeriphCLKConfig+0x480>
 8103936:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 810393a:	d822      	bhi.n	8103982 <HAL_RCCEx_PeriphCLKConfig+0x476>
 810393c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8103940:	d026      	beq.n	8103990 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8103942:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8103946:	d81c      	bhi.n	8103982 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8103948:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810394c:	d010      	beq.n	8103970 <HAL_RCCEx_PeriphCLKConfig+0x464>
 810394e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8103952:	d816      	bhi.n	8103982 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8103954:	2b00      	cmp	r3, #0
 8103956:	d01d      	beq.n	8103994 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8103958:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810395c:	d111      	bne.n	8103982 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 810395e:	687b      	ldr	r3, [r7, #4]
 8103960:	3304      	adds	r3, #4
 8103962:	2101      	movs	r1, #1
 8103964:	4618      	mov	r0, r3
 8103966:	f000 fd17 	bl	8104398 <RCCEx_PLL2_Config>
 810396a:	4603      	mov	r3, r0
 810396c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 810396e:	e012      	b.n	8103996 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8103970:	687b      	ldr	r3, [r7, #4]
 8103972:	3324      	adds	r3, #36	; 0x24
 8103974:	2101      	movs	r1, #1
 8103976:	4618      	mov	r0, r3
 8103978:	f000 fdc0 	bl	81044fc <RCCEx_PLL3_Config>
 810397c:	4603      	mov	r3, r0
 810397e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8103980:	e009      	b.n	8103996 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103982:	2301      	movs	r3, #1
 8103984:	75fb      	strb	r3, [r7, #23]
      break;
 8103986:	e006      	b.n	8103996 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8103988:	bf00      	nop
 810398a:	e004      	b.n	8103996 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 810398c:	bf00      	nop
 810398e:	e002      	b.n	8103996 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8103990:	bf00      	nop
 8103992:	e000      	b.n	8103996 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8103994:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103996:	7dfb      	ldrb	r3, [r7, #23]
 8103998:	2b00      	cmp	r3, #0
 810399a:	d109      	bne.n	81039b0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 810399c:	4b2d      	ldr	r3, [pc, #180]	; (8103a54 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 810399e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81039a0:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 81039a4:	687b      	ldr	r3, [r7, #4]
 81039a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81039a8:	492a      	ldr	r1, [pc, #168]	; (8103a54 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 81039aa:	4313      	orrs	r3, r2
 81039ac:	650b      	str	r3, [r1, #80]	; 0x50
 81039ae:	e001      	b.n	81039b4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81039b0:	7dfb      	ldrb	r3, [r7, #23]
 81039b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 81039b4:	687b      	ldr	r3, [r7, #4]
 81039b6:	681b      	ldr	r3, [r3, #0]
 81039b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 81039bc:	2b00      	cmp	r3, #0
 81039be:	d04d      	beq.n	8103a5c <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 81039c0:	687b      	ldr	r3, [r7, #4]
 81039c2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 81039c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81039ca:	d02e      	beq.n	8103a2a <HAL_RCCEx_PeriphCLKConfig+0x51e>
 81039cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81039d0:	d828      	bhi.n	8103a24 <HAL_RCCEx_PeriphCLKConfig+0x518>
 81039d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81039d6:	d02a      	beq.n	8103a2e <HAL_RCCEx_PeriphCLKConfig+0x522>
 81039d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81039dc:	d822      	bhi.n	8103a24 <HAL_RCCEx_PeriphCLKConfig+0x518>
 81039de:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81039e2:	d026      	beq.n	8103a32 <HAL_RCCEx_PeriphCLKConfig+0x526>
 81039e4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81039e8:	d81c      	bhi.n	8103a24 <HAL_RCCEx_PeriphCLKConfig+0x518>
 81039ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81039ee:	d010      	beq.n	8103a12 <HAL_RCCEx_PeriphCLKConfig+0x506>
 81039f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81039f4:	d816      	bhi.n	8103a24 <HAL_RCCEx_PeriphCLKConfig+0x518>
 81039f6:	2b00      	cmp	r3, #0
 81039f8:	d01d      	beq.n	8103a36 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 81039fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81039fe:	d111      	bne.n	8103a24 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8103a00:	687b      	ldr	r3, [r7, #4]
 8103a02:	3304      	adds	r3, #4
 8103a04:	2101      	movs	r1, #1
 8103a06:	4618      	mov	r0, r3
 8103a08:	f000 fcc6 	bl	8104398 <RCCEx_PLL2_Config>
 8103a0c:	4603      	mov	r3, r0
 8103a0e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8103a10:	e012      	b.n	8103a38 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8103a12:	687b      	ldr	r3, [r7, #4]
 8103a14:	3324      	adds	r3, #36	; 0x24
 8103a16:	2101      	movs	r1, #1
 8103a18:	4618      	mov	r0, r3
 8103a1a:	f000 fd6f 	bl	81044fc <RCCEx_PLL3_Config>
 8103a1e:	4603      	mov	r3, r0
 8103a20:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8103a22:	e009      	b.n	8103a38 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8103a24:	2301      	movs	r3, #1
 8103a26:	75fb      	strb	r3, [r7, #23]
      break;
 8103a28:	e006      	b.n	8103a38 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8103a2a:	bf00      	nop
 8103a2c:	e004      	b.n	8103a38 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8103a2e:	bf00      	nop
 8103a30:	e002      	b.n	8103a38 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8103a32:	bf00      	nop
 8103a34:	e000      	b.n	8103a38 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8103a36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103a38:	7dfb      	ldrb	r3, [r7, #23]
 8103a3a:	2b00      	cmp	r3, #0
 8103a3c:	d10c      	bne.n	8103a58 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8103a3e:	4b05      	ldr	r3, [pc, #20]	; (8103a54 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103a42:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8103a46:	687b      	ldr	r3, [r7, #4]
 8103a48:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8103a4c:	4901      	ldr	r1, [pc, #4]	; (8103a54 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103a4e:	4313      	orrs	r3, r2
 8103a50:	658b      	str	r3, [r1, #88]	; 0x58
 8103a52:	e003      	b.n	8103a5c <HAL_RCCEx_PeriphCLKConfig+0x550>
 8103a54:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103a58:	7dfb      	ldrb	r3, [r7, #23]
 8103a5a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8103a5c:	687b      	ldr	r3, [r7, #4]
 8103a5e:	681b      	ldr	r3, [r3, #0]
 8103a60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8103a64:	2b00      	cmp	r3, #0
 8103a66:	d02f      	beq.n	8103ac8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8103a68:	687b      	ldr	r3, [r7, #4]
 8103a6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8103a6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103a70:	d00e      	beq.n	8103a90 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8103a72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103a76:	d814      	bhi.n	8103aa2 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8103a78:	2b00      	cmp	r3, #0
 8103a7a:	d015      	beq.n	8103aa8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8103a7c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8103a80:	d10f      	bne.n	8103aa2 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103a82:	4bb0      	ldr	r3, [pc, #704]	; (8103d44 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103a86:	4aaf      	ldr	r2, [pc, #700]	; (8103d44 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103a88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103a8c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8103a8e:	e00c      	b.n	8103aaa <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8103a90:	687b      	ldr	r3, [r7, #4]
 8103a92:	3304      	adds	r3, #4
 8103a94:	2101      	movs	r1, #1
 8103a96:	4618      	mov	r0, r3
 8103a98:	f000 fc7e 	bl	8104398 <RCCEx_PLL2_Config>
 8103a9c:	4603      	mov	r3, r0
 8103a9e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8103aa0:	e003      	b.n	8103aaa <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103aa2:	2301      	movs	r3, #1
 8103aa4:	75fb      	strb	r3, [r7, #23]
      break;
 8103aa6:	e000      	b.n	8103aaa <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8103aa8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103aaa:	7dfb      	ldrb	r3, [r7, #23]
 8103aac:	2b00      	cmp	r3, #0
 8103aae:	d109      	bne.n	8103ac4 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8103ab0:	4ba4      	ldr	r3, [pc, #656]	; (8103d44 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103ab2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103ab4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8103ab8:	687b      	ldr	r3, [r7, #4]
 8103aba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8103abc:	49a1      	ldr	r1, [pc, #644]	; (8103d44 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103abe:	4313      	orrs	r3, r2
 8103ac0:	650b      	str	r3, [r1, #80]	; 0x50
 8103ac2:	e001      	b.n	8103ac8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103ac4:	7dfb      	ldrb	r3, [r7, #23]
 8103ac6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8103ac8:	687b      	ldr	r3, [r7, #4]
 8103aca:	681b      	ldr	r3, [r3, #0]
 8103acc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8103ad0:	2b00      	cmp	r3, #0
 8103ad2:	d032      	beq.n	8103b3a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8103ad4:	687b      	ldr	r3, [r7, #4]
 8103ad6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103ad8:	2b03      	cmp	r3, #3
 8103ada:	d81b      	bhi.n	8103b14 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8103adc:	a201      	add	r2, pc, #4	; (adr r2, 8103ae4 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8103ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103ae2:	bf00      	nop
 8103ae4:	08103b1b 	.word	0x08103b1b
 8103ae8:	08103af5 	.word	0x08103af5
 8103aec:	08103b03 	.word	0x08103b03
 8103af0:	08103b1b 	.word	0x08103b1b
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103af4:	4b93      	ldr	r3, [pc, #588]	; (8103d44 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103af8:	4a92      	ldr	r2, [pc, #584]	; (8103d44 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103afa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103afe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8103b00:	e00c      	b.n	8103b1c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8103b02:	687b      	ldr	r3, [r7, #4]
 8103b04:	3304      	adds	r3, #4
 8103b06:	2102      	movs	r1, #2
 8103b08:	4618      	mov	r0, r3
 8103b0a:	f000 fc45 	bl	8104398 <RCCEx_PLL2_Config>
 8103b0e:	4603      	mov	r3, r0
 8103b10:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8103b12:	e003      	b.n	8103b1c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8103b14:	2301      	movs	r3, #1
 8103b16:	75fb      	strb	r3, [r7, #23]
      break;
 8103b18:	e000      	b.n	8103b1c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8103b1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103b1c:	7dfb      	ldrb	r3, [r7, #23]
 8103b1e:	2b00      	cmp	r3, #0
 8103b20:	d109      	bne.n	8103b36 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8103b22:	4b88      	ldr	r3, [pc, #544]	; (8103d44 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103b26:	f023 0203 	bic.w	r2, r3, #3
 8103b2a:	687b      	ldr	r3, [r7, #4]
 8103b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103b2e:	4985      	ldr	r1, [pc, #532]	; (8103d44 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103b30:	4313      	orrs	r3, r2
 8103b32:	64cb      	str	r3, [r1, #76]	; 0x4c
 8103b34:	e001      	b.n	8103b3a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103b36:	7dfb      	ldrb	r3, [r7, #23]
 8103b38:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8103b3a:	687b      	ldr	r3, [r7, #4]
 8103b3c:	681b      	ldr	r3, [r3, #0]
 8103b3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8103b42:	2b00      	cmp	r3, #0
 8103b44:	f000 8088 	beq.w	8103c58 <HAL_RCCEx_PeriphCLKConfig+0x74c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8103b48:	4b7f      	ldr	r3, [pc, #508]	; (8103d48 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8103b4a:	681b      	ldr	r3, [r3, #0]
 8103b4c:	4a7e      	ldr	r2, [pc, #504]	; (8103d48 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8103b4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8103b52:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8103b54:	f7fe f82a 	bl	8101bac <HAL_GetTick>
 8103b58:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8103b5a:	e009      	b.n	8103b70 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8103b5c:	f7fe f826 	bl	8101bac <HAL_GetTick>
 8103b60:	4602      	mov	r2, r0
 8103b62:	693b      	ldr	r3, [r7, #16]
 8103b64:	1ad3      	subs	r3, r2, r3
 8103b66:	2b64      	cmp	r3, #100	; 0x64
 8103b68:	d902      	bls.n	8103b70 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8103b6a:	2303      	movs	r3, #3
 8103b6c:	75fb      	strb	r3, [r7, #23]
        break;
 8103b6e:	e005      	b.n	8103b7c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8103b70:	4b75      	ldr	r3, [pc, #468]	; (8103d48 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8103b72:	681b      	ldr	r3, [r3, #0]
 8103b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8103b78:	2b00      	cmp	r3, #0
 8103b7a:	d0ef      	beq.n	8103b5c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8103b7c:	7dfb      	ldrb	r3, [r7, #23]
 8103b7e:	2b00      	cmp	r3, #0
 8103b80:	d168      	bne.n	8103c54 <HAL_RCCEx_PeriphCLKConfig+0x748>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8103b82:	4b70      	ldr	r3, [pc, #448]	; (8103d44 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103b84:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8103b86:	687b      	ldr	r3, [r7, #4]
 8103b88:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8103b8c:	4053      	eors	r3, r2
 8103b8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8103b92:	2b00      	cmp	r3, #0
 8103b94:	d013      	beq.n	8103bbe <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8103b96:	4b6b      	ldr	r3, [pc, #428]	; (8103d44 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8103b9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8103b9e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8103ba0:	4b68      	ldr	r3, [pc, #416]	; (8103d44 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103ba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8103ba4:	4a67      	ldr	r2, [pc, #412]	; (8103d44 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103ba6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8103baa:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8103bac:	4b65      	ldr	r3, [pc, #404]	; (8103d44 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103bae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8103bb0:	4a64      	ldr	r2, [pc, #400]	; (8103d44 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103bb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8103bb6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8103bb8:	4a62      	ldr	r2, [pc, #392]	; (8103d44 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103bba:	68fb      	ldr	r3, [r7, #12]
 8103bbc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8103bbe:	687b      	ldr	r3, [r7, #4]
 8103bc0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8103bc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8103bc8:	d115      	bne.n	8103bf6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8103bca:	f7fd ffef 	bl	8101bac <HAL_GetTick>
 8103bce:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8103bd0:	e00b      	b.n	8103bea <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8103bd2:	f7fd ffeb 	bl	8101bac <HAL_GetTick>
 8103bd6:	4602      	mov	r2, r0
 8103bd8:	693b      	ldr	r3, [r7, #16]
 8103bda:	1ad3      	subs	r3, r2, r3
 8103bdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8103be0:	4293      	cmp	r3, r2
 8103be2:	d902      	bls.n	8103bea <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8103be4:	2303      	movs	r3, #3
 8103be6:	75fb      	strb	r3, [r7, #23]
            break;
 8103be8:	e005      	b.n	8103bf6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8103bea:	4b56      	ldr	r3, [pc, #344]	; (8103d44 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8103bee:	f003 0302 	and.w	r3, r3, #2
 8103bf2:	2b00      	cmp	r3, #0
 8103bf4:	d0ed      	beq.n	8103bd2 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8103bf6:	7dfb      	ldrb	r3, [r7, #23]
 8103bf8:	2b00      	cmp	r3, #0
 8103bfa:	d128      	bne.n	8103c4e <HAL_RCCEx_PeriphCLKConfig+0x742>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8103bfc:	687b      	ldr	r3, [r7, #4]
 8103bfe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8103c02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8103c06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8103c0a:	d10f      	bne.n	8103c2c <HAL_RCCEx_PeriphCLKConfig+0x720>
 8103c0c:	4b4d      	ldr	r3, [pc, #308]	; (8103d44 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103c0e:	691b      	ldr	r3, [r3, #16]
 8103c10:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8103c14:	687b      	ldr	r3, [r7, #4]
 8103c16:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8103c1a:	091b      	lsrs	r3, r3, #4
 8103c1c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8103c20:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8103c24:	4947      	ldr	r1, [pc, #284]	; (8103d44 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103c26:	4313      	orrs	r3, r2
 8103c28:	610b      	str	r3, [r1, #16]
 8103c2a:	e005      	b.n	8103c38 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8103c2c:	4b45      	ldr	r3, [pc, #276]	; (8103d44 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103c2e:	691b      	ldr	r3, [r3, #16]
 8103c30:	4a44      	ldr	r2, [pc, #272]	; (8103d44 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103c32:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8103c36:	6113      	str	r3, [r2, #16]
 8103c38:	4b42      	ldr	r3, [pc, #264]	; (8103d44 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103c3a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8103c3c:	687b      	ldr	r3, [r7, #4]
 8103c3e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8103c42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8103c46:	493f      	ldr	r1, [pc, #252]	; (8103d44 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103c48:	4313      	orrs	r3, r2
 8103c4a:	670b      	str	r3, [r1, #112]	; 0x70
 8103c4c:	e004      	b.n	8103c58 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8103c4e:	7dfb      	ldrb	r3, [r7, #23]
 8103c50:	75bb      	strb	r3, [r7, #22]
 8103c52:	e001      	b.n	8103c58 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103c54:	7dfb      	ldrb	r3, [r7, #23]
 8103c56:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8103c58:	687b      	ldr	r3, [r7, #4]
 8103c5a:	681b      	ldr	r3, [r3, #0]
 8103c5c:	f003 0301 	and.w	r3, r3, #1
 8103c60:	2b00      	cmp	r3, #0
 8103c62:	f000 8083 	beq.w	8103d6c <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8103c66:	687b      	ldr	r3, [r7, #4]
 8103c68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8103c6a:	2b28      	cmp	r3, #40	; 0x28
 8103c6c:	d866      	bhi.n	8103d3c <HAL_RCCEx_PeriphCLKConfig+0x830>
 8103c6e:	a201      	add	r2, pc, #4	; (adr r2, 8103c74 <HAL_RCCEx_PeriphCLKConfig+0x768>)
 8103c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103c74:	08103d4d 	.word	0x08103d4d
 8103c78:	08103d3d 	.word	0x08103d3d
 8103c7c:	08103d3d 	.word	0x08103d3d
 8103c80:	08103d3d 	.word	0x08103d3d
 8103c84:	08103d3d 	.word	0x08103d3d
 8103c88:	08103d3d 	.word	0x08103d3d
 8103c8c:	08103d3d 	.word	0x08103d3d
 8103c90:	08103d3d 	.word	0x08103d3d
 8103c94:	08103d19 	.word	0x08103d19
 8103c98:	08103d3d 	.word	0x08103d3d
 8103c9c:	08103d3d 	.word	0x08103d3d
 8103ca0:	08103d3d 	.word	0x08103d3d
 8103ca4:	08103d3d 	.word	0x08103d3d
 8103ca8:	08103d3d 	.word	0x08103d3d
 8103cac:	08103d3d 	.word	0x08103d3d
 8103cb0:	08103d3d 	.word	0x08103d3d
 8103cb4:	08103d2b 	.word	0x08103d2b
 8103cb8:	08103d3d 	.word	0x08103d3d
 8103cbc:	08103d3d 	.word	0x08103d3d
 8103cc0:	08103d3d 	.word	0x08103d3d
 8103cc4:	08103d3d 	.word	0x08103d3d
 8103cc8:	08103d3d 	.word	0x08103d3d
 8103ccc:	08103d3d 	.word	0x08103d3d
 8103cd0:	08103d3d 	.word	0x08103d3d
 8103cd4:	08103d4d 	.word	0x08103d4d
 8103cd8:	08103d3d 	.word	0x08103d3d
 8103cdc:	08103d3d 	.word	0x08103d3d
 8103ce0:	08103d3d 	.word	0x08103d3d
 8103ce4:	08103d3d 	.word	0x08103d3d
 8103ce8:	08103d3d 	.word	0x08103d3d
 8103cec:	08103d3d 	.word	0x08103d3d
 8103cf0:	08103d3d 	.word	0x08103d3d
 8103cf4:	08103d4d 	.word	0x08103d4d
 8103cf8:	08103d3d 	.word	0x08103d3d
 8103cfc:	08103d3d 	.word	0x08103d3d
 8103d00:	08103d3d 	.word	0x08103d3d
 8103d04:	08103d3d 	.word	0x08103d3d
 8103d08:	08103d3d 	.word	0x08103d3d
 8103d0c:	08103d3d 	.word	0x08103d3d
 8103d10:	08103d3d 	.word	0x08103d3d
 8103d14:	08103d4d 	.word	0x08103d4d
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8103d18:	687b      	ldr	r3, [r7, #4]
 8103d1a:	3304      	adds	r3, #4
 8103d1c:	2101      	movs	r1, #1
 8103d1e:	4618      	mov	r0, r3
 8103d20:	f000 fb3a 	bl	8104398 <RCCEx_PLL2_Config>
 8103d24:	4603      	mov	r3, r0
 8103d26:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8103d28:	e011      	b.n	8103d4e <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8103d2a:	687b      	ldr	r3, [r7, #4]
 8103d2c:	3324      	adds	r3, #36	; 0x24
 8103d2e:	2101      	movs	r1, #1
 8103d30:	4618      	mov	r0, r3
 8103d32:	f000 fbe3 	bl	81044fc <RCCEx_PLL3_Config>
 8103d36:	4603      	mov	r3, r0
 8103d38:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8103d3a:	e008      	b.n	8103d4e <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103d3c:	2301      	movs	r3, #1
 8103d3e:	75fb      	strb	r3, [r7, #23]
      break;
 8103d40:	e005      	b.n	8103d4e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8103d42:	bf00      	nop
 8103d44:	58024400 	.word	0x58024400
 8103d48:	58024800 	.word	0x58024800
      break;
 8103d4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103d4e:	7dfb      	ldrb	r3, [r7, #23]
 8103d50:	2b00      	cmp	r3, #0
 8103d52:	d109      	bne.n	8103d68 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8103d54:	4b96      	ldr	r3, [pc, #600]	; (8103fb0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8103d56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103d58:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8103d5c:	687b      	ldr	r3, [r7, #4]
 8103d5e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8103d60:	4993      	ldr	r1, [pc, #588]	; (8103fb0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8103d62:	4313      	orrs	r3, r2
 8103d64:	654b      	str	r3, [r1, #84]	; 0x54
 8103d66:	e001      	b.n	8103d6c <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103d68:	7dfb      	ldrb	r3, [r7, #23]
 8103d6a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8103d6c:	687b      	ldr	r3, [r7, #4]
 8103d6e:	681b      	ldr	r3, [r3, #0]
 8103d70:	f003 0302 	and.w	r3, r3, #2
 8103d74:	2b00      	cmp	r3, #0
 8103d76:	d038      	beq.n	8103dea <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8103d78:	687b      	ldr	r3, [r7, #4]
 8103d7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8103d7c:	2b05      	cmp	r3, #5
 8103d7e:	d821      	bhi.n	8103dc4 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8103d80:	a201      	add	r2, pc, #4	; (adr r2, 8103d88 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8103d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103d86:	bf00      	nop
 8103d88:	08103dcb 	.word	0x08103dcb
 8103d8c:	08103da1 	.word	0x08103da1
 8103d90:	08103db3 	.word	0x08103db3
 8103d94:	08103dcb 	.word	0x08103dcb
 8103d98:	08103dcb 	.word	0x08103dcb
 8103d9c:	08103dcb 	.word	0x08103dcb
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8103da0:	687b      	ldr	r3, [r7, #4]
 8103da2:	3304      	adds	r3, #4
 8103da4:	2101      	movs	r1, #1
 8103da6:	4618      	mov	r0, r3
 8103da8:	f000 faf6 	bl	8104398 <RCCEx_PLL2_Config>
 8103dac:	4603      	mov	r3, r0
 8103dae:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8103db0:	e00c      	b.n	8103dcc <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8103db2:	687b      	ldr	r3, [r7, #4]
 8103db4:	3324      	adds	r3, #36	; 0x24
 8103db6:	2101      	movs	r1, #1
 8103db8:	4618      	mov	r0, r3
 8103dba:	f000 fb9f 	bl	81044fc <RCCEx_PLL3_Config>
 8103dbe:	4603      	mov	r3, r0
 8103dc0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8103dc2:	e003      	b.n	8103dcc <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103dc4:	2301      	movs	r3, #1
 8103dc6:	75fb      	strb	r3, [r7, #23]
      break;
 8103dc8:	e000      	b.n	8103dcc <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8103dca:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103dcc:	7dfb      	ldrb	r3, [r7, #23]
 8103dce:	2b00      	cmp	r3, #0
 8103dd0:	d109      	bne.n	8103de6 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8103dd2:	4b77      	ldr	r3, [pc, #476]	; (8103fb0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8103dd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103dd6:	f023 0207 	bic.w	r2, r3, #7
 8103dda:	687b      	ldr	r3, [r7, #4]
 8103ddc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8103dde:	4974      	ldr	r1, [pc, #464]	; (8103fb0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8103de0:	4313      	orrs	r3, r2
 8103de2:	654b      	str	r3, [r1, #84]	; 0x54
 8103de4:	e001      	b.n	8103dea <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103de6:	7dfb      	ldrb	r3, [r7, #23]
 8103de8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8103dea:	687b      	ldr	r3, [r7, #4]
 8103dec:	681b      	ldr	r3, [r3, #0]
 8103dee:	f003 0304 	and.w	r3, r3, #4
 8103df2:	2b00      	cmp	r3, #0
 8103df4:	d03a      	beq.n	8103e6c <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8103df6:	687b      	ldr	r3, [r7, #4]
 8103df8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8103dfc:	2b05      	cmp	r3, #5
 8103dfe:	d821      	bhi.n	8103e44 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8103e00:	a201      	add	r2, pc, #4	; (adr r2, 8103e08 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8103e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103e06:	bf00      	nop
 8103e08:	08103e4b 	.word	0x08103e4b
 8103e0c:	08103e21 	.word	0x08103e21
 8103e10:	08103e33 	.word	0x08103e33
 8103e14:	08103e4b 	.word	0x08103e4b
 8103e18:	08103e4b 	.word	0x08103e4b
 8103e1c:	08103e4b 	.word	0x08103e4b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8103e20:	687b      	ldr	r3, [r7, #4]
 8103e22:	3304      	adds	r3, #4
 8103e24:	2101      	movs	r1, #1
 8103e26:	4618      	mov	r0, r3
 8103e28:	f000 fab6 	bl	8104398 <RCCEx_PLL2_Config>
 8103e2c:	4603      	mov	r3, r0
 8103e2e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8103e30:	e00c      	b.n	8103e4c <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8103e32:	687b      	ldr	r3, [r7, #4]
 8103e34:	3324      	adds	r3, #36	; 0x24
 8103e36:	2101      	movs	r1, #1
 8103e38:	4618      	mov	r0, r3
 8103e3a:	f000 fb5f 	bl	81044fc <RCCEx_PLL3_Config>
 8103e3e:	4603      	mov	r3, r0
 8103e40:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8103e42:	e003      	b.n	8103e4c <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103e44:	2301      	movs	r3, #1
 8103e46:	75fb      	strb	r3, [r7, #23]
      break;
 8103e48:	e000      	b.n	8103e4c <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8103e4a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103e4c:	7dfb      	ldrb	r3, [r7, #23]
 8103e4e:	2b00      	cmp	r3, #0
 8103e50:	d10a      	bne.n	8103e68 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8103e52:	4b57      	ldr	r3, [pc, #348]	; (8103fb0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8103e54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103e56:	f023 0207 	bic.w	r2, r3, #7
 8103e5a:	687b      	ldr	r3, [r7, #4]
 8103e5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8103e60:	4953      	ldr	r1, [pc, #332]	; (8103fb0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8103e62:	4313      	orrs	r3, r2
 8103e64:	658b      	str	r3, [r1, #88]	; 0x58
 8103e66:	e001      	b.n	8103e6c <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103e68:	7dfb      	ldrb	r3, [r7, #23]
 8103e6a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8103e6c:	687b      	ldr	r3, [r7, #4]
 8103e6e:	681b      	ldr	r3, [r3, #0]
 8103e70:	f003 0320 	and.w	r3, r3, #32
 8103e74:	2b00      	cmp	r3, #0
 8103e76:	d04b      	beq.n	8103f10 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8103e78:	687b      	ldr	r3, [r7, #4]
 8103e7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8103e7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8103e82:	d02e      	beq.n	8103ee2 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8103e84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8103e88:	d828      	bhi.n	8103edc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8103e8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8103e8e:	d02a      	beq.n	8103ee6 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8103e90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8103e94:	d822      	bhi.n	8103edc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8103e96:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8103e9a:	d026      	beq.n	8103eea <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8103e9c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8103ea0:	d81c      	bhi.n	8103edc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8103ea2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103ea6:	d010      	beq.n	8103eca <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8103ea8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103eac:	d816      	bhi.n	8103edc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8103eae:	2b00      	cmp	r3, #0
 8103eb0:	d01d      	beq.n	8103eee <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8103eb2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8103eb6:	d111      	bne.n	8103edc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103eb8:	687b      	ldr	r3, [r7, #4]
 8103eba:	3304      	adds	r3, #4
 8103ebc:	2100      	movs	r1, #0
 8103ebe:	4618      	mov	r0, r3
 8103ec0:	f000 fa6a 	bl	8104398 <RCCEx_PLL2_Config>
 8103ec4:	4603      	mov	r3, r0
 8103ec6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8103ec8:	e012      	b.n	8103ef0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8103eca:	687b      	ldr	r3, [r7, #4]
 8103ecc:	3324      	adds	r3, #36	; 0x24
 8103ece:	2102      	movs	r1, #2
 8103ed0:	4618      	mov	r0, r3
 8103ed2:	f000 fb13 	bl	81044fc <RCCEx_PLL3_Config>
 8103ed6:	4603      	mov	r3, r0
 8103ed8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8103eda:	e009      	b.n	8103ef0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103edc:	2301      	movs	r3, #1
 8103ede:	75fb      	strb	r3, [r7, #23]
      break;
 8103ee0:	e006      	b.n	8103ef0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8103ee2:	bf00      	nop
 8103ee4:	e004      	b.n	8103ef0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8103ee6:	bf00      	nop
 8103ee8:	e002      	b.n	8103ef0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8103eea:	bf00      	nop
 8103eec:	e000      	b.n	8103ef0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8103eee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103ef0:	7dfb      	ldrb	r3, [r7, #23]
 8103ef2:	2b00      	cmp	r3, #0
 8103ef4:	d10a      	bne.n	8103f0c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8103ef6:	4b2e      	ldr	r3, [pc, #184]	; (8103fb0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8103ef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103efa:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8103efe:	687b      	ldr	r3, [r7, #4]
 8103f00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8103f04:	492a      	ldr	r1, [pc, #168]	; (8103fb0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8103f06:	4313      	orrs	r3, r2
 8103f08:	654b      	str	r3, [r1, #84]	; 0x54
 8103f0a:	e001      	b.n	8103f10 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103f0c:	7dfb      	ldrb	r3, [r7, #23]
 8103f0e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8103f10:	687b      	ldr	r3, [r7, #4]
 8103f12:	681b      	ldr	r3, [r3, #0]
 8103f14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8103f18:	2b00      	cmp	r3, #0
 8103f1a:	d04d      	beq.n	8103fb8 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8103f1c:	687b      	ldr	r3, [r7, #4]
 8103f1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8103f22:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8103f26:	d02e      	beq.n	8103f86 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8103f28:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8103f2c:	d828      	bhi.n	8103f80 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8103f2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8103f32:	d02a      	beq.n	8103f8a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8103f34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8103f38:	d822      	bhi.n	8103f80 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8103f3a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8103f3e:	d026      	beq.n	8103f8e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8103f40:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8103f44:	d81c      	bhi.n	8103f80 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8103f46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8103f4a:	d010      	beq.n	8103f6e <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8103f4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8103f50:	d816      	bhi.n	8103f80 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8103f52:	2b00      	cmp	r3, #0
 8103f54:	d01d      	beq.n	8103f92 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8103f56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8103f5a:	d111      	bne.n	8103f80 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103f5c:	687b      	ldr	r3, [r7, #4]
 8103f5e:	3304      	adds	r3, #4
 8103f60:	2100      	movs	r1, #0
 8103f62:	4618      	mov	r0, r3
 8103f64:	f000 fa18 	bl	8104398 <RCCEx_PLL2_Config>
 8103f68:	4603      	mov	r3, r0
 8103f6a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8103f6c:	e012      	b.n	8103f94 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8103f6e:	687b      	ldr	r3, [r7, #4]
 8103f70:	3324      	adds	r3, #36	; 0x24
 8103f72:	2102      	movs	r1, #2
 8103f74:	4618      	mov	r0, r3
 8103f76:	f000 fac1 	bl	81044fc <RCCEx_PLL3_Config>
 8103f7a:	4603      	mov	r3, r0
 8103f7c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8103f7e:	e009      	b.n	8103f94 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103f80:	2301      	movs	r3, #1
 8103f82:	75fb      	strb	r3, [r7, #23]
      break;
 8103f84:	e006      	b.n	8103f94 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8103f86:	bf00      	nop
 8103f88:	e004      	b.n	8103f94 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8103f8a:	bf00      	nop
 8103f8c:	e002      	b.n	8103f94 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8103f8e:	bf00      	nop
 8103f90:	e000      	b.n	8103f94 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8103f92:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103f94:	7dfb      	ldrb	r3, [r7, #23]
 8103f96:	2b00      	cmp	r3, #0
 8103f98:	d10c      	bne.n	8103fb4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8103f9a:	4b05      	ldr	r3, [pc, #20]	; (8103fb0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8103f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103f9e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8103fa2:	687b      	ldr	r3, [r7, #4]
 8103fa4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8103fa8:	4901      	ldr	r1, [pc, #4]	; (8103fb0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8103faa:	4313      	orrs	r3, r2
 8103fac:	658b      	str	r3, [r1, #88]	; 0x58
 8103fae:	e003      	b.n	8103fb8 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8103fb0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103fb4:	7dfb      	ldrb	r3, [r7, #23]
 8103fb6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8103fb8:	687b      	ldr	r3, [r7, #4]
 8103fba:	681b      	ldr	r3, [r3, #0]
 8103fbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8103fc0:	2b00      	cmp	r3, #0
 8103fc2:	d04b      	beq.n	810405c <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8103fc4:	687b      	ldr	r3, [r7, #4]
 8103fc6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8103fca:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8103fce:	d02e      	beq.n	810402e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8103fd0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8103fd4:	d828      	bhi.n	8104028 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8103fd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8103fda:	d02a      	beq.n	8104032 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8103fdc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8103fe0:	d822      	bhi.n	8104028 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8103fe2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8103fe6:	d026      	beq.n	8104036 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8103fe8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8103fec:	d81c      	bhi.n	8104028 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8103fee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8103ff2:	d010      	beq.n	8104016 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8103ff4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8103ff8:	d816      	bhi.n	8104028 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8103ffa:	2b00      	cmp	r3, #0
 8103ffc:	d01d      	beq.n	810403a <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8103ffe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8104002:	d111      	bne.n	8104028 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8104004:	687b      	ldr	r3, [r7, #4]
 8104006:	3304      	adds	r3, #4
 8104008:	2100      	movs	r1, #0
 810400a:	4618      	mov	r0, r3
 810400c:	f000 f9c4 	bl	8104398 <RCCEx_PLL2_Config>
 8104010:	4603      	mov	r3, r0
 8104012:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8104014:	e012      	b.n	810403c <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8104016:	687b      	ldr	r3, [r7, #4]
 8104018:	3324      	adds	r3, #36	; 0x24
 810401a:	2102      	movs	r1, #2
 810401c:	4618      	mov	r0, r3
 810401e:	f000 fa6d 	bl	81044fc <RCCEx_PLL3_Config>
 8104022:	4603      	mov	r3, r0
 8104024:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8104026:	e009      	b.n	810403c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104028:	2301      	movs	r3, #1
 810402a:	75fb      	strb	r3, [r7, #23]
      break;
 810402c:	e006      	b.n	810403c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 810402e:	bf00      	nop
 8104030:	e004      	b.n	810403c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8104032:	bf00      	nop
 8104034:	e002      	b.n	810403c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8104036:	bf00      	nop
 8104038:	e000      	b.n	810403c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 810403a:	bf00      	nop
    }

    if(ret == HAL_OK)
 810403c:	7dfb      	ldrb	r3, [r7, #23]
 810403e:	2b00      	cmp	r3, #0
 8104040:	d10a      	bne.n	8104058 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8104042:	4b9d      	ldr	r3, [pc, #628]	; (81042b8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104046:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 810404a:	687b      	ldr	r3, [r7, #4]
 810404c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8104050:	4999      	ldr	r1, [pc, #612]	; (81042b8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104052:	4313      	orrs	r3, r2
 8104054:	658b      	str	r3, [r1, #88]	; 0x58
 8104056:	e001      	b.n	810405c <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104058:	7dfb      	ldrb	r3, [r7, #23]
 810405a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 810405c:	687b      	ldr	r3, [r7, #4]
 810405e:	681b      	ldr	r3, [r3, #0]
 8104060:	f003 0308 	and.w	r3, r3, #8
 8104064:	2b00      	cmp	r3, #0
 8104066:	d01a      	beq.n	810409e <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8104068:	687b      	ldr	r3, [r7, #4]
 810406a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 810406e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8104072:	d10a      	bne.n	810408a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8104074:	687b      	ldr	r3, [r7, #4]
 8104076:	3324      	adds	r3, #36	; 0x24
 8104078:	2102      	movs	r1, #2
 810407a:	4618      	mov	r0, r3
 810407c:	f000 fa3e 	bl	81044fc <RCCEx_PLL3_Config>
 8104080:	4603      	mov	r3, r0
 8104082:	2b00      	cmp	r3, #0
 8104084:	d001      	beq.n	810408a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8104086:	2301      	movs	r3, #1
 8104088:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 810408a:	4b8b      	ldr	r3, [pc, #556]	; (81042b8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810408c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810408e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8104092:	687b      	ldr	r3, [r7, #4]
 8104094:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8104098:	4987      	ldr	r1, [pc, #540]	; (81042b8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810409a:	4313      	orrs	r3, r2
 810409c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 810409e:	687b      	ldr	r3, [r7, #4]
 81040a0:	681b      	ldr	r3, [r3, #0]
 81040a2:	f003 0310 	and.w	r3, r3, #16
 81040a6:	2b00      	cmp	r3, #0
 81040a8:	d01a      	beq.n	81040e0 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 81040aa:	687b      	ldr	r3, [r7, #4]
 81040ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 81040b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81040b4:	d10a      	bne.n	81040cc <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 81040b6:	687b      	ldr	r3, [r7, #4]
 81040b8:	3324      	adds	r3, #36	; 0x24
 81040ba:	2102      	movs	r1, #2
 81040bc:	4618      	mov	r0, r3
 81040be:	f000 fa1d 	bl	81044fc <RCCEx_PLL3_Config>
 81040c2:	4603      	mov	r3, r0
 81040c4:	2b00      	cmp	r3, #0
 81040c6:	d001      	beq.n	81040cc <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 81040c8:	2301      	movs	r3, #1
 81040ca:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 81040cc:	4b7a      	ldr	r3, [pc, #488]	; (81042b8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81040ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81040d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 81040d4:	687b      	ldr	r3, [r7, #4]
 81040d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 81040da:	4977      	ldr	r1, [pc, #476]	; (81042b8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81040dc:	4313      	orrs	r3, r2
 81040de:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 81040e0:	687b      	ldr	r3, [r7, #4]
 81040e2:	681b      	ldr	r3, [r3, #0]
 81040e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 81040e8:	2b00      	cmp	r3, #0
 81040ea:	d034      	beq.n	8104156 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 81040ec:	687b      	ldr	r3, [r7, #4]
 81040ee:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 81040f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81040f6:	d01d      	beq.n	8104134 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 81040f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81040fc:	d817      	bhi.n	810412e <HAL_RCCEx_PeriphCLKConfig+0xc22>
 81040fe:	2b00      	cmp	r3, #0
 8104100:	d003      	beq.n	810410a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8104102:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8104106:	d009      	beq.n	810411c <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8104108:	e011      	b.n	810412e <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810410a:	687b      	ldr	r3, [r7, #4]
 810410c:	3304      	adds	r3, #4
 810410e:	2100      	movs	r1, #0
 8104110:	4618      	mov	r0, r3
 8104112:	f000 f941 	bl	8104398 <RCCEx_PLL2_Config>
 8104116:	4603      	mov	r3, r0
 8104118:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 810411a:	e00c      	b.n	8104136 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 810411c:	687b      	ldr	r3, [r7, #4]
 810411e:	3324      	adds	r3, #36	; 0x24
 8104120:	2102      	movs	r1, #2
 8104122:	4618      	mov	r0, r3
 8104124:	f000 f9ea 	bl	81044fc <RCCEx_PLL3_Config>
 8104128:	4603      	mov	r3, r0
 810412a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 810412c:	e003      	b.n	8104136 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810412e:	2301      	movs	r3, #1
 8104130:	75fb      	strb	r3, [r7, #23]
      break;
 8104132:	e000      	b.n	8104136 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8104134:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104136:	7dfb      	ldrb	r3, [r7, #23]
 8104138:	2b00      	cmp	r3, #0
 810413a:	d10a      	bne.n	8104152 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 810413c:	4b5e      	ldr	r3, [pc, #376]	; (81042b8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810413e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104140:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8104144:	687b      	ldr	r3, [r7, #4]
 8104146:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 810414a:	495b      	ldr	r1, [pc, #364]	; (81042b8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810414c:	4313      	orrs	r3, r2
 810414e:	658b      	str	r3, [r1, #88]	; 0x58
 8104150:	e001      	b.n	8104156 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104152:	7dfb      	ldrb	r3, [r7, #23]
 8104154:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8104156:	687b      	ldr	r3, [r7, #4]
 8104158:	681b      	ldr	r3, [r3, #0]
 810415a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 810415e:	2b00      	cmp	r3, #0
 8104160:	d033      	beq.n	81041ca <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8104162:	687b      	ldr	r3, [r7, #4]
 8104164:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104168:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 810416c:	d01c      	beq.n	81041a8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 810416e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8104172:	d816      	bhi.n	81041a2 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8104174:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8104178:	d003      	beq.n	8104182 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 810417a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 810417e:	d007      	beq.n	8104190 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8104180:	e00f      	b.n	81041a2 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104182:	4b4d      	ldr	r3, [pc, #308]	; (81042b8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104186:	4a4c      	ldr	r2, [pc, #304]	; (81042b8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104188:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810418c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 810418e:	e00c      	b.n	81041aa <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8104190:	687b      	ldr	r3, [r7, #4]
 8104192:	3324      	adds	r3, #36	; 0x24
 8104194:	2101      	movs	r1, #1
 8104196:	4618      	mov	r0, r3
 8104198:	f000 f9b0 	bl	81044fc <RCCEx_PLL3_Config>
 810419c:	4603      	mov	r3, r0
 810419e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 81041a0:	e003      	b.n	81041aa <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81041a2:	2301      	movs	r3, #1
 81041a4:	75fb      	strb	r3, [r7, #23]
      break;
 81041a6:	e000      	b.n	81041aa <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 81041a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 81041aa:	7dfb      	ldrb	r3, [r7, #23]
 81041ac:	2b00      	cmp	r3, #0
 81041ae:	d10a      	bne.n	81041c6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 81041b0:	4b41      	ldr	r3, [pc, #260]	; (81042b8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81041b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81041b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 81041b8:	687b      	ldr	r3, [r7, #4]
 81041ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81041be:	493e      	ldr	r1, [pc, #248]	; (81042b8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81041c0:	4313      	orrs	r3, r2
 81041c2:	654b      	str	r3, [r1, #84]	; 0x54
 81041c4:	e001      	b.n	81041ca <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81041c6:	7dfb      	ldrb	r3, [r7, #23]
 81041c8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 81041ca:	687b      	ldr	r3, [r7, #4]
 81041cc:	681b      	ldr	r3, [r3, #0]
 81041ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81041d2:	2b00      	cmp	r3, #0
 81041d4:	d029      	beq.n	810422a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 81041d6:	687b      	ldr	r3, [r7, #4]
 81041d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81041da:	2b00      	cmp	r3, #0
 81041dc:	d003      	beq.n	81041e6 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 81041de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81041e2:	d007      	beq.n	81041f4 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 81041e4:	e00f      	b.n	8104206 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81041e6:	4b34      	ldr	r3, [pc, #208]	; (81042b8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81041e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81041ea:	4a33      	ldr	r2, [pc, #204]	; (81042b8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81041ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81041f0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 81041f2:	e00b      	b.n	810420c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 81041f4:	687b      	ldr	r3, [r7, #4]
 81041f6:	3304      	adds	r3, #4
 81041f8:	2102      	movs	r1, #2
 81041fa:	4618      	mov	r0, r3
 81041fc:	f000 f8cc 	bl	8104398 <RCCEx_PLL2_Config>
 8104200:	4603      	mov	r3, r0
 8104202:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8104204:	e002      	b.n	810420c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8104206:	2301      	movs	r3, #1
 8104208:	75fb      	strb	r3, [r7, #23]
      break;
 810420a:	bf00      	nop
    }

    if(ret == HAL_OK)
 810420c:	7dfb      	ldrb	r3, [r7, #23]
 810420e:	2b00      	cmp	r3, #0
 8104210:	d109      	bne.n	8104226 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8104212:	4b29      	ldr	r3, [pc, #164]	; (81042b8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104216:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 810421a:	687b      	ldr	r3, [r7, #4]
 810421c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810421e:	4926      	ldr	r1, [pc, #152]	; (81042b8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104220:	4313      	orrs	r3, r2
 8104222:	64cb      	str	r3, [r1, #76]	; 0x4c
 8104224:	e001      	b.n	810422a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104226:	7dfb      	ldrb	r3, [r7, #23]
 8104228:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 810422a:	687b      	ldr	r3, [r7, #4]
 810422c:	681b      	ldr	r3, [r3, #0]
 810422e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8104232:	2b00      	cmp	r3, #0
 8104234:	d00a      	beq.n	810424c <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8104236:	687b      	ldr	r3, [r7, #4]
 8104238:	3324      	adds	r3, #36	; 0x24
 810423a:	2102      	movs	r1, #2
 810423c:	4618      	mov	r0, r3
 810423e:	f000 f95d 	bl	81044fc <RCCEx_PLL3_Config>
 8104242:	4603      	mov	r3, r0
 8104244:	2b00      	cmp	r3, #0
 8104246:	d001      	beq.n	810424c <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8104248:	2301      	movs	r3, #1
 810424a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 810424c:	687b      	ldr	r3, [r7, #4]
 810424e:	681b      	ldr	r3, [r3, #0]
 8104250:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8104254:	2b00      	cmp	r3, #0
 8104256:	d033      	beq.n	81042c0 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8104258:	687b      	ldr	r3, [r7, #4]
 810425a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810425c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8104260:	d017      	beq.n	8104292 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8104262:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8104266:	d811      	bhi.n	810428c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8104268:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 810426c:	d013      	beq.n	8104296 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 810426e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8104272:	d80b      	bhi.n	810428c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8104274:	2b00      	cmp	r3, #0
 8104276:	d010      	beq.n	810429a <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8104278:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810427c:	d106      	bne.n	810428c <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810427e:	4b0e      	ldr	r3, [pc, #56]	; (81042b8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104282:	4a0d      	ldr	r2, [pc, #52]	; (81042b8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104284:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104288:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 810428a:	e007      	b.n	810429c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810428c:	2301      	movs	r3, #1
 810428e:	75fb      	strb	r3, [r7, #23]
      break;
 8104290:	e004      	b.n	810429c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8104292:	bf00      	nop
 8104294:	e002      	b.n	810429c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8104296:	bf00      	nop
 8104298:	e000      	b.n	810429c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 810429a:	bf00      	nop
    }

    if(ret == HAL_OK)
 810429c:	7dfb      	ldrb	r3, [r7, #23]
 810429e:	2b00      	cmp	r3, #0
 81042a0:	d10c      	bne.n	81042bc <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 81042a2:	4b05      	ldr	r3, [pc, #20]	; (81042b8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81042a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81042a6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 81042aa:	687b      	ldr	r3, [r7, #4]
 81042ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 81042ae:	4902      	ldr	r1, [pc, #8]	; (81042b8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81042b0:	4313      	orrs	r3, r2
 81042b2:	654b      	str	r3, [r1, #84]	; 0x54
 81042b4:	e004      	b.n	81042c0 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 81042b6:	bf00      	nop
 81042b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81042bc:	7dfb      	ldrb	r3, [r7, #23]
 81042be:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 81042c0:	687b      	ldr	r3, [r7, #4]
 81042c2:	681b      	ldr	r3, [r3, #0]
 81042c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 81042c8:	2b00      	cmp	r3, #0
 81042ca:	d008      	beq.n	81042de <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 81042cc:	4b31      	ldr	r3, [pc, #196]	; (8104394 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81042ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81042d0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 81042d4:	687b      	ldr	r3, [r7, #4]
 81042d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81042d8:	492e      	ldr	r1, [pc, #184]	; (8104394 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81042da:	4313      	orrs	r3, r2
 81042dc:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 81042de:	687b      	ldr	r3, [r7, #4]
 81042e0:	681b      	ldr	r3, [r3, #0]
 81042e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 81042e6:	2b00      	cmp	r3, #0
 81042e8:	d009      	beq.n	81042fe <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 81042ea:	4b2a      	ldr	r3, [pc, #168]	; (8104394 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81042ec:	691b      	ldr	r3, [r3, #16]
 81042ee:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 81042f2:	687b      	ldr	r3, [r7, #4]
 81042f4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 81042f8:	4926      	ldr	r1, [pc, #152]	; (8104394 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81042fa:	4313      	orrs	r3, r2
 81042fc:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 81042fe:	687b      	ldr	r3, [r7, #4]
 8104300:	681b      	ldr	r3, [r3, #0]
 8104302:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8104306:	2b00      	cmp	r3, #0
 8104308:	d008      	beq.n	810431c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 810430a:	4b22      	ldr	r3, [pc, #136]	; (8104394 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810430c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810430e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8104312:	687b      	ldr	r3, [r7, #4]
 8104314:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8104316:	491f      	ldr	r1, [pc, #124]	; (8104394 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8104318:	4313      	orrs	r3, r2
 810431a:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 810431c:	687b      	ldr	r3, [r7, #4]
 810431e:	681b      	ldr	r3, [r3, #0]
 8104320:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8104324:	2b00      	cmp	r3, #0
 8104326:	d00d      	beq.n	8104344 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8104328:	4b1a      	ldr	r3, [pc, #104]	; (8104394 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810432a:	691b      	ldr	r3, [r3, #16]
 810432c:	4a19      	ldr	r2, [pc, #100]	; (8104394 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810432e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8104332:	6113      	str	r3, [r2, #16]
 8104334:	4b17      	ldr	r3, [pc, #92]	; (8104394 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8104336:	691a      	ldr	r2, [r3, #16]
 8104338:	687b      	ldr	r3, [r7, #4]
 810433a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 810433e:	4915      	ldr	r1, [pc, #84]	; (8104394 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8104340:	4313      	orrs	r3, r2
 8104342:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8104344:	687b      	ldr	r3, [r7, #4]
 8104346:	681b      	ldr	r3, [r3, #0]
 8104348:	2b00      	cmp	r3, #0
 810434a:	da08      	bge.n	810435e <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 810434c:	4b11      	ldr	r3, [pc, #68]	; (8104394 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810434e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104350:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8104354:	687b      	ldr	r3, [r7, #4]
 8104356:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104358:	490e      	ldr	r1, [pc, #56]	; (8104394 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810435a:	4313      	orrs	r3, r2
 810435c:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 810435e:	687b      	ldr	r3, [r7, #4]
 8104360:	681b      	ldr	r3, [r3, #0]
 8104362:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8104366:	2b00      	cmp	r3, #0
 8104368:	d009      	beq.n	810437e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 810436a:	4b0a      	ldr	r3, [pc, #40]	; (8104394 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810436c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810436e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8104372:	687b      	ldr	r3, [r7, #4]
 8104374:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8104378:	4906      	ldr	r1, [pc, #24]	; (8104394 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810437a:	4313      	orrs	r3, r2
 810437c:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 810437e:	7dbb      	ldrb	r3, [r7, #22]
 8104380:	2b00      	cmp	r3, #0
 8104382:	d101      	bne.n	8104388 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8104384:	2300      	movs	r3, #0
 8104386:	e000      	b.n	810438a <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8104388:	2301      	movs	r3, #1
}
 810438a:	4618      	mov	r0, r3
 810438c:	3718      	adds	r7, #24
 810438e:	46bd      	mov	sp, r7
 8104390:	bd80      	pop	{r7, pc}
 8104392:	bf00      	nop
 8104394:	58024400 	.word	0x58024400

08104398 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8104398:	b580      	push	{r7, lr}
 810439a:	b084      	sub	sp, #16
 810439c:	af00      	add	r7, sp, #0
 810439e:	6078      	str	r0, [r7, #4]
 81043a0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 81043a2:	2300      	movs	r3, #0
 81043a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 81043a6:	4b54      	ldr	r3, [pc, #336]	; (81044f8 <RCCEx_PLL2_Config+0x160>)
 81043a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81043aa:	f003 0303 	and.w	r3, r3, #3
 81043ae:	2b03      	cmp	r3, #3
 81043b0:	d101      	bne.n	81043b6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 81043b2:	2301      	movs	r3, #1
 81043b4:	e09b      	b.n	81044ee <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 81043b6:	4b50      	ldr	r3, [pc, #320]	; (81044f8 <RCCEx_PLL2_Config+0x160>)
 81043b8:	681b      	ldr	r3, [r3, #0]
 81043ba:	4a4f      	ldr	r2, [pc, #316]	; (81044f8 <RCCEx_PLL2_Config+0x160>)
 81043bc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 81043c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81043c2:	f7fd fbf3 	bl	8101bac <HAL_GetTick>
 81043c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 81043c8:	e008      	b.n	81043dc <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 81043ca:	f7fd fbef 	bl	8101bac <HAL_GetTick>
 81043ce:	4602      	mov	r2, r0
 81043d0:	68bb      	ldr	r3, [r7, #8]
 81043d2:	1ad3      	subs	r3, r2, r3
 81043d4:	2b02      	cmp	r3, #2
 81043d6:	d901      	bls.n	81043dc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 81043d8:	2303      	movs	r3, #3
 81043da:	e088      	b.n	81044ee <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 81043dc:	4b46      	ldr	r3, [pc, #280]	; (81044f8 <RCCEx_PLL2_Config+0x160>)
 81043de:	681b      	ldr	r3, [r3, #0]
 81043e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81043e4:	2b00      	cmp	r3, #0
 81043e6:	d1f0      	bne.n	81043ca <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 81043e8:	4b43      	ldr	r3, [pc, #268]	; (81044f8 <RCCEx_PLL2_Config+0x160>)
 81043ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81043ec:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 81043f0:	687b      	ldr	r3, [r7, #4]
 81043f2:	681b      	ldr	r3, [r3, #0]
 81043f4:	031b      	lsls	r3, r3, #12
 81043f6:	4940      	ldr	r1, [pc, #256]	; (81044f8 <RCCEx_PLL2_Config+0x160>)
 81043f8:	4313      	orrs	r3, r2
 81043fa:	628b      	str	r3, [r1, #40]	; 0x28
 81043fc:	687b      	ldr	r3, [r7, #4]
 81043fe:	685b      	ldr	r3, [r3, #4]
 8104400:	3b01      	subs	r3, #1
 8104402:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8104406:	687b      	ldr	r3, [r7, #4]
 8104408:	689b      	ldr	r3, [r3, #8]
 810440a:	3b01      	subs	r3, #1
 810440c:	025b      	lsls	r3, r3, #9
 810440e:	b29b      	uxth	r3, r3
 8104410:	431a      	orrs	r2, r3
 8104412:	687b      	ldr	r3, [r7, #4]
 8104414:	68db      	ldr	r3, [r3, #12]
 8104416:	3b01      	subs	r3, #1
 8104418:	041b      	lsls	r3, r3, #16
 810441a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 810441e:	431a      	orrs	r2, r3
 8104420:	687b      	ldr	r3, [r7, #4]
 8104422:	691b      	ldr	r3, [r3, #16]
 8104424:	3b01      	subs	r3, #1
 8104426:	061b      	lsls	r3, r3, #24
 8104428:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 810442c:	4932      	ldr	r1, [pc, #200]	; (81044f8 <RCCEx_PLL2_Config+0x160>)
 810442e:	4313      	orrs	r3, r2
 8104430:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8104432:	4b31      	ldr	r3, [pc, #196]	; (81044f8 <RCCEx_PLL2_Config+0x160>)
 8104434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104436:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 810443a:	687b      	ldr	r3, [r7, #4]
 810443c:	695b      	ldr	r3, [r3, #20]
 810443e:	492e      	ldr	r1, [pc, #184]	; (81044f8 <RCCEx_PLL2_Config+0x160>)
 8104440:	4313      	orrs	r3, r2
 8104442:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8104444:	4b2c      	ldr	r3, [pc, #176]	; (81044f8 <RCCEx_PLL2_Config+0x160>)
 8104446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104448:	f023 0220 	bic.w	r2, r3, #32
 810444c:	687b      	ldr	r3, [r7, #4]
 810444e:	699b      	ldr	r3, [r3, #24]
 8104450:	4929      	ldr	r1, [pc, #164]	; (81044f8 <RCCEx_PLL2_Config+0x160>)
 8104452:	4313      	orrs	r3, r2
 8104454:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8104456:	4b28      	ldr	r3, [pc, #160]	; (81044f8 <RCCEx_PLL2_Config+0x160>)
 8104458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810445a:	4a27      	ldr	r2, [pc, #156]	; (81044f8 <RCCEx_PLL2_Config+0x160>)
 810445c:	f023 0310 	bic.w	r3, r3, #16
 8104460:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8104462:	4b25      	ldr	r3, [pc, #148]	; (81044f8 <RCCEx_PLL2_Config+0x160>)
 8104464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8104466:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 810446a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 810446e:	687a      	ldr	r2, [r7, #4]
 8104470:	69d2      	ldr	r2, [r2, #28]
 8104472:	00d2      	lsls	r2, r2, #3
 8104474:	4920      	ldr	r1, [pc, #128]	; (81044f8 <RCCEx_PLL2_Config+0x160>)
 8104476:	4313      	orrs	r3, r2
 8104478:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 810447a:	4b1f      	ldr	r3, [pc, #124]	; (81044f8 <RCCEx_PLL2_Config+0x160>)
 810447c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810447e:	4a1e      	ldr	r2, [pc, #120]	; (81044f8 <RCCEx_PLL2_Config+0x160>)
 8104480:	f043 0310 	orr.w	r3, r3, #16
 8104484:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8104486:	683b      	ldr	r3, [r7, #0]
 8104488:	2b00      	cmp	r3, #0
 810448a:	d106      	bne.n	810449a <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 810448c:	4b1a      	ldr	r3, [pc, #104]	; (81044f8 <RCCEx_PLL2_Config+0x160>)
 810448e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104490:	4a19      	ldr	r2, [pc, #100]	; (81044f8 <RCCEx_PLL2_Config+0x160>)
 8104492:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8104496:	62d3      	str	r3, [r2, #44]	; 0x2c
 8104498:	e00f      	b.n	81044ba <RCCEx_PLL2_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 810449a:	683b      	ldr	r3, [r7, #0]
 810449c:	2b01      	cmp	r3, #1
 810449e:	d106      	bne.n	81044ae <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 81044a0:	4b15      	ldr	r3, [pc, #84]	; (81044f8 <RCCEx_PLL2_Config+0x160>)
 81044a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81044a4:	4a14      	ldr	r2, [pc, #80]	; (81044f8 <RCCEx_PLL2_Config+0x160>)
 81044a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 81044aa:	62d3      	str	r3, [r2, #44]	; 0x2c
 81044ac:	e005      	b.n	81044ba <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 81044ae:	4b12      	ldr	r3, [pc, #72]	; (81044f8 <RCCEx_PLL2_Config+0x160>)
 81044b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81044b2:	4a11      	ldr	r2, [pc, #68]	; (81044f8 <RCCEx_PLL2_Config+0x160>)
 81044b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 81044b8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 81044ba:	4b0f      	ldr	r3, [pc, #60]	; (81044f8 <RCCEx_PLL2_Config+0x160>)
 81044bc:	681b      	ldr	r3, [r3, #0]
 81044be:	4a0e      	ldr	r2, [pc, #56]	; (81044f8 <RCCEx_PLL2_Config+0x160>)
 81044c0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 81044c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81044c6:	f7fd fb71 	bl	8101bac <HAL_GetTick>
 81044ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 81044cc:	e008      	b.n	81044e0 <RCCEx_PLL2_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 81044ce:	f7fd fb6d 	bl	8101bac <HAL_GetTick>
 81044d2:	4602      	mov	r2, r0
 81044d4:	68bb      	ldr	r3, [r7, #8]
 81044d6:	1ad3      	subs	r3, r2, r3
 81044d8:	2b02      	cmp	r3, #2
 81044da:	d901      	bls.n	81044e0 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 81044dc:	2303      	movs	r3, #3
 81044de:	e006      	b.n	81044ee <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 81044e0:	4b05      	ldr	r3, [pc, #20]	; (81044f8 <RCCEx_PLL2_Config+0x160>)
 81044e2:	681b      	ldr	r3, [r3, #0]
 81044e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81044e8:	2b00      	cmp	r3, #0
 81044ea:	d0f0      	beq.n	81044ce <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 81044ec:	7bfb      	ldrb	r3, [r7, #15]
}
 81044ee:	4618      	mov	r0, r3
 81044f0:	3710      	adds	r7, #16
 81044f2:	46bd      	mov	sp, r7
 81044f4:	bd80      	pop	{r7, pc}
 81044f6:	bf00      	nop
 81044f8:	58024400 	.word	0x58024400

081044fc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 81044fc:	b580      	push	{r7, lr}
 81044fe:	b084      	sub	sp, #16
 8104500:	af00      	add	r7, sp, #0
 8104502:	6078      	str	r0, [r7, #4]
 8104504:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8104506:	2300      	movs	r3, #0
 8104508:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 810450a:	4b54      	ldr	r3, [pc, #336]	; (810465c <RCCEx_PLL3_Config+0x160>)
 810450c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810450e:	f003 0303 	and.w	r3, r3, #3
 8104512:	2b03      	cmp	r3, #3
 8104514:	d101      	bne.n	810451a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8104516:	2301      	movs	r3, #1
 8104518:	e09b      	b.n	8104652 <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 810451a:	4b50      	ldr	r3, [pc, #320]	; (810465c <RCCEx_PLL3_Config+0x160>)
 810451c:	681b      	ldr	r3, [r3, #0]
 810451e:	4a4f      	ldr	r2, [pc, #316]	; (810465c <RCCEx_PLL3_Config+0x160>)
 8104520:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8104524:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8104526:	f7fd fb41 	bl	8101bac <HAL_GetTick>
 810452a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 810452c:	e008      	b.n	8104540 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 810452e:	f7fd fb3d 	bl	8101bac <HAL_GetTick>
 8104532:	4602      	mov	r2, r0
 8104534:	68bb      	ldr	r3, [r7, #8]
 8104536:	1ad3      	subs	r3, r2, r3
 8104538:	2b02      	cmp	r3, #2
 810453a:	d901      	bls.n	8104540 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 810453c:	2303      	movs	r3, #3
 810453e:	e088      	b.n	8104652 <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8104540:	4b46      	ldr	r3, [pc, #280]	; (810465c <RCCEx_PLL3_Config+0x160>)
 8104542:	681b      	ldr	r3, [r3, #0]
 8104544:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8104548:	2b00      	cmp	r3, #0
 810454a:	d1f0      	bne.n	810452e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 810454c:	4b43      	ldr	r3, [pc, #268]	; (810465c <RCCEx_PLL3_Config+0x160>)
 810454e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104550:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8104554:	687b      	ldr	r3, [r7, #4]
 8104556:	681b      	ldr	r3, [r3, #0]
 8104558:	051b      	lsls	r3, r3, #20
 810455a:	4940      	ldr	r1, [pc, #256]	; (810465c <RCCEx_PLL3_Config+0x160>)
 810455c:	4313      	orrs	r3, r2
 810455e:	628b      	str	r3, [r1, #40]	; 0x28
 8104560:	687b      	ldr	r3, [r7, #4]
 8104562:	685b      	ldr	r3, [r3, #4]
 8104564:	3b01      	subs	r3, #1
 8104566:	f3c3 0208 	ubfx	r2, r3, #0, #9
 810456a:	687b      	ldr	r3, [r7, #4]
 810456c:	689b      	ldr	r3, [r3, #8]
 810456e:	3b01      	subs	r3, #1
 8104570:	025b      	lsls	r3, r3, #9
 8104572:	b29b      	uxth	r3, r3
 8104574:	431a      	orrs	r2, r3
 8104576:	687b      	ldr	r3, [r7, #4]
 8104578:	68db      	ldr	r3, [r3, #12]
 810457a:	3b01      	subs	r3, #1
 810457c:	041b      	lsls	r3, r3, #16
 810457e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8104582:	431a      	orrs	r2, r3
 8104584:	687b      	ldr	r3, [r7, #4]
 8104586:	691b      	ldr	r3, [r3, #16]
 8104588:	3b01      	subs	r3, #1
 810458a:	061b      	lsls	r3, r3, #24
 810458c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8104590:	4932      	ldr	r1, [pc, #200]	; (810465c <RCCEx_PLL3_Config+0x160>)
 8104592:	4313      	orrs	r3, r2
 8104594:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8104596:	4b31      	ldr	r3, [pc, #196]	; (810465c <RCCEx_PLL3_Config+0x160>)
 8104598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810459a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 810459e:	687b      	ldr	r3, [r7, #4]
 81045a0:	695b      	ldr	r3, [r3, #20]
 81045a2:	492e      	ldr	r1, [pc, #184]	; (810465c <RCCEx_PLL3_Config+0x160>)
 81045a4:	4313      	orrs	r3, r2
 81045a6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 81045a8:	4b2c      	ldr	r3, [pc, #176]	; (810465c <RCCEx_PLL3_Config+0x160>)
 81045aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81045ac:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 81045b0:	687b      	ldr	r3, [r7, #4]
 81045b2:	699b      	ldr	r3, [r3, #24]
 81045b4:	4929      	ldr	r1, [pc, #164]	; (810465c <RCCEx_PLL3_Config+0x160>)
 81045b6:	4313      	orrs	r3, r2
 81045b8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 81045ba:	4b28      	ldr	r3, [pc, #160]	; (810465c <RCCEx_PLL3_Config+0x160>)
 81045bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81045be:	4a27      	ldr	r2, [pc, #156]	; (810465c <RCCEx_PLL3_Config+0x160>)
 81045c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 81045c4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 81045c6:	4b25      	ldr	r3, [pc, #148]	; (810465c <RCCEx_PLL3_Config+0x160>)
 81045c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81045ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 81045ce:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 81045d2:	687a      	ldr	r2, [r7, #4]
 81045d4:	69d2      	ldr	r2, [r2, #28]
 81045d6:	00d2      	lsls	r2, r2, #3
 81045d8:	4920      	ldr	r1, [pc, #128]	; (810465c <RCCEx_PLL3_Config+0x160>)
 81045da:	4313      	orrs	r3, r2
 81045dc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 81045de:	4b1f      	ldr	r3, [pc, #124]	; (810465c <RCCEx_PLL3_Config+0x160>)
 81045e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81045e2:	4a1e      	ldr	r2, [pc, #120]	; (810465c <RCCEx_PLL3_Config+0x160>)
 81045e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 81045e8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 81045ea:	683b      	ldr	r3, [r7, #0]
 81045ec:	2b00      	cmp	r3, #0
 81045ee:	d106      	bne.n	81045fe <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 81045f0:	4b1a      	ldr	r3, [pc, #104]	; (810465c <RCCEx_PLL3_Config+0x160>)
 81045f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81045f4:	4a19      	ldr	r2, [pc, #100]	; (810465c <RCCEx_PLL3_Config+0x160>)
 81045f6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 81045fa:	62d3      	str	r3, [r2, #44]	; 0x2c
 81045fc:	e00f      	b.n	810461e <RCCEx_PLL3_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 81045fe:	683b      	ldr	r3, [r7, #0]
 8104600:	2b01      	cmp	r3, #1
 8104602:	d106      	bne.n	8104612 <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8104604:	4b15      	ldr	r3, [pc, #84]	; (810465c <RCCEx_PLL3_Config+0x160>)
 8104606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104608:	4a14      	ldr	r2, [pc, #80]	; (810465c <RCCEx_PLL3_Config+0x160>)
 810460a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 810460e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8104610:	e005      	b.n	810461e <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8104612:	4b12      	ldr	r3, [pc, #72]	; (810465c <RCCEx_PLL3_Config+0x160>)
 8104614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104616:	4a11      	ldr	r2, [pc, #68]	; (810465c <RCCEx_PLL3_Config+0x160>)
 8104618:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 810461c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 810461e:	4b0f      	ldr	r3, [pc, #60]	; (810465c <RCCEx_PLL3_Config+0x160>)
 8104620:	681b      	ldr	r3, [r3, #0]
 8104622:	4a0e      	ldr	r2, [pc, #56]	; (810465c <RCCEx_PLL3_Config+0x160>)
 8104624:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8104628:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810462a:	f7fd fabf 	bl	8101bac <HAL_GetTick>
 810462e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8104630:	e008      	b.n	8104644 <RCCEx_PLL3_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8104632:	f7fd fabb 	bl	8101bac <HAL_GetTick>
 8104636:	4602      	mov	r2, r0
 8104638:	68bb      	ldr	r3, [r7, #8]
 810463a:	1ad3      	subs	r3, r2, r3
 810463c:	2b02      	cmp	r3, #2
 810463e:	d901      	bls.n	8104644 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8104640:	2303      	movs	r3, #3
 8104642:	e006      	b.n	8104652 <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8104644:	4b05      	ldr	r3, [pc, #20]	; (810465c <RCCEx_PLL3_Config+0x160>)
 8104646:	681b      	ldr	r3, [r3, #0]
 8104648:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810464c:	2b00      	cmp	r3, #0
 810464e:	d0f0      	beq.n	8104632 <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 8104650:	7bfb      	ldrb	r3, [r7, #15]
}
 8104652:	4618      	mov	r0, r3
 8104654:	3710      	adds	r7, #16
 8104656:	46bd      	mov	sp, r7
 8104658:	bd80      	pop	{r7, pc}
 810465a:	bf00      	nop
 810465c:	58024400 	.word	0x58024400

08104660 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8104660:	b580      	push	{r7, lr}
 8104662:	b082      	sub	sp, #8
 8104664:	af00      	add	r7, sp, #0
 8104666:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8104668:	687b      	ldr	r3, [r7, #4]
 810466a:	2b00      	cmp	r3, #0
 810466c:	d101      	bne.n	8104672 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 810466e:	2301      	movs	r3, #1
 8104670:	e049      	b.n	8104706 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8104672:	687b      	ldr	r3, [r7, #4]
 8104674:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8104678:	b2db      	uxtb	r3, r3
 810467a:	2b00      	cmp	r3, #0
 810467c:	d106      	bne.n	810468c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 810467e:	687b      	ldr	r3, [r7, #4]
 8104680:	2200      	movs	r2, #0
 8104682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8104686:	6878      	ldr	r0, [r7, #4]
 8104688:	f7fd f960 	bl	810194c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810468c:	687b      	ldr	r3, [r7, #4]
 810468e:	2202      	movs	r2, #2
 8104690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8104694:	687b      	ldr	r3, [r7, #4]
 8104696:	681a      	ldr	r2, [r3, #0]
 8104698:	687b      	ldr	r3, [r7, #4]
 810469a:	3304      	adds	r3, #4
 810469c:	4619      	mov	r1, r3
 810469e:	4610      	mov	r0, r2
 81046a0:	f000 fcf4 	bl	810508c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 81046a4:	687b      	ldr	r3, [r7, #4]
 81046a6:	2201      	movs	r2, #1
 81046a8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 81046ac:	687b      	ldr	r3, [r7, #4]
 81046ae:	2201      	movs	r2, #1
 81046b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 81046b4:	687b      	ldr	r3, [r7, #4]
 81046b6:	2201      	movs	r2, #1
 81046b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 81046bc:	687b      	ldr	r3, [r7, #4]
 81046be:	2201      	movs	r2, #1
 81046c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 81046c4:	687b      	ldr	r3, [r7, #4]
 81046c6:	2201      	movs	r2, #1
 81046c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 81046cc:	687b      	ldr	r3, [r7, #4]
 81046ce:	2201      	movs	r2, #1
 81046d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 81046d4:	687b      	ldr	r3, [r7, #4]
 81046d6:	2201      	movs	r2, #1
 81046d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 81046dc:	687b      	ldr	r3, [r7, #4]
 81046de:	2201      	movs	r2, #1
 81046e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 81046e4:	687b      	ldr	r3, [r7, #4]
 81046e6:	2201      	movs	r2, #1
 81046e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 81046ec:	687b      	ldr	r3, [r7, #4]
 81046ee:	2201      	movs	r2, #1
 81046f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 81046f4:	687b      	ldr	r3, [r7, #4]
 81046f6:	2201      	movs	r2, #1
 81046f8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 81046fc:	687b      	ldr	r3, [r7, #4]
 81046fe:	2201      	movs	r2, #1
 8104700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8104704:	2300      	movs	r3, #0
}
 8104706:	4618      	mov	r0, r3
 8104708:	3708      	adds	r7, #8
 810470a:	46bd      	mov	sp, r7
 810470c:	bd80      	pop	{r7, pc}
	...

08104710 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8104710:	b580      	push	{r7, lr}
 8104712:	b084      	sub	sp, #16
 8104714:	af00      	add	r7, sp, #0
 8104716:	6078      	str	r0, [r7, #4]
 8104718:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 810471a:	683b      	ldr	r3, [r7, #0]
 810471c:	2b00      	cmp	r3, #0
 810471e:	d109      	bne.n	8104734 <HAL_TIM_PWM_Start+0x24>
 8104720:	687b      	ldr	r3, [r7, #4]
 8104722:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8104726:	b2db      	uxtb	r3, r3
 8104728:	2b01      	cmp	r3, #1
 810472a:	bf14      	ite	ne
 810472c:	2301      	movne	r3, #1
 810472e:	2300      	moveq	r3, #0
 8104730:	b2db      	uxtb	r3, r3
 8104732:	e03c      	b.n	81047ae <HAL_TIM_PWM_Start+0x9e>
 8104734:	683b      	ldr	r3, [r7, #0]
 8104736:	2b04      	cmp	r3, #4
 8104738:	d109      	bne.n	810474e <HAL_TIM_PWM_Start+0x3e>
 810473a:	687b      	ldr	r3, [r7, #4]
 810473c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8104740:	b2db      	uxtb	r3, r3
 8104742:	2b01      	cmp	r3, #1
 8104744:	bf14      	ite	ne
 8104746:	2301      	movne	r3, #1
 8104748:	2300      	moveq	r3, #0
 810474a:	b2db      	uxtb	r3, r3
 810474c:	e02f      	b.n	81047ae <HAL_TIM_PWM_Start+0x9e>
 810474e:	683b      	ldr	r3, [r7, #0]
 8104750:	2b08      	cmp	r3, #8
 8104752:	d109      	bne.n	8104768 <HAL_TIM_PWM_Start+0x58>
 8104754:	687b      	ldr	r3, [r7, #4]
 8104756:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810475a:	b2db      	uxtb	r3, r3
 810475c:	2b01      	cmp	r3, #1
 810475e:	bf14      	ite	ne
 8104760:	2301      	movne	r3, #1
 8104762:	2300      	moveq	r3, #0
 8104764:	b2db      	uxtb	r3, r3
 8104766:	e022      	b.n	81047ae <HAL_TIM_PWM_Start+0x9e>
 8104768:	683b      	ldr	r3, [r7, #0]
 810476a:	2b0c      	cmp	r3, #12
 810476c:	d109      	bne.n	8104782 <HAL_TIM_PWM_Start+0x72>
 810476e:	687b      	ldr	r3, [r7, #4]
 8104770:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8104774:	b2db      	uxtb	r3, r3
 8104776:	2b01      	cmp	r3, #1
 8104778:	bf14      	ite	ne
 810477a:	2301      	movne	r3, #1
 810477c:	2300      	moveq	r3, #0
 810477e:	b2db      	uxtb	r3, r3
 8104780:	e015      	b.n	81047ae <HAL_TIM_PWM_Start+0x9e>
 8104782:	683b      	ldr	r3, [r7, #0]
 8104784:	2b10      	cmp	r3, #16
 8104786:	d109      	bne.n	810479c <HAL_TIM_PWM_Start+0x8c>
 8104788:	687b      	ldr	r3, [r7, #4]
 810478a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 810478e:	b2db      	uxtb	r3, r3
 8104790:	2b01      	cmp	r3, #1
 8104792:	bf14      	ite	ne
 8104794:	2301      	movne	r3, #1
 8104796:	2300      	moveq	r3, #0
 8104798:	b2db      	uxtb	r3, r3
 810479a:	e008      	b.n	81047ae <HAL_TIM_PWM_Start+0x9e>
 810479c:	687b      	ldr	r3, [r7, #4]
 810479e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 81047a2:	b2db      	uxtb	r3, r3
 81047a4:	2b01      	cmp	r3, #1
 81047a6:	bf14      	ite	ne
 81047a8:	2301      	movne	r3, #1
 81047aa:	2300      	moveq	r3, #0
 81047ac:	b2db      	uxtb	r3, r3
 81047ae:	2b00      	cmp	r3, #0
 81047b0:	d001      	beq.n	81047b6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 81047b2:	2301      	movs	r3, #1
 81047b4:	e0a1      	b.n	81048fa <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 81047b6:	683b      	ldr	r3, [r7, #0]
 81047b8:	2b00      	cmp	r3, #0
 81047ba:	d104      	bne.n	81047c6 <HAL_TIM_PWM_Start+0xb6>
 81047bc:	687b      	ldr	r3, [r7, #4]
 81047be:	2202      	movs	r2, #2
 81047c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 81047c4:	e023      	b.n	810480e <HAL_TIM_PWM_Start+0xfe>
 81047c6:	683b      	ldr	r3, [r7, #0]
 81047c8:	2b04      	cmp	r3, #4
 81047ca:	d104      	bne.n	81047d6 <HAL_TIM_PWM_Start+0xc6>
 81047cc:	687b      	ldr	r3, [r7, #4]
 81047ce:	2202      	movs	r2, #2
 81047d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 81047d4:	e01b      	b.n	810480e <HAL_TIM_PWM_Start+0xfe>
 81047d6:	683b      	ldr	r3, [r7, #0]
 81047d8:	2b08      	cmp	r3, #8
 81047da:	d104      	bne.n	81047e6 <HAL_TIM_PWM_Start+0xd6>
 81047dc:	687b      	ldr	r3, [r7, #4]
 81047de:	2202      	movs	r2, #2
 81047e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 81047e4:	e013      	b.n	810480e <HAL_TIM_PWM_Start+0xfe>
 81047e6:	683b      	ldr	r3, [r7, #0]
 81047e8:	2b0c      	cmp	r3, #12
 81047ea:	d104      	bne.n	81047f6 <HAL_TIM_PWM_Start+0xe6>
 81047ec:	687b      	ldr	r3, [r7, #4]
 81047ee:	2202      	movs	r2, #2
 81047f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 81047f4:	e00b      	b.n	810480e <HAL_TIM_PWM_Start+0xfe>
 81047f6:	683b      	ldr	r3, [r7, #0]
 81047f8:	2b10      	cmp	r3, #16
 81047fa:	d104      	bne.n	8104806 <HAL_TIM_PWM_Start+0xf6>
 81047fc:	687b      	ldr	r3, [r7, #4]
 81047fe:	2202      	movs	r2, #2
 8104800:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8104804:	e003      	b.n	810480e <HAL_TIM_PWM_Start+0xfe>
 8104806:	687b      	ldr	r3, [r7, #4]
 8104808:	2202      	movs	r2, #2
 810480a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 810480e:	687b      	ldr	r3, [r7, #4]
 8104810:	681b      	ldr	r3, [r3, #0]
 8104812:	2201      	movs	r2, #1
 8104814:	6839      	ldr	r1, [r7, #0]
 8104816:	4618      	mov	r0, r3
 8104818:	f000 ffa8 	bl	810576c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 810481c:	687b      	ldr	r3, [r7, #4]
 810481e:	681b      	ldr	r3, [r3, #0]
 8104820:	4a38      	ldr	r2, [pc, #224]	; (8104904 <HAL_TIM_PWM_Start+0x1f4>)
 8104822:	4293      	cmp	r3, r2
 8104824:	d013      	beq.n	810484e <HAL_TIM_PWM_Start+0x13e>
 8104826:	687b      	ldr	r3, [r7, #4]
 8104828:	681b      	ldr	r3, [r3, #0]
 810482a:	4a37      	ldr	r2, [pc, #220]	; (8104908 <HAL_TIM_PWM_Start+0x1f8>)
 810482c:	4293      	cmp	r3, r2
 810482e:	d00e      	beq.n	810484e <HAL_TIM_PWM_Start+0x13e>
 8104830:	687b      	ldr	r3, [r7, #4]
 8104832:	681b      	ldr	r3, [r3, #0]
 8104834:	4a35      	ldr	r2, [pc, #212]	; (810490c <HAL_TIM_PWM_Start+0x1fc>)
 8104836:	4293      	cmp	r3, r2
 8104838:	d009      	beq.n	810484e <HAL_TIM_PWM_Start+0x13e>
 810483a:	687b      	ldr	r3, [r7, #4]
 810483c:	681b      	ldr	r3, [r3, #0]
 810483e:	4a34      	ldr	r2, [pc, #208]	; (8104910 <HAL_TIM_PWM_Start+0x200>)
 8104840:	4293      	cmp	r3, r2
 8104842:	d004      	beq.n	810484e <HAL_TIM_PWM_Start+0x13e>
 8104844:	687b      	ldr	r3, [r7, #4]
 8104846:	681b      	ldr	r3, [r3, #0]
 8104848:	4a32      	ldr	r2, [pc, #200]	; (8104914 <HAL_TIM_PWM_Start+0x204>)
 810484a:	4293      	cmp	r3, r2
 810484c:	d101      	bne.n	8104852 <HAL_TIM_PWM_Start+0x142>
 810484e:	2301      	movs	r3, #1
 8104850:	e000      	b.n	8104854 <HAL_TIM_PWM_Start+0x144>
 8104852:	2300      	movs	r3, #0
 8104854:	2b00      	cmp	r3, #0
 8104856:	d007      	beq.n	8104868 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8104858:	687b      	ldr	r3, [r7, #4]
 810485a:	681b      	ldr	r3, [r3, #0]
 810485c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 810485e:	687b      	ldr	r3, [r7, #4]
 8104860:	681b      	ldr	r3, [r3, #0]
 8104862:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8104866:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8104868:	687b      	ldr	r3, [r7, #4]
 810486a:	681b      	ldr	r3, [r3, #0]
 810486c:	4a25      	ldr	r2, [pc, #148]	; (8104904 <HAL_TIM_PWM_Start+0x1f4>)
 810486e:	4293      	cmp	r3, r2
 8104870:	d022      	beq.n	81048b8 <HAL_TIM_PWM_Start+0x1a8>
 8104872:	687b      	ldr	r3, [r7, #4]
 8104874:	681b      	ldr	r3, [r3, #0]
 8104876:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810487a:	d01d      	beq.n	81048b8 <HAL_TIM_PWM_Start+0x1a8>
 810487c:	687b      	ldr	r3, [r7, #4]
 810487e:	681b      	ldr	r3, [r3, #0]
 8104880:	4a25      	ldr	r2, [pc, #148]	; (8104918 <HAL_TIM_PWM_Start+0x208>)
 8104882:	4293      	cmp	r3, r2
 8104884:	d018      	beq.n	81048b8 <HAL_TIM_PWM_Start+0x1a8>
 8104886:	687b      	ldr	r3, [r7, #4]
 8104888:	681b      	ldr	r3, [r3, #0]
 810488a:	4a24      	ldr	r2, [pc, #144]	; (810491c <HAL_TIM_PWM_Start+0x20c>)
 810488c:	4293      	cmp	r3, r2
 810488e:	d013      	beq.n	81048b8 <HAL_TIM_PWM_Start+0x1a8>
 8104890:	687b      	ldr	r3, [r7, #4]
 8104892:	681b      	ldr	r3, [r3, #0]
 8104894:	4a22      	ldr	r2, [pc, #136]	; (8104920 <HAL_TIM_PWM_Start+0x210>)
 8104896:	4293      	cmp	r3, r2
 8104898:	d00e      	beq.n	81048b8 <HAL_TIM_PWM_Start+0x1a8>
 810489a:	687b      	ldr	r3, [r7, #4]
 810489c:	681b      	ldr	r3, [r3, #0]
 810489e:	4a1a      	ldr	r2, [pc, #104]	; (8104908 <HAL_TIM_PWM_Start+0x1f8>)
 81048a0:	4293      	cmp	r3, r2
 81048a2:	d009      	beq.n	81048b8 <HAL_TIM_PWM_Start+0x1a8>
 81048a4:	687b      	ldr	r3, [r7, #4]
 81048a6:	681b      	ldr	r3, [r3, #0]
 81048a8:	4a1e      	ldr	r2, [pc, #120]	; (8104924 <HAL_TIM_PWM_Start+0x214>)
 81048aa:	4293      	cmp	r3, r2
 81048ac:	d004      	beq.n	81048b8 <HAL_TIM_PWM_Start+0x1a8>
 81048ae:	687b      	ldr	r3, [r7, #4]
 81048b0:	681b      	ldr	r3, [r3, #0]
 81048b2:	4a16      	ldr	r2, [pc, #88]	; (810490c <HAL_TIM_PWM_Start+0x1fc>)
 81048b4:	4293      	cmp	r3, r2
 81048b6:	d115      	bne.n	81048e4 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 81048b8:	687b      	ldr	r3, [r7, #4]
 81048ba:	681b      	ldr	r3, [r3, #0]
 81048bc:	689a      	ldr	r2, [r3, #8]
 81048be:	4b1a      	ldr	r3, [pc, #104]	; (8104928 <HAL_TIM_PWM_Start+0x218>)
 81048c0:	4013      	ands	r3, r2
 81048c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81048c4:	68fb      	ldr	r3, [r7, #12]
 81048c6:	2b06      	cmp	r3, #6
 81048c8:	d015      	beq.n	81048f6 <HAL_TIM_PWM_Start+0x1e6>
 81048ca:	68fb      	ldr	r3, [r7, #12]
 81048cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81048d0:	d011      	beq.n	81048f6 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 81048d2:	687b      	ldr	r3, [r7, #4]
 81048d4:	681b      	ldr	r3, [r3, #0]
 81048d6:	681a      	ldr	r2, [r3, #0]
 81048d8:	687b      	ldr	r3, [r7, #4]
 81048da:	681b      	ldr	r3, [r3, #0]
 81048dc:	f042 0201 	orr.w	r2, r2, #1
 81048e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81048e2:	e008      	b.n	81048f6 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 81048e4:	687b      	ldr	r3, [r7, #4]
 81048e6:	681b      	ldr	r3, [r3, #0]
 81048e8:	681a      	ldr	r2, [r3, #0]
 81048ea:	687b      	ldr	r3, [r7, #4]
 81048ec:	681b      	ldr	r3, [r3, #0]
 81048ee:	f042 0201 	orr.w	r2, r2, #1
 81048f2:	601a      	str	r2, [r3, #0]
 81048f4:	e000      	b.n	81048f8 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81048f6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 81048f8:	2300      	movs	r3, #0
}
 81048fa:	4618      	mov	r0, r3
 81048fc:	3710      	adds	r7, #16
 81048fe:	46bd      	mov	sp, r7
 8104900:	bd80      	pop	{r7, pc}
 8104902:	bf00      	nop
 8104904:	40010000 	.word	0x40010000
 8104908:	40010400 	.word	0x40010400
 810490c:	40014000 	.word	0x40014000
 8104910:	40014400 	.word	0x40014400
 8104914:	40014800 	.word	0x40014800
 8104918:	40000400 	.word	0x40000400
 810491c:	40000800 	.word	0x40000800
 8104920:	40000c00 	.word	0x40000c00
 8104924:	40001800 	.word	0x40001800
 8104928:	00010007 	.word	0x00010007

0810492c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 810492c:	b580      	push	{r7, lr}
 810492e:	b086      	sub	sp, #24
 8104930:	af00      	add	r7, sp, #0
 8104932:	6078      	str	r0, [r7, #4]
 8104934:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8104936:	687b      	ldr	r3, [r7, #4]
 8104938:	2b00      	cmp	r3, #0
 810493a:	d101      	bne.n	8104940 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 810493c:	2301      	movs	r3, #1
 810493e:	e097      	b.n	8104a70 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8104940:	687b      	ldr	r3, [r7, #4]
 8104942:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8104946:	b2db      	uxtb	r3, r3
 8104948:	2b00      	cmp	r3, #0
 810494a:	d106      	bne.n	810495a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 810494c:	687b      	ldr	r3, [r7, #4]
 810494e:	2200      	movs	r2, #0
 8104950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8104954:	6878      	ldr	r0, [r7, #4]
 8104956:	f7fc ff89 	bl	810186c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810495a:	687b      	ldr	r3, [r7, #4]
 810495c:	2202      	movs	r2, #2
 810495e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8104962:	687b      	ldr	r3, [r7, #4]
 8104964:	681b      	ldr	r3, [r3, #0]
 8104966:	689b      	ldr	r3, [r3, #8]
 8104968:	687a      	ldr	r2, [r7, #4]
 810496a:	6812      	ldr	r2, [r2, #0]
 810496c:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8104970:	f023 0307 	bic.w	r3, r3, #7
 8104974:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8104976:	687b      	ldr	r3, [r7, #4]
 8104978:	681a      	ldr	r2, [r3, #0]
 810497a:	687b      	ldr	r3, [r7, #4]
 810497c:	3304      	adds	r3, #4
 810497e:	4619      	mov	r1, r3
 8104980:	4610      	mov	r0, r2
 8104982:	f000 fb83 	bl	810508c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8104986:	687b      	ldr	r3, [r7, #4]
 8104988:	681b      	ldr	r3, [r3, #0]
 810498a:	689b      	ldr	r3, [r3, #8]
 810498c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 810498e:	687b      	ldr	r3, [r7, #4]
 8104990:	681b      	ldr	r3, [r3, #0]
 8104992:	699b      	ldr	r3, [r3, #24]
 8104994:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8104996:	687b      	ldr	r3, [r7, #4]
 8104998:	681b      	ldr	r3, [r3, #0]
 810499a:	6a1b      	ldr	r3, [r3, #32]
 810499c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 810499e:	683b      	ldr	r3, [r7, #0]
 81049a0:	681b      	ldr	r3, [r3, #0]
 81049a2:	697a      	ldr	r2, [r7, #20]
 81049a4:	4313      	orrs	r3, r2
 81049a6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 81049a8:	693b      	ldr	r3, [r7, #16]
 81049aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 81049ae:	f023 0303 	bic.w	r3, r3, #3
 81049b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 81049b4:	683b      	ldr	r3, [r7, #0]
 81049b6:	689a      	ldr	r2, [r3, #8]
 81049b8:	683b      	ldr	r3, [r7, #0]
 81049ba:	699b      	ldr	r3, [r3, #24]
 81049bc:	021b      	lsls	r3, r3, #8
 81049be:	4313      	orrs	r3, r2
 81049c0:	693a      	ldr	r2, [r7, #16]
 81049c2:	4313      	orrs	r3, r2
 81049c4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 81049c6:	693b      	ldr	r3, [r7, #16]
 81049c8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 81049cc:	f023 030c 	bic.w	r3, r3, #12
 81049d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 81049d2:	693b      	ldr	r3, [r7, #16]
 81049d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 81049d8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 81049dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 81049de:	683b      	ldr	r3, [r7, #0]
 81049e0:	68da      	ldr	r2, [r3, #12]
 81049e2:	683b      	ldr	r3, [r7, #0]
 81049e4:	69db      	ldr	r3, [r3, #28]
 81049e6:	021b      	lsls	r3, r3, #8
 81049e8:	4313      	orrs	r3, r2
 81049ea:	693a      	ldr	r2, [r7, #16]
 81049ec:	4313      	orrs	r3, r2
 81049ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 81049f0:	683b      	ldr	r3, [r7, #0]
 81049f2:	691b      	ldr	r3, [r3, #16]
 81049f4:	011a      	lsls	r2, r3, #4
 81049f6:	683b      	ldr	r3, [r7, #0]
 81049f8:	6a1b      	ldr	r3, [r3, #32]
 81049fa:	031b      	lsls	r3, r3, #12
 81049fc:	4313      	orrs	r3, r2
 81049fe:	693a      	ldr	r2, [r7, #16]
 8104a00:	4313      	orrs	r3, r2
 8104a02:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8104a04:	68fb      	ldr	r3, [r7, #12]
 8104a06:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8104a0a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8104a0c:	68fb      	ldr	r3, [r7, #12]
 8104a0e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8104a12:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8104a14:	683b      	ldr	r3, [r7, #0]
 8104a16:	685a      	ldr	r2, [r3, #4]
 8104a18:	683b      	ldr	r3, [r7, #0]
 8104a1a:	695b      	ldr	r3, [r3, #20]
 8104a1c:	011b      	lsls	r3, r3, #4
 8104a1e:	4313      	orrs	r3, r2
 8104a20:	68fa      	ldr	r2, [r7, #12]
 8104a22:	4313      	orrs	r3, r2
 8104a24:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8104a26:	687b      	ldr	r3, [r7, #4]
 8104a28:	681b      	ldr	r3, [r3, #0]
 8104a2a:	697a      	ldr	r2, [r7, #20]
 8104a2c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8104a2e:	687b      	ldr	r3, [r7, #4]
 8104a30:	681b      	ldr	r3, [r3, #0]
 8104a32:	693a      	ldr	r2, [r7, #16]
 8104a34:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8104a36:	687b      	ldr	r3, [r7, #4]
 8104a38:	681b      	ldr	r3, [r3, #0]
 8104a3a:	68fa      	ldr	r2, [r7, #12]
 8104a3c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8104a3e:	687b      	ldr	r3, [r7, #4]
 8104a40:	2201      	movs	r2, #1
 8104a42:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8104a46:	687b      	ldr	r3, [r7, #4]
 8104a48:	2201      	movs	r2, #1
 8104a4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8104a4e:	687b      	ldr	r3, [r7, #4]
 8104a50:	2201      	movs	r2, #1
 8104a52:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8104a56:	687b      	ldr	r3, [r7, #4]
 8104a58:	2201      	movs	r2, #1
 8104a5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8104a5e:	687b      	ldr	r3, [r7, #4]
 8104a60:	2201      	movs	r2, #1
 8104a62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8104a66:	687b      	ldr	r3, [r7, #4]
 8104a68:	2201      	movs	r2, #1
 8104a6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8104a6e:	2300      	movs	r3, #0
}
 8104a70:	4618      	mov	r0, r3
 8104a72:	3718      	adds	r7, #24
 8104a74:	46bd      	mov	sp, r7
 8104a76:	bd80      	pop	{r7, pc}

08104a78 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8104a78:	b580      	push	{r7, lr}
 8104a7a:	b084      	sub	sp, #16
 8104a7c:	af00      	add	r7, sp, #0
 8104a7e:	6078      	str	r0, [r7, #4]
 8104a80:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8104a82:	687b      	ldr	r3, [r7, #4]
 8104a84:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8104a88:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8104a8a:	687b      	ldr	r3, [r7, #4]
 8104a8c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8104a90:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8104a92:	687b      	ldr	r3, [r7, #4]
 8104a94:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8104a98:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8104a9a:	687b      	ldr	r3, [r7, #4]
 8104a9c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8104aa0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8104aa2:	683b      	ldr	r3, [r7, #0]
 8104aa4:	2b00      	cmp	r3, #0
 8104aa6:	d110      	bne.n	8104aca <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8104aa8:	7bfb      	ldrb	r3, [r7, #15]
 8104aaa:	2b01      	cmp	r3, #1
 8104aac:	d102      	bne.n	8104ab4 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8104aae:	7b7b      	ldrb	r3, [r7, #13]
 8104ab0:	2b01      	cmp	r3, #1
 8104ab2:	d001      	beq.n	8104ab8 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8104ab4:	2301      	movs	r3, #1
 8104ab6:	e089      	b.n	8104bcc <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8104ab8:	687b      	ldr	r3, [r7, #4]
 8104aba:	2202      	movs	r2, #2
 8104abc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8104ac0:	687b      	ldr	r3, [r7, #4]
 8104ac2:	2202      	movs	r2, #2
 8104ac4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8104ac8:	e031      	b.n	8104b2e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8104aca:	683b      	ldr	r3, [r7, #0]
 8104acc:	2b04      	cmp	r3, #4
 8104ace:	d110      	bne.n	8104af2 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8104ad0:	7bbb      	ldrb	r3, [r7, #14]
 8104ad2:	2b01      	cmp	r3, #1
 8104ad4:	d102      	bne.n	8104adc <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8104ad6:	7b3b      	ldrb	r3, [r7, #12]
 8104ad8:	2b01      	cmp	r3, #1
 8104ada:	d001      	beq.n	8104ae0 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8104adc:	2301      	movs	r3, #1
 8104ade:	e075      	b.n	8104bcc <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8104ae0:	687b      	ldr	r3, [r7, #4]
 8104ae2:	2202      	movs	r2, #2
 8104ae4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8104ae8:	687b      	ldr	r3, [r7, #4]
 8104aea:	2202      	movs	r2, #2
 8104aec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8104af0:	e01d      	b.n	8104b2e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8104af2:	7bfb      	ldrb	r3, [r7, #15]
 8104af4:	2b01      	cmp	r3, #1
 8104af6:	d108      	bne.n	8104b0a <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8104af8:	7bbb      	ldrb	r3, [r7, #14]
 8104afa:	2b01      	cmp	r3, #1
 8104afc:	d105      	bne.n	8104b0a <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8104afe:	7b7b      	ldrb	r3, [r7, #13]
 8104b00:	2b01      	cmp	r3, #1
 8104b02:	d102      	bne.n	8104b0a <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8104b04:	7b3b      	ldrb	r3, [r7, #12]
 8104b06:	2b01      	cmp	r3, #1
 8104b08:	d001      	beq.n	8104b0e <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8104b0a:	2301      	movs	r3, #1
 8104b0c:	e05e      	b.n	8104bcc <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8104b0e:	687b      	ldr	r3, [r7, #4]
 8104b10:	2202      	movs	r2, #2
 8104b12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8104b16:	687b      	ldr	r3, [r7, #4]
 8104b18:	2202      	movs	r2, #2
 8104b1a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8104b1e:	687b      	ldr	r3, [r7, #4]
 8104b20:	2202      	movs	r2, #2
 8104b22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8104b26:	687b      	ldr	r3, [r7, #4]
 8104b28:	2202      	movs	r2, #2
 8104b2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8104b2e:	683b      	ldr	r3, [r7, #0]
 8104b30:	2b00      	cmp	r3, #0
 8104b32:	d003      	beq.n	8104b3c <HAL_TIM_Encoder_Start_IT+0xc4>
 8104b34:	683b      	ldr	r3, [r7, #0]
 8104b36:	2b04      	cmp	r3, #4
 8104b38:	d010      	beq.n	8104b5c <HAL_TIM_Encoder_Start_IT+0xe4>
 8104b3a:	e01f      	b.n	8104b7c <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8104b3c:	687b      	ldr	r3, [r7, #4]
 8104b3e:	681b      	ldr	r3, [r3, #0]
 8104b40:	2201      	movs	r2, #1
 8104b42:	2100      	movs	r1, #0
 8104b44:	4618      	mov	r0, r3
 8104b46:	f000 fe11 	bl	810576c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8104b4a:	687b      	ldr	r3, [r7, #4]
 8104b4c:	681b      	ldr	r3, [r3, #0]
 8104b4e:	68da      	ldr	r2, [r3, #12]
 8104b50:	687b      	ldr	r3, [r7, #4]
 8104b52:	681b      	ldr	r3, [r3, #0]
 8104b54:	f042 0202 	orr.w	r2, r2, #2
 8104b58:	60da      	str	r2, [r3, #12]
      break;
 8104b5a:	e02e      	b.n	8104bba <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8104b5c:	687b      	ldr	r3, [r7, #4]
 8104b5e:	681b      	ldr	r3, [r3, #0]
 8104b60:	2201      	movs	r2, #1
 8104b62:	2104      	movs	r1, #4
 8104b64:	4618      	mov	r0, r3
 8104b66:	f000 fe01 	bl	810576c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8104b6a:	687b      	ldr	r3, [r7, #4]
 8104b6c:	681b      	ldr	r3, [r3, #0]
 8104b6e:	68da      	ldr	r2, [r3, #12]
 8104b70:	687b      	ldr	r3, [r7, #4]
 8104b72:	681b      	ldr	r3, [r3, #0]
 8104b74:	f042 0204 	orr.w	r2, r2, #4
 8104b78:	60da      	str	r2, [r3, #12]
      break;
 8104b7a:	e01e      	b.n	8104bba <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8104b7c:	687b      	ldr	r3, [r7, #4]
 8104b7e:	681b      	ldr	r3, [r3, #0]
 8104b80:	2201      	movs	r2, #1
 8104b82:	2100      	movs	r1, #0
 8104b84:	4618      	mov	r0, r3
 8104b86:	f000 fdf1 	bl	810576c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8104b8a:	687b      	ldr	r3, [r7, #4]
 8104b8c:	681b      	ldr	r3, [r3, #0]
 8104b8e:	2201      	movs	r2, #1
 8104b90:	2104      	movs	r1, #4
 8104b92:	4618      	mov	r0, r3
 8104b94:	f000 fdea 	bl	810576c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8104b98:	687b      	ldr	r3, [r7, #4]
 8104b9a:	681b      	ldr	r3, [r3, #0]
 8104b9c:	68da      	ldr	r2, [r3, #12]
 8104b9e:	687b      	ldr	r3, [r7, #4]
 8104ba0:	681b      	ldr	r3, [r3, #0]
 8104ba2:	f042 0202 	orr.w	r2, r2, #2
 8104ba6:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8104ba8:	687b      	ldr	r3, [r7, #4]
 8104baa:	681b      	ldr	r3, [r3, #0]
 8104bac:	68da      	ldr	r2, [r3, #12]
 8104bae:	687b      	ldr	r3, [r7, #4]
 8104bb0:	681b      	ldr	r3, [r3, #0]
 8104bb2:	f042 0204 	orr.w	r2, r2, #4
 8104bb6:	60da      	str	r2, [r3, #12]
      break;
 8104bb8:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8104bba:	687b      	ldr	r3, [r7, #4]
 8104bbc:	681b      	ldr	r3, [r3, #0]
 8104bbe:	681a      	ldr	r2, [r3, #0]
 8104bc0:	687b      	ldr	r3, [r7, #4]
 8104bc2:	681b      	ldr	r3, [r3, #0]
 8104bc4:	f042 0201 	orr.w	r2, r2, #1
 8104bc8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8104bca:	2300      	movs	r3, #0
}
 8104bcc:	4618      	mov	r0, r3
 8104bce:	3710      	adds	r7, #16
 8104bd0:	46bd      	mov	sp, r7
 8104bd2:	bd80      	pop	{r7, pc}

08104bd4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8104bd4:	b580      	push	{r7, lr}
 8104bd6:	b082      	sub	sp, #8
 8104bd8:	af00      	add	r7, sp, #0
 8104bda:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8104bdc:	687b      	ldr	r3, [r7, #4]
 8104bde:	681b      	ldr	r3, [r3, #0]
 8104be0:	691b      	ldr	r3, [r3, #16]
 8104be2:	f003 0302 	and.w	r3, r3, #2
 8104be6:	2b02      	cmp	r3, #2
 8104be8:	d122      	bne.n	8104c30 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8104bea:	687b      	ldr	r3, [r7, #4]
 8104bec:	681b      	ldr	r3, [r3, #0]
 8104bee:	68db      	ldr	r3, [r3, #12]
 8104bf0:	f003 0302 	and.w	r3, r3, #2
 8104bf4:	2b02      	cmp	r3, #2
 8104bf6:	d11b      	bne.n	8104c30 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8104bf8:	687b      	ldr	r3, [r7, #4]
 8104bfa:	681b      	ldr	r3, [r3, #0]
 8104bfc:	f06f 0202 	mvn.w	r2, #2
 8104c00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8104c02:	687b      	ldr	r3, [r7, #4]
 8104c04:	2201      	movs	r2, #1
 8104c06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8104c08:	687b      	ldr	r3, [r7, #4]
 8104c0a:	681b      	ldr	r3, [r3, #0]
 8104c0c:	699b      	ldr	r3, [r3, #24]
 8104c0e:	f003 0303 	and.w	r3, r3, #3
 8104c12:	2b00      	cmp	r3, #0
 8104c14:	d003      	beq.n	8104c1e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8104c16:	6878      	ldr	r0, [r7, #4]
 8104c18:	f7fc fc7a 	bl	8101510 <HAL_TIM_IC_CaptureCallback>
 8104c1c:	e005      	b.n	8104c2a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8104c1e:	6878      	ldr	r0, [r7, #4]
 8104c20:	f000 fa16 	bl	8105050 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8104c24:	6878      	ldr	r0, [r7, #4]
 8104c26:	f000 fa1d 	bl	8105064 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8104c2a:	687b      	ldr	r3, [r7, #4]
 8104c2c:	2200      	movs	r2, #0
 8104c2e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8104c30:	687b      	ldr	r3, [r7, #4]
 8104c32:	681b      	ldr	r3, [r3, #0]
 8104c34:	691b      	ldr	r3, [r3, #16]
 8104c36:	f003 0304 	and.w	r3, r3, #4
 8104c3a:	2b04      	cmp	r3, #4
 8104c3c:	d122      	bne.n	8104c84 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8104c3e:	687b      	ldr	r3, [r7, #4]
 8104c40:	681b      	ldr	r3, [r3, #0]
 8104c42:	68db      	ldr	r3, [r3, #12]
 8104c44:	f003 0304 	and.w	r3, r3, #4
 8104c48:	2b04      	cmp	r3, #4
 8104c4a:	d11b      	bne.n	8104c84 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8104c4c:	687b      	ldr	r3, [r7, #4]
 8104c4e:	681b      	ldr	r3, [r3, #0]
 8104c50:	f06f 0204 	mvn.w	r2, #4
 8104c54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8104c56:	687b      	ldr	r3, [r7, #4]
 8104c58:	2202      	movs	r2, #2
 8104c5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8104c5c:	687b      	ldr	r3, [r7, #4]
 8104c5e:	681b      	ldr	r3, [r3, #0]
 8104c60:	699b      	ldr	r3, [r3, #24]
 8104c62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8104c66:	2b00      	cmp	r3, #0
 8104c68:	d003      	beq.n	8104c72 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8104c6a:	6878      	ldr	r0, [r7, #4]
 8104c6c:	f7fc fc50 	bl	8101510 <HAL_TIM_IC_CaptureCallback>
 8104c70:	e005      	b.n	8104c7e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8104c72:	6878      	ldr	r0, [r7, #4]
 8104c74:	f000 f9ec 	bl	8105050 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8104c78:	6878      	ldr	r0, [r7, #4]
 8104c7a:	f000 f9f3 	bl	8105064 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8104c7e:	687b      	ldr	r3, [r7, #4]
 8104c80:	2200      	movs	r2, #0
 8104c82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8104c84:	687b      	ldr	r3, [r7, #4]
 8104c86:	681b      	ldr	r3, [r3, #0]
 8104c88:	691b      	ldr	r3, [r3, #16]
 8104c8a:	f003 0308 	and.w	r3, r3, #8
 8104c8e:	2b08      	cmp	r3, #8
 8104c90:	d122      	bne.n	8104cd8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8104c92:	687b      	ldr	r3, [r7, #4]
 8104c94:	681b      	ldr	r3, [r3, #0]
 8104c96:	68db      	ldr	r3, [r3, #12]
 8104c98:	f003 0308 	and.w	r3, r3, #8
 8104c9c:	2b08      	cmp	r3, #8
 8104c9e:	d11b      	bne.n	8104cd8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8104ca0:	687b      	ldr	r3, [r7, #4]
 8104ca2:	681b      	ldr	r3, [r3, #0]
 8104ca4:	f06f 0208 	mvn.w	r2, #8
 8104ca8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8104caa:	687b      	ldr	r3, [r7, #4]
 8104cac:	2204      	movs	r2, #4
 8104cae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8104cb0:	687b      	ldr	r3, [r7, #4]
 8104cb2:	681b      	ldr	r3, [r3, #0]
 8104cb4:	69db      	ldr	r3, [r3, #28]
 8104cb6:	f003 0303 	and.w	r3, r3, #3
 8104cba:	2b00      	cmp	r3, #0
 8104cbc:	d003      	beq.n	8104cc6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8104cbe:	6878      	ldr	r0, [r7, #4]
 8104cc0:	f7fc fc26 	bl	8101510 <HAL_TIM_IC_CaptureCallback>
 8104cc4:	e005      	b.n	8104cd2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8104cc6:	6878      	ldr	r0, [r7, #4]
 8104cc8:	f000 f9c2 	bl	8105050 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8104ccc:	6878      	ldr	r0, [r7, #4]
 8104cce:	f000 f9c9 	bl	8105064 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8104cd2:	687b      	ldr	r3, [r7, #4]
 8104cd4:	2200      	movs	r2, #0
 8104cd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8104cd8:	687b      	ldr	r3, [r7, #4]
 8104cda:	681b      	ldr	r3, [r3, #0]
 8104cdc:	691b      	ldr	r3, [r3, #16]
 8104cde:	f003 0310 	and.w	r3, r3, #16
 8104ce2:	2b10      	cmp	r3, #16
 8104ce4:	d122      	bne.n	8104d2c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8104ce6:	687b      	ldr	r3, [r7, #4]
 8104ce8:	681b      	ldr	r3, [r3, #0]
 8104cea:	68db      	ldr	r3, [r3, #12]
 8104cec:	f003 0310 	and.w	r3, r3, #16
 8104cf0:	2b10      	cmp	r3, #16
 8104cf2:	d11b      	bne.n	8104d2c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8104cf4:	687b      	ldr	r3, [r7, #4]
 8104cf6:	681b      	ldr	r3, [r3, #0]
 8104cf8:	f06f 0210 	mvn.w	r2, #16
 8104cfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8104cfe:	687b      	ldr	r3, [r7, #4]
 8104d00:	2208      	movs	r2, #8
 8104d02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8104d04:	687b      	ldr	r3, [r7, #4]
 8104d06:	681b      	ldr	r3, [r3, #0]
 8104d08:	69db      	ldr	r3, [r3, #28]
 8104d0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8104d0e:	2b00      	cmp	r3, #0
 8104d10:	d003      	beq.n	8104d1a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8104d12:	6878      	ldr	r0, [r7, #4]
 8104d14:	f7fc fbfc 	bl	8101510 <HAL_TIM_IC_CaptureCallback>
 8104d18:	e005      	b.n	8104d26 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8104d1a:	6878      	ldr	r0, [r7, #4]
 8104d1c:	f000 f998 	bl	8105050 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8104d20:	6878      	ldr	r0, [r7, #4]
 8104d22:	f000 f99f 	bl	8105064 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8104d26:	687b      	ldr	r3, [r7, #4]
 8104d28:	2200      	movs	r2, #0
 8104d2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8104d2c:	687b      	ldr	r3, [r7, #4]
 8104d2e:	681b      	ldr	r3, [r3, #0]
 8104d30:	691b      	ldr	r3, [r3, #16]
 8104d32:	f003 0301 	and.w	r3, r3, #1
 8104d36:	2b01      	cmp	r3, #1
 8104d38:	d10e      	bne.n	8104d58 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8104d3a:	687b      	ldr	r3, [r7, #4]
 8104d3c:	681b      	ldr	r3, [r3, #0]
 8104d3e:	68db      	ldr	r3, [r3, #12]
 8104d40:	f003 0301 	and.w	r3, r3, #1
 8104d44:	2b01      	cmp	r3, #1
 8104d46:	d107      	bne.n	8104d58 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8104d48:	687b      	ldr	r3, [r7, #4]
 8104d4a:	681b      	ldr	r3, [r3, #0]
 8104d4c:	f06f 0201 	mvn.w	r2, #1
 8104d50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8104d52:	6878      	ldr	r0, [r7, #4]
 8104d54:	f000 f972 	bl	810503c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8104d58:	687b      	ldr	r3, [r7, #4]
 8104d5a:	681b      	ldr	r3, [r3, #0]
 8104d5c:	691b      	ldr	r3, [r3, #16]
 8104d5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8104d62:	2b80      	cmp	r3, #128	; 0x80
 8104d64:	d10e      	bne.n	8104d84 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8104d66:	687b      	ldr	r3, [r7, #4]
 8104d68:	681b      	ldr	r3, [r3, #0]
 8104d6a:	68db      	ldr	r3, [r3, #12]
 8104d6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8104d70:	2b80      	cmp	r3, #128	; 0x80
 8104d72:	d107      	bne.n	8104d84 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8104d74:	687b      	ldr	r3, [r7, #4]
 8104d76:	681b      	ldr	r3, [r3, #0]
 8104d78:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8104d7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8104d7e:	6878      	ldr	r0, [r7, #4]
 8104d80:	f000 fdb2 	bl	81058e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8104d84:	687b      	ldr	r3, [r7, #4]
 8104d86:	681b      	ldr	r3, [r3, #0]
 8104d88:	691b      	ldr	r3, [r3, #16]
 8104d8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8104d8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104d92:	d10e      	bne.n	8104db2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8104d94:	687b      	ldr	r3, [r7, #4]
 8104d96:	681b      	ldr	r3, [r3, #0]
 8104d98:	68db      	ldr	r3, [r3, #12]
 8104d9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8104d9e:	2b80      	cmp	r3, #128	; 0x80
 8104da0:	d107      	bne.n	8104db2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8104da2:	687b      	ldr	r3, [r7, #4]
 8104da4:	681b      	ldr	r3, [r3, #0]
 8104da6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8104daa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8104dac:	6878      	ldr	r0, [r7, #4]
 8104dae:	f000 fda5 	bl	81058fc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8104db2:	687b      	ldr	r3, [r7, #4]
 8104db4:	681b      	ldr	r3, [r3, #0]
 8104db6:	691b      	ldr	r3, [r3, #16]
 8104db8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8104dbc:	2b40      	cmp	r3, #64	; 0x40
 8104dbe:	d10e      	bne.n	8104dde <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8104dc0:	687b      	ldr	r3, [r7, #4]
 8104dc2:	681b      	ldr	r3, [r3, #0]
 8104dc4:	68db      	ldr	r3, [r3, #12]
 8104dc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8104dca:	2b40      	cmp	r3, #64	; 0x40
 8104dcc:	d107      	bne.n	8104dde <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8104dce:	687b      	ldr	r3, [r7, #4]
 8104dd0:	681b      	ldr	r3, [r3, #0]
 8104dd2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8104dd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8104dd8:	6878      	ldr	r0, [r7, #4]
 8104dda:	f000 f94d 	bl	8105078 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8104dde:	687b      	ldr	r3, [r7, #4]
 8104de0:	681b      	ldr	r3, [r3, #0]
 8104de2:	691b      	ldr	r3, [r3, #16]
 8104de4:	f003 0320 	and.w	r3, r3, #32
 8104de8:	2b20      	cmp	r3, #32
 8104dea:	d10e      	bne.n	8104e0a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8104dec:	687b      	ldr	r3, [r7, #4]
 8104dee:	681b      	ldr	r3, [r3, #0]
 8104df0:	68db      	ldr	r3, [r3, #12]
 8104df2:	f003 0320 	and.w	r3, r3, #32
 8104df6:	2b20      	cmp	r3, #32
 8104df8:	d107      	bne.n	8104e0a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8104dfa:	687b      	ldr	r3, [r7, #4]
 8104dfc:	681b      	ldr	r3, [r3, #0]
 8104dfe:	f06f 0220 	mvn.w	r2, #32
 8104e02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8104e04:	6878      	ldr	r0, [r7, #4]
 8104e06:	f000 fd65 	bl	81058d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8104e0a:	bf00      	nop
 8104e0c:	3708      	adds	r7, #8
 8104e0e:	46bd      	mov	sp, r7
 8104e10:	bd80      	pop	{r7, pc}
	...

08104e14 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8104e14:	b580      	push	{r7, lr}
 8104e16:	b086      	sub	sp, #24
 8104e18:	af00      	add	r7, sp, #0
 8104e1a:	60f8      	str	r0, [r7, #12]
 8104e1c:	60b9      	str	r1, [r7, #8]
 8104e1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8104e20:	2300      	movs	r3, #0
 8104e22:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8104e24:	68fb      	ldr	r3, [r7, #12]
 8104e26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8104e2a:	2b01      	cmp	r3, #1
 8104e2c:	d101      	bne.n	8104e32 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8104e2e:	2302      	movs	r3, #2
 8104e30:	e0ff      	b.n	8105032 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8104e32:	68fb      	ldr	r3, [r7, #12]
 8104e34:	2201      	movs	r2, #1
 8104e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8104e3a:	687b      	ldr	r3, [r7, #4]
 8104e3c:	2b14      	cmp	r3, #20
 8104e3e:	f200 80f0 	bhi.w	8105022 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8104e42:	a201      	add	r2, pc, #4	; (adr r2, 8104e48 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8104e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104e48:	08104e9d 	.word	0x08104e9d
 8104e4c:	08105023 	.word	0x08105023
 8104e50:	08105023 	.word	0x08105023
 8104e54:	08105023 	.word	0x08105023
 8104e58:	08104edd 	.word	0x08104edd
 8104e5c:	08105023 	.word	0x08105023
 8104e60:	08105023 	.word	0x08105023
 8104e64:	08105023 	.word	0x08105023
 8104e68:	08104f1f 	.word	0x08104f1f
 8104e6c:	08105023 	.word	0x08105023
 8104e70:	08105023 	.word	0x08105023
 8104e74:	08105023 	.word	0x08105023
 8104e78:	08104f5f 	.word	0x08104f5f
 8104e7c:	08105023 	.word	0x08105023
 8104e80:	08105023 	.word	0x08105023
 8104e84:	08105023 	.word	0x08105023
 8104e88:	08104fa1 	.word	0x08104fa1
 8104e8c:	08105023 	.word	0x08105023
 8104e90:	08105023 	.word	0x08105023
 8104e94:	08105023 	.word	0x08105023
 8104e98:	08104fe1 	.word	0x08104fe1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8104e9c:	68fb      	ldr	r3, [r7, #12]
 8104e9e:	681b      	ldr	r3, [r3, #0]
 8104ea0:	68b9      	ldr	r1, [r7, #8]
 8104ea2:	4618      	mov	r0, r3
 8104ea4:	f000 f98c 	bl	81051c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8104ea8:	68fb      	ldr	r3, [r7, #12]
 8104eaa:	681b      	ldr	r3, [r3, #0]
 8104eac:	699a      	ldr	r2, [r3, #24]
 8104eae:	68fb      	ldr	r3, [r7, #12]
 8104eb0:	681b      	ldr	r3, [r3, #0]
 8104eb2:	f042 0208 	orr.w	r2, r2, #8
 8104eb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8104eb8:	68fb      	ldr	r3, [r7, #12]
 8104eba:	681b      	ldr	r3, [r3, #0]
 8104ebc:	699a      	ldr	r2, [r3, #24]
 8104ebe:	68fb      	ldr	r3, [r7, #12]
 8104ec0:	681b      	ldr	r3, [r3, #0]
 8104ec2:	f022 0204 	bic.w	r2, r2, #4
 8104ec6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8104ec8:	68fb      	ldr	r3, [r7, #12]
 8104eca:	681b      	ldr	r3, [r3, #0]
 8104ecc:	6999      	ldr	r1, [r3, #24]
 8104ece:	68bb      	ldr	r3, [r7, #8]
 8104ed0:	691a      	ldr	r2, [r3, #16]
 8104ed2:	68fb      	ldr	r3, [r7, #12]
 8104ed4:	681b      	ldr	r3, [r3, #0]
 8104ed6:	430a      	orrs	r2, r1
 8104ed8:	619a      	str	r2, [r3, #24]
      break;
 8104eda:	e0a5      	b.n	8105028 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8104edc:	68fb      	ldr	r3, [r7, #12]
 8104ede:	681b      	ldr	r3, [r3, #0]
 8104ee0:	68b9      	ldr	r1, [r7, #8]
 8104ee2:	4618      	mov	r0, r3
 8104ee4:	f000 f9fc 	bl	81052e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8104ee8:	68fb      	ldr	r3, [r7, #12]
 8104eea:	681b      	ldr	r3, [r3, #0]
 8104eec:	699a      	ldr	r2, [r3, #24]
 8104eee:	68fb      	ldr	r3, [r7, #12]
 8104ef0:	681b      	ldr	r3, [r3, #0]
 8104ef2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8104ef6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8104ef8:	68fb      	ldr	r3, [r7, #12]
 8104efa:	681b      	ldr	r3, [r3, #0]
 8104efc:	699a      	ldr	r2, [r3, #24]
 8104efe:	68fb      	ldr	r3, [r7, #12]
 8104f00:	681b      	ldr	r3, [r3, #0]
 8104f02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8104f06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8104f08:	68fb      	ldr	r3, [r7, #12]
 8104f0a:	681b      	ldr	r3, [r3, #0]
 8104f0c:	6999      	ldr	r1, [r3, #24]
 8104f0e:	68bb      	ldr	r3, [r7, #8]
 8104f10:	691b      	ldr	r3, [r3, #16]
 8104f12:	021a      	lsls	r2, r3, #8
 8104f14:	68fb      	ldr	r3, [r7, #12]
 8104f16:	681b      	ldr	r3, [r3, #0]
 8104f18:	430a      	orrs	r2, r1
 8104f1a:	619a      	str	r2, [r3, #24]
      break;
 8104f1c:	e084      	b.n	8105028 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8104f1e:	68fb      	ldr	r3, [r7, #12]
 8104f20:	681b      	ldr	r3, [r3, #0]
 8104f22:	68b9      	ldr	r1, [r7, #8]
 8104f24:	4618      	mov	r0, r3
 8104f26:	f000 fa65 	bl	81053f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8104f2a:	68fb      	ldr	r3, [r7, #12]
 8104f2c:	681b      	ldr	r3, [r3, #0]
 8104f2e:	69da      	ldr	r2, [r3, #28]
 8104f30:	68fb      	ldr	r3, [r7, #12]
 8104f32:	681b      	ldr	r3, [r3, #0]
 8104f34:	f042 0208 	orr.w	r2, r2, #8
 8104f38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8104f3a:	68fb      	ldr	r3, [r7, #12]
 8104f3c:	681b      	ldr	r3, [r3, #0]
 8104f3e:	69da      	ldr	r2, [r3, #28]
 8104f40:	68fb      	ldr	r3, [r7, #12]
 8104f42:	681b      	ldr	r3, [r3, #0]
 8104f44:	f022 0204 	bic.w	r2, r2, #4
 8104f48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8104f4a:	68fb      	ldr	r3, [r7, #12]
 8104f4c:	681b      	ldr	r3, [r3, #0]
 8104f4e:	69d9      	ldr	r1, [r3, #28]
 8104f50:	68bb      	ldr	r3, [r7, #8]
 8104f52:	691a      	ldr	r2, [r3, #16]
 8104f54:	68fb      	ldr	r3, [r7, #12]
 8104f56:	681b      	ldr	r3, [r3, #0]
 8104f58:	430a      	orrs	r2, r1
 8104f5a:	61da      	str	r2, [r3, #28]
      break;
 8104f5c:	e064      	b.n	8105028 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8104f5e:	68fb      	ldr	r3, [r7, #12]
 8104f60:	681b      	ldr	r3, [r3, #0]
 8104f62:	68b9      	ldr	r1, [r7, #8]
 8104f64:	4618      	mov	r0, r3
 8104f66:	f000 facd 	bl	8105504 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8104f6a:	68fb      	ldr	r3, [r7, #12]
 8104f6c:	681b      	ldr	r3, [r3, #0]
 8104f6e:	69da      	ldr	r2, [r3, #28]
 8104f70:	68fb      	ldr	r3, [r7, #12]
 8104f72:	681b      	ldr	r3, [r3, #0]
 8104f74:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8104f78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8104f7a:	68fb      	ldr	r3, [r7, #12]
 8104f7c:	681b      	ldr	r3, [r3, #0]
 8104f7e:	69da      	ldr	r2, [r3, #28]
 8104f80:	68fb      	ldr	r3, [r7, #12]
 8104f82:	681b      	ldr	r3, [r3, #0]
 8104f84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8104f88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8104f8a:	68fb      	ldr	r3, [r7, #12]
 8104f8c:	681b      	ldr	r3, [r3, #0]
 8104f8e:	69d9      	ldr	r1, [r3, #28]
 8104f90:	68bb      	ldr	r3, [r7, #8]
 8104f92:	691b      	ldr	r3, [r3, #16]
 8104f94:	021a      	lsls	r2, r3, #8
 8104f96:	68fb      	ldr	r3, [r7, #12]
 8104f98:	681b      	ldr	r3, [r3, #0]
 8104f9a:	430a      	orrs	r2, r1
 8104f9c:	61da      	str	r2, [r3, #28]
      break;
 8104f9e:	e043      	b.n	8105028 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8104fa0:	68fb      	ldr	r3, [r7, #12]
 8104fa2:	681b      	ldr	r3, [r3, #0]
 8104fa4:	68b9      	ldr	r1, [r7, #8]
 8104fa6:	4618      	mov	r0, r3
 8104fa8:	f000 fb16 	bl	81055d8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8104fac:	68fb      	ldr	r3, [r7, #12]
 8104fae:	681b      	ldr	r3, [r3, #0]
 8104fb0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8104fb2:	68fb      	ldr	r3, [r7, #12]
 8104fb4:	681b      	ldr	r3, [r3, #0]
 8104fb6:	f042 0208 	orr.w	r2, r2, #8
 8104fba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8104fbc:	68fb      	ldr	r3, [r7, #12]
 8104fbe:	681b      	ldr	r3, [r3, #0]
 8104fc0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8104fc2:	68fb      	ldr	r3, [r7, #12]
 8104fc4:	681b      	ldr	r3, [r3, #0]
 8104fc6:	f022 0204 	bic.w	r2, r2, #4
 8104fca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8104fcc:	68fb      	ldr	r3, [r7, #12]
 8104fce:	681b      	ldr	r3, [r3, #0]
 8104fd0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8104fd2:	68bb      	ldr	r3, [r7, #8]
 8104fd4:	691a      	ldr	r2, [r3, #16]
 8104fd6:	68fb      	ldr	r3, [r7, #12]
 8104fd8:	681b      	ldr	r3, [r3, #0]
 8104fda:	430a      	orrs	r2, r1
 8104fdc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8104fde:	e023      	b.n	8105028 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8104fe0:	68fb      	ldr	r3, [r7, #12]
 8104fe2:	681b      	ldr	r3, [r3, #0]
 8104fe4:	68b9      	ldr	r1, [r7, #8]
 8104fe6:	4618      	mov	r0, r3
 8104fe8:	f000 fb5a 	bl	81056a0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8104fec:	68fb      	ldr	r3, [r7, #12]
 8104fee:	681b      	ldr	r3, [r3, #0]
 8104ff0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8104ff2:	68fb      	ldr	r3, [r7, #12]
 8104ff4:	681b      	ldr	r3, [r3, #0]
 8104ff6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8104ffa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8104ffc:	68fb      	ldr	r3, [r7, #12]
 8104ffe:	681b      	ldr	r3, [r3, #0]
 8105000:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8105002:	68fb      	ldr	r3, [r7, #12]
 8105004:	681b      	ldr	r3, [r3, #0]
 8105006:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 810500a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 810500c:	68fb      	ldr	r3, [r7, #12]
 810500e:	681b      	ldr	r3, [r3, #0]
 8105010:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8105012:	68bb      	ldr	r3, [r7, #8]
 8105014:	691b      	ldr	r3, [r3, #16]
 8105016:	021a      	lsls	r2, r3, #8
 8105018:	68fb      	ldr	r3, [r7, #12]
 810501a:	681b      	ldr	r3, [r3, #0]
 810501c:	430a      	orrs	r2, r1
 810501e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8105020:	e002      	b.n	8105028 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8105022:	2301      	movs	r3, #1
 8105024:	75fb      	strb	r3, [r7, #23]
      break;
 8105026:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8105028:	68fb      	ldr	r3, [r7, #12]
 810502a:	2200      	movs	r2, #0
 810502c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8105030:	7dfb      	ldrb	r3, [r7, #23]
}
 8105032:	4618      	mov	r0, r3
 8105034:	3718      	adds	r7, #24
 8105036:	46bd      	mov	sp, r7
 8105038:	bd80      	pop	{r7, pc}
 810503a:	bf00      	nop

0810503c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 810503c:	b480      	push	{r7}
 810503e:	b083      	sub	sp, #12
 8105040:	af00      	add	r7, sp, #0
 8105042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8105044:	bf00      	nop
 8105046:	370c      	adds	r7, #12
 8105048:	46bd      	mov	sp, r7
 810504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810504e:	4770      	bx	lr

08105050 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8105050:	b480      	push	{r7}
 8105052:	b083      	sub	sp, #12
 8105054:	af00      	add	r7, sp, #0
 8105056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8105058:	bf00      	nop
 810505a:	370c      	adds	r7, #12
 810505c:	46bd      	mov	sp, r7
 810505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105062:	4770      	bx	lr

08105064 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8105064:	b480      	push	{r7}
 8105066:	b083      	sub	sp, #12
 8105068:	af00      	add	r7, sp, #0
 810506a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 810506c:	bf00      	nop
 810506e:	370c      	adds	r7, #12
 8105070:	46bd      	mov	sp, r7
 8105072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105076:	4770      	bx	lr

08105078 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8105078:	b480      	push	{r7}
 810507a:	b083      	sub	sp, #12
 810507c:	af00      	add	r7, sp, #0
 810507e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8105080:	bf00      	nop
 8105082:	370c      	adds	r7, #12
 8105084:	46bd      	mov	sp, r7
 8105086:	f85d 7b04 	ldr.w	r7, [sp], #4
 810508a:	4770      	bx	lr

0810508c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 810508c:	b480      	push	{r7}
 810508e:	b085      	sub	sp, #20
 8105090:	af00      	add	r7, sp, #0
 8105092:	6078      	str	r0, [r7, #4]
 8105094:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8105096:	687b      	ldr	r3, [r7, #4]
 8105098:	681b      	ldr	r3, [r3, #0]
 810509a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 810509c:	687b      	ldr	r3, [r7, #4]
 810509e:	4a40      	ldr	r2, [pc, #256]	; (81051a0 <TIM_Base_SetConfig+0x114>)
 81050a0:	4293      	cmp	r3, r2
 81050a2:	d013      	beq.n	81050cc <TIM_Base_SetConfig+0x40>
 81050a4:	687b      	ldr	r3, [r7, #4]
 81050a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81050aa:	d00f      	beq.n	81050cc <TIM_Base_SetConfig+0x40>
 81050ac:	687b      	ldr	r3, [r7, #4]
 81050ae:	4a3d      	ldr	r2, [pc, #244]	; (81051a4 <TIM_Base_SetConfig+0x118>)
 81050b0:	4293      	cmp	r3, r2
 81050b2:	d00b      	beq.n	81050cc <TIM_Base_SetConfig+0x40>
 81050b4:	687b      	ldr	r3, [r7, #4]
 81050b6:	4a3c      	ldr	r2, [pc, #240]	; (81051a8 <TIM_Base_SetConfig+0x11c>)
 81050b8:	4293      	cmp	r3, r2
 81050ba:	d007      	beq.n	81050cc <TIM_Base_SetConfig+0x40>
 81050bc:	687b      	ldr	r3, [r7, #4]
 81050be:	4a3b      	ldr	r2, [pc, #236]	; (81051ac <TIM_Base_SetConfig+0x120>)
 81050c0:	4293      	cmp	r3, r2
 81050c2:	d003      	beq.n	81050cc <TIM_Base_SetConfig+0x40>
 81050c4:	687b      	ldr	r3, [r7, #4]
 81050c6:	4a3a      	ldr	r2, [pc, #232]	; (81051b0 <TIM_Base_SetConfig+0x124>)
 81050c8:	4293      	cmp	r3, r2
 81050ca:	d108      	bne.n	81050de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 81050cc:	68fb      	ldr	r3, [r7, #12]
 81050ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 81050d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 81050d4:	683b      	ldr	r3, [r7, #0]
 81050d6:	685b      	ldr	r3, [r3, #4]
 81050d8:	68fa      	ldr	r2, [r7, #12]
 81050da:	4313      	orrs	r3, r2
 81050dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 81050de:	687b      	ldr	r3, [r7, #4]
 81050e0:	4a2f      	ldr	r2, [pc, #188]	; (81051a0 <TIM_Base_SetConfig+0x114>)
 81050e2:	4293      	cmp	r3, r2
 81050e4:	d01f      	beq.n	8105126 <TIM_Base_SetConfig+0x9a>
 81050e6:	687b      	ldr	r3, [r7, #4]
 81050e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81050ec:	d01b      	beq.n	8105126 <TIM_Base_SetConfig+0x9a>
 81050ee:	687b      	ldr	r3, [r7, #4]
 81050f0:	4a2c      	ldr	r2, [pc, #176]	; (81051a4 <TIM_Base_SetConfig+0x118>)
 81050f2:	4293      	cmp	r3, r2
 81050f4:	d017      	beq.n	8105126 <TIM_Base_SetConfig+0x9a>
 81050f6:	687b      	ldr	r3, [r7, #4]
 81050f8:	4a2b      	ldr	r2, [pc, #172]	; (81051a8 <TIM_Base_SetConfig+0x11c>)
 81050fa:	4293      	cmp	r3, r2
 81050fc:	d013      	beq.n	8105126 <TIM_Base_SetConfig+0x9a>
 81050fe:	687b      	ldr	r3, [r7, #4]
 8105100:	4a2a      	ldr	r2, [pc, #168]	; (81051ac <TIM_Base_SetConfig+0x120>)
 8105102:	4293      	cmp	r3, r2
 8105104:	d00f      	beq.n	8105126 <TIM_Base_SetConfig+0x9a>
 8105106:	687b      	ldr	r3, [r7, #4]
 8105108:	4a29      	ldr	r2, [pc, #164]	; (81051b0 <TIM_Base_SetConfig+0x124>)
 810510a:	4293      	cmp	r3, r2
 810510c:	d00b      	beq.n	8105126 <TIM_Base_SetConfig+0x9a>
 810510e:	687b      	ldr	r3, [r7, #4]
 8105110:	4a28      	ldr	r2, [pc, #160]	; (81051b4 <TIM_Base_SetConfig+0x128>)
 8105112:	4293      	cmp	r3, r2
 8105114:	d007      	beq.n	8105126 <TIM_Base_SetConfig+0x9a>
 8105116:	687b      	ldr	r3, [r7, #4]
 8105118:	4a27      	ldr	r2, [pc, #156]	; (81051b8 <TIM_Base_SetConfig+0x12c>)
 810511a:	4293      	cmp	r3, r2
 810511c:	d003      	beq.n	8105126 <TIM_Base_SetConfig+0x9a>
 810511e:	687b      	ldr	r3, [r7, #4]
 8105120:	4a26      	ldr	r2, [pc, #152]	; (81051bc <TIM_Base_SetConfig+0x130>)
 8105122:	4293      	cmp	r3, r2
 8105124:	d108      	bne.n	8105138 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8105126:	68fb      	ldr	r3, [r7, #12]
 8105128:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 810512c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 810512e:	683b      	ldr	r3, [r7, #0]
 8105130:	68db      	ldr	r3, [r3, #12]
 8105132:	68fa      	ldr	r2, [r7, #12]
 8105134:	4313      	orrs	r3, r2
 8105136:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8105138:	68fb      	ldr	r3, [r7, #12]
 810513a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 810513e:	683b      	ldr	r3, [r7, #0]
 8105140:	695b      	ldr	r3, [r3, #20]
 8105142:	4313      	orrs	r3, r2
 8105144:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8105146:	687b      	ldr	r3, [r7, #4]
 8105148:	68fa      	ldr	r2, [r7, #12]
 810514a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 810514c:	683b      	ldr	r3, [r7, #0]
 810514e:	689a      	ldr	r2, [r3, #8]
 8105150:	687b      	ldr	r3, [r7, #4]
 8105152:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8105154:	683b      	ldr	r3, [r7, #0]
 8105156:	681a      	ldr	r2, [r3, #0]
 8105158:	687b      	ldr	r3, [r7, #4]
 810515a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 810515c:	687b      	ldr	r3, [r7, #4]
 810515e:	4a10      	ldr	r2, [pc, #64]	; (81051a0 <TIM_Base_SetConfig+0x114>)
 8105160:	4293      	cmp	r3, r2
 8105162:	d00f      	beq.n	8105184 <TIM_Base_SetConfig+0xf8>
 8105164:	687b      	ldr	r3, [r7, #4]
 8105166:	4a12      	ldr	r2, [pc, #72]	; (81051b0 <TIM_Base_SetConfig+0x124>)
 8105168:	4293      	cmp	r3, r2
 810516a:	d00b      	beq.n	8105184 <TIM_Base_SetConfig+0xf8>
 810516c:	687b      	ldr	r3, [r7, #4]
 810516e:	4a11      	ldr	r2, [pc, #68]	; (81051b4 <TIM_Base_SetConfig+0x128>)
 8105170:	4293      	cmp	r3, r2
 8105172:	d007      	beq.n	8105184 <TIM_Base_SetConfig+0xf8>
 8105174:	687b      	ldr	r3, [r7, #4]
 8105176:	4a10      	ldr	r2, [pc, #64]	; (81051b8 <TIM_Base_SetConfig+0x12c>)
 8105178:	4293      	cmp	r3, r2
 810517a:	d003      	beq.n	8105184 <TIM_Base_SetConfig+0xf8>
 810517c:	687b      	ldr	r3, [r7, #4]
 810517e:	4a0f      	ldr	r2, [pc, #60]	; (81051bc <TIM_Base_SetConfig+0x130>)
 8105180:	4293      	cmp	r3, r2
 8105182:	d103      	bne.n	810518c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8105184:	683b      	ldr	r3, [r7, #0]
 8105186:	691a      	ldr	r2, [r3, #16]
 8105188:	687b      	ldr	r3, [r7, #4]
 810518a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 810518c:	687b      	ldr	r3, [r7, #4]
 810518e:	2201      	movs	r2, #1
 8105190:	615a      	str	r2, [r3, #20]
}
 8105192:	bf00      	nop
 8105194:	3714      	adds	r7, #20
 8105196:	46bd      	mov	sp, r7
 8105198:	f85d 7b04 	ldr.w	r7, [sp], #4
 810519c:	4770      	bx	lr
 810519e:	bf00      	nop
 81051a0:	40010000 	.word	0x40010000
 81051a4:	40000400 	.word	0x40000400
 81051a8:	40000800 	.word	0x40000800
 81051ac:	40000c00 	.word	0x40000c00
 81051b0:	40010400 	.word	0x40010400
 81051b4:	40014000 	.word	0x40014000
 81051b8:	40014400 	.word	0x40014400
 81051bc:	40014800 	.word	0x40014800

081051c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 81051c0:	b480      	push	{r7}
 81051c2:	b087      	sub	sp, #28
 81051c4:	af00      	add	r7, sp, #0
 81051c6:	6078      	str	r0, [r7, #4]
 81051c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 81051ca:	687b      	ldr	r3, [r7, #4]
 81051cc:	6a1b      	ldr	r3, [r3, #32]
 81051ce:	f023 0201 	bic.w	r2, r3, #1
 81051d2:	687b      	ldr	r3, [r7, #4]
 81051d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 81051d6:	687b      	ldr	r3, [r7, #4]
 81051d8:	6a1b      	ldr	r3, [r3, #32]
 81051da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 81051dc:	687b      	ldr	r3, [r7, #4]
 81051de:	685b      	ldr	r3, [r3, #4]
 81051e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 81051e2:	687b      	ldr	r3, [r7, #4]
 81051e4:	699b      	ldr	r3, [r3, #24]
 81051e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 81051e8:	68fb      	ldr	r3, [r7, #12]
 81051ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 81051ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 81051f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 81051f4:	68fb      	ldr	r3, [r7, #12]
 81051f6:	f023 0303 	bic.w	r3, r3, #3
 81051fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 81051fc:	683b      	ldr	r3, [r7, #0]
 81051fe:	681b      	ldr	r3, [r3, #0]
 8105200:	68fa      	ldr	r2, [r7, #12]
 8105202:	4313      	orrs	r3, r2
 8105204:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8105206:	697b      	ldr	r3, [r7, #20]
 8105208:	f023 0302 	bic.w	r3, r3, #2
 810520c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 810520e:	683b      	ldr	r3, [r7, #0]
 8105210:	689b      	ldr	r3, [r3, #8]
 8105212:	697a      	ldr	r2, [r7, #20]
 8105214:	4313      	orrs	r3, r2
 8105216:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8105218:	687b      	ldr	r3, [r7, #4]
 810521a:	4a2c      	ldr	r2, [pc, #176]	; (81052cc <TIM_OC1_SetConfig+0x10c>)
 810521c:	4293      	cmp	r3, r2
 810521e:	d00f      	beq.n	8105240 <TIM_OC1_SetConfig+0x80>
 8105220:	687b      	ldr	r3, [r7, #4]
 8105222:	4a2b      	ldr	r2, [pc, #172]	; (81052d0 <TIM_OC1_SetConfig+0x110>)
 8105224:	4293      	cmp	r3, r2
 8105226:	d00b      	beq.n	8105240 <TIM_OC1_SetConfig+0x80>
 8105228:	687b      	ldr	r3, [r7, #4]
 810522a:	4a2a      	ldr	r2, [pc, #168]	; (81052d4 <TIM_OC1_SetConfig+0x114>)
 810522c:	4293      	cmp	r3, r2
 810522e:	d007      	beq.n	8105240 <TIM_OC1_SetConfig+0x80>
 8105230:	687b      	ldr	r3, [r7, #4]
 8105232:	4a29      	ldr	r2, [pc, #164]	; (81052d8 <TIM_OC1_SetConfig+0x118>)
 8105234:	4293      	cmp	r3, r2
 8105236:	d003      	beq.n	8105240 <TIM_OC1_SetConfig+0x80>
 8105238:	687b      	ldr	r3, [r7, #4]
 810523a:	4a28      	ldr	r2, [pc, #160]	; (81052dc <TIM_OC1_SetConfig+0x11c>)
 810523c:	4293      	cmp	r3, r2
 810523e:	d10c      	bne.n	810525a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8105240:	697b      	ldr	r3, [r7, #20]
 8105242:	f023 0308 	bic.w	r3, r3, #8
 8105246:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8105248:	683b      	ldr	r3, [r7, #0]
 810524a:	68db      	ldr	r3, [r3, #12]
 810524c:	697a      	ldr	r2, [r7, #20]
 810524e:	4313      	orrs	r3, r2
 8105250:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8105252:	697b      	ldr	r3, [r7, #20]
 8105254:	f023 0304 	bic.w	r3, r3, #4
 8105258:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810525a:	687b      	ldr	r3, [r7, #4]
 810525c:	4a1b      	ldr	r2, [pc, #108]	; (81052cc <TIM_OC1_SetConfig+0x10c>)
 810525e:	4293      	cmp	r3, r2
 8105260:	d00f      	beq.n	8105282 <TIM_OC1_SetConfig+0xc2>
 8105262:	687b      	ldr	r3, [r7, #4]
 8105264:	4a1a      	ldr	r2, [pc, #104]	; (81052d0 <TIM_OC1_SetConfig+0x110>)
 8105266:	4293      	cmp	r3, r2
 8105268:	d00b      	beq.n	8105282 <TIM_OC1_SetConfig+0xc2>
 810526a:	687b      	ldr	r3, [r7, #4]
 810526c:	4a19      	ldr	r2, [pc, #100]	; (81052d4 <TIM_OC1_SetConfig+0x114>)
 810526e:	4293      	cmp	r3, r2
 8105270:	d007      	beq.n	8105282 <TIM_OC1_SetConfig+0xc2>
 8105272:	687b      	ldr	r3, [r7, #4]
 8105274:	4a18      	ldr	r2, [pc, #96]	; (81052d8 <TIM_OC1_SetConfig+0x118>)
 8105276:	4293      	cmp	r3, r2
 8105278:	d003      	beq.n	8105282 <TIM_OC1_SetConfig+0xc2>
 810527a:	687b      	ldr	r3, [r7, #4]
 810527c:	4a17      	ldr	r2, [pc, #92]	; (81052dc <TIM_OC1_SetConfig+0x11c>)
 810527e:	4293      	cmp	r3, r2
 8105280:	d111      	bne.n	81052a6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8105282:	693b      	ldr	r3, [r7, #16]
 8105284:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8105288:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 810528a:	693b      	ldr	r3, [r7, #16]
 810528c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8105290:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8105292:	683b      	ldr	r3, [r7, #0]
 8105294:	695b      	ldr	r3, [r3, #20]
 8105296:	693a      	ldr	r2, [r7, #16]
 8105298:	4313      	orrs	r3, r2
 810529a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 810529c:	683b      	ldr	r3, [r7, #0]
 810529e:	699b      	ldr	r3, [r3, #24]
 81052a0:	693a      	ldr	r2, [r7, #16]
 81052a2:	4313      	orrs	r3, r2
 81052a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 81052a6:	687b      	ldr	r3, [r7, #4]
 81052a8:	693a      	ldr	r2, [r7, #16]
 81052aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 81052ac:	687b      	ldr	r3, [r7, #4]
 81052ae:	68fa      	ldr	r2, [r7, #12]
 81052b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 81052b2:	683b      	ldr	r3, [r7, #0]
 81052b4:	685a      	ldr	r2, [r3, #4]
 81052b6:	687b      	ldr	r3, [r7, #4]
 81052b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 81052ba:	687b      	ldr	r3, [r7, #4]
 81052bc:	697a      	ldr	r2, [r7, #20]
 81052be:	621a      	str	r2, [r3, #32]
}
 81052c0:	bf00      	nop
 81052c2:	371c      	adds	r7, #28
 81052c4:	46bd      	mov	sp, r7
 81052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81052ca:	4770      	bx	lr
 81052cc:	40010000 	.word	0x40010000
 81052d0:	40010400 	.word	0x40010400
 81052d4:	40014000 	.word	0x40014000
 81052d8:	40014400 	.word	0x40014400
 81052dc:	40014800 	.word	0x40014800

081052e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 81052e0:	b480      	push	{r7}
 81052e2:	b087      	sub	sp, #28
 81052e4:	af00      	add	r7, sp, #0
 81052e6:	6078      	str	r0, [r7, #4]
 81052e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 81052ea:	687b      	ldr	r3, [r7, #4]
 81052ec:	6a1b      	ldr	r3, [r3, #32]
 81052ee:	f023 0210 	bic.w	r2, r3, #16
 81052f2:	687b      	ldr	r3, [r7, #4]
 81052f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 81052f6:	687b      	ldr	r3, [r7, #4]
 81052f8:	6a1b      	ldr	r3, [r3, #32]
 81052fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 81052fc:	687b      	ldr	r3, [r7, #4]
 81052fe:	685b      	ldr	r3, [r3, #4]
 8105300:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8105302:	687b      	ldr	r3, [r7, #4]
 8105304:	699b      	ldr	r3, [r3, #24]
 8105306:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8105308:	68fb      	ldr	r3, [r7, #12]
 810530a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 810530e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8105312:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8105314:	68fb      	ldr	r3, [r7, #12]
 8105316:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 810531a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 810531c:	683b      	ldr	r3, [r7, #0]
 810531e:	681b      	ldr	r3, [r3, #0]
 8105320:	021b      	lsls	r3, r3, #8
 8105322:	68fa      	ldr	r2, [r7, #12]
 8105324:	4313      	orrs	r3, r2
 8105326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8105328:	697b      	ldr	r3, [r7, #20]
 810532a:	f023 0320 	bic.w	r3, r3, #32
 810532e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8105330:	683b      	ldr	r3, [r7, #0]
 8105332:	689b      	ldr	r3, [r3, #8]
 8105334:	011b      	lsls	r3, r3, #4
 8105336:	697a      	ldr	r2, [r7, #20]
 8105338:	4313      	orrs	r3, r2
 810533a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 810533c:	687b      	ldr	r3, [r7, #4]
 810533e:	4a28      	ldr	r2, [pc, #160]	; (81053e0 <TIM_OC2_SetConfig+0x100>)
 8105340:	4293      	cmp	r3, r2
 8105342:	d003      	beq.n	810534c <TIM_OC2_SetConfig+0x6c>
 8105344:	687b      	ldr	r3, [r7, #4]
 8105346:	4a27      	ldr	r2, [pc, #156]	; (81053e4 <TIM_OC2_SetConfig+0x104>)
 8105348:	4293      	cmp	r3, r2
 810534a:	d10d      	bne.n	8105368 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 810534c:	697b      	ldr	r3, [r7, #20]
 810534e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8105352:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8105354:	683b      	ldr	r3, [r7, #0]
 8105356:	68db      	ldr	r3, [r3, #12]
 8105358:	011b      	lsls	r3, r3, #4
 810535a:	697a      	ldr	r2, [r7, #20]
 810535c:	4313      	orrs	r3, r2
 810535e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8105360:	697b      	ldr	r3, [r7, #20]
 8105362:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8105366:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8105368:	687b      	ldr	r3, [r7, #4]
 810536a:	4a1d      	ldr	r2, [pc, #116]	; (81053e0 <TIM_OC2_SetConfig+0x100>)
 810536c:	4293      	cmp	r3, r2
 810536e:	d00f      	beq.n	8105390 <TIM_OC2_SetConfig+0xb0>
 8105370:	687b      	ldr	r3, [r7, #4]
 8105372:	4a1c      	ldr	r2, [pc, #112]	; (81053e4 <TIM_OC2_SetConfig+0x104>)
 8105374:	4293      	cmp	r3, r2
 8105376:	d00b      	beq.n	8105390 <TIM_OC2_SetConfig+0xb0>
 8105378:	687b      	ldr	r3, [r7, #4]
 810537a:	4a1b      	ldr	r2, [pc, #108]	; (81053e8 <TIM_OC2_SetConfig+0x108>)
 810537c:	4293      	cmp	r3, r2
 810537e:	d007      	beq.n	8105390 <TIM_OC2_SetConfig+0xb0>
 8105380:	687b      	ldr	r3, [r7, #4]
 8105382:	4a1a      	ldr	r2, [pc, #104]	; (81053ec <TIM_OC2_SetConfig+0x10c>)
 8105384:	4293      	cmp	r3, r2
 8105386:	d003      	beq.n	8105390 <TIM_OC2_SetConfig+0xb0>
 8105388:	687b      	ldr	r3, [r7, #4]
 810538a:	4a19      	ldr	r2, [pc, #100]	; (81053f0 <TIM_OC2_SetConfig+0x110>)
 810538c:	4293      	cmp	r3, r2
 810538e:	d113      	bne.n	81053b8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8105390:	693b      	ldr	r3, [r7, #16]
 8105392:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8105396:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8105398:	693b      	ldr	r3, [r7, #16]
 810539a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 810539e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 81053a0:	683b      	ldr	r3, [r7, #0]
 81053a2:	695b      	ldr	r3, [r3, #20]
 81053a4:	009b      	lsls	r3, r3, #2
 81053a6:	693a      	ldr	r2, [r7, #16]
 81053a8:	4313      	orrs	r3, r2
 81053aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 81053ac:	683b      	ldr	r3, [r7, #0]
 81053ae:	699b      	ldr	r3, [r3, #24]
 81053b0:	009b      	lsls	r3, r3, #2
 81053b2:	693a      	ldr	r2, [r7, #16]
 81053b4:	4313      	orrs	r3, r2
 81053b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 81053b8:	687b      	ldr	r3, [r7, #4]
 81053ba:	693a      	ldr	r2, [r7, #16]
 81053bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 81053be:	687b      	ldr	r3, [r7, #4]
 81053c0:	68fa      	ldr	r2, [r7, #12]
 81053c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 81053c4:	683b      	ldr	r3, [r7, #0]
 81053c6:	685a      	ldr	r2, [r3, #4]
 81053c8:	687b      	ldr	r3, [r7, #4]
 81053ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 81053cc:	687b      	ldr	r3, [r7, #4]
 81053ce:	697a      	ldr	r2, [r7, #20]
 81053d0:	621a      	str	r2, [r3, #32]
}
 81053d2:	bf00      	nop
 81053d4:	371c      	adds	r7, #28
 81053d6:	46bd      	mov	sp, r7
 81053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81053dc:	4770      	bx	lr
 81053de:	bf00      	nop
 81053e0:	40010000 	.word	0x40010000
 81053e4:	40010400 	.word	0x40010400
 81053e8:	40014000 	.word	0x40014000
 81053ec:	40014400 	.word	0x40014400
 81053f0:	40014800 	.word	0x40014800

081053f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 81053f4:	b480      	push	{r7}
 81053f6:	b087      	sub	sp, #28
 81053f8:	af00      	add	r7, sp, #0
 81053fa:	6078      	str	r0, [r7, #4]
 81053fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 81053fe:	687b      	ldr	r3, [r7, #4]
 8105400:	6a1b      	ldr	r3, [r3, #32]
 8105402:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8105406:	687b      	ldr	r3, [r7, #4]
 8105408:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810540a:	687b      	ldr	r3, [r7, #4]
 810540c:	6a1b      	ldr	r3, [r3, #32]
 810540e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8105410:	687b      	ldr	r3, [r7, #4]
 8105412:	685b      	ldr	r3, [r3, #4]
 8105414:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8105416:	687b      	ldr	r3, [r7, #4]
 8105418:	69db      	ldr	r3, [r3, #28]
 810541a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 810541c:	68fb      	ldr	r3, [r7, #12]
 810541e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8105422:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8105426:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8105428:	68fb      	ldr	r3, [r7, #12]
 810542a:	f023 0303 	bic.w	r3, r3, #3
 810542e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8105430:	683b      	ldr	r3, [r7, #0]
 8105432:	681b      	ldr	r3, [r3, #0]
 8105434:	68fa      	ldr	r2, [r7, #12]
 8105436:	4313      	orrs	r3, r2
 8105438:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 810543a:	697b      	ldr	r3, [r7, #20]
 810543c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8105440:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8105442:	683b      	ldr	r3, [r7, #0]
 8105444:	689b      	ldr	r3, [r3, #8]
 8105446:	021b      	lsls	r3, r3, #8
 8105448:	697a      	ldr	r2, [r7, #20]
 810544a:	4313      	orrs	r3, r2
 810544c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 810544e:	687b      	ldr	r3, [r7, #4]
 8105450:	4a27      	ldr	r2, [pc, #156]	; (81054f0 <TIM_OC3_SetConfig+0xfc>)
 8105452:	4293      	cmp	r3, r2
 8105454:	d003      	beq.n	810545e <TIM_OC3_SetConfig+0x6a>
 8105456:	687b      	ldr	r3, [r7, #4]
 8105458:	4a26      	ldr	r2, [pc, #152]	; (81054f4 <TIM_OC3_SetConfig+0x100>)
 810545a:	4293      	cmp	r3, r2
 810545c:	d10d      	bne.n	810547a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 810545e:	697b      	ldr	r3, [r7, #20]
 8105460:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8105464:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8105466:	683b      	ldr	r3, [r7, #0]
 8105468:	68db      	ldr	r3, [r3, #12]
 810546a:	021b      	lsls	r3, r3, #8
 810546c:	697a      	ldr	r2, [r7, #20]
 810546e:	4313      	orrs	r3, r2
 8105470:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8105472:	697b      	ldr	r3, [r7, #20]
 8105474:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8105478:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810547a:	687b      	ldr	r3, [r7, #4]
 810547c:	4a1c      	ldr	r2, [pc, #112]	; (81054f0 <TIM_OC3_SetConfig+0xfc>)
 810547e:	4293      	cmp	r3, r2
 8105480:	d00f      	beq.n	81054a2 <TIM_OC3_SetConfig+0xae>
 8105482:	687b      	ldr	r3, [r7, #4]
 8105484:	4a1b      	ldr	r2, [pc, #108]	; (81054f4 <TIM_OC3_SetConfig+0x100>)
 8105486:	4293      	cmp	r3, r2
 8105488:	d00b      	beq.n	81054a2 <TIM_OC3_SetConfig+0xae>
 810548a:	687b      	ldr	r3, [r7, #4]
 810548c:	4a1a      	ldr	r2, [pc, #104]	; (81054f8 <TIM_OC3_SetConfig+0x104>)
 810548e:	4293      	cmp	r3, r2
 8105490:	d007      	beq.n	81054a2 <TIM_OC3_SetConfig+0xae>
 8105492:	687b      	ldr	r3, [r7, #4]
 8105494:	4a19      	ldr	r2, [pc, #100]	; (81054fc <TIM_OC3_SetConfig+0x108>)
 8105496:	4293      	cmp	r3, r2
 8105498:	d003      	beq.n	81054a2 <TIM_OC3_SetConfig+0xae>
 810549a:	687b      	ldr	r3, [r7, #4]
 810549c:	4a18      	ldr	r2, [pc, #96]	; (8105500 <TIM_OC3_SetConfig+0x10c>)
 810549e:	4293      	cmp	r3, r2
 81054a0:	d113      	bne.n	81054ca <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 81054a2:	693b      	ldr	r3, [r7, #16]
 81054a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 81054a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 81054aa:	693b      	ldr	r3, [r7, #16]
 81054ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 81054b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 81054b2:	683b      	ldr	r3, [r7, #0]
 81054b4:	695b      	ldr	r3, [r3, #20]
 81054b6:	011b      	lsls	r3, r3, #4
 81054b8:	693a      	ldr	r2, [r7, #16]
 81054ba:	4313      	orrs	r3, r2
 81054bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 81054be:	683b      	ldr	r3, [r7, #0]
 81054c0:	699b      	ldr	r3, [r3, #24]
 81054c2:	011b      	lsls	r3, r3, #4
 81054c4:	693a      	ldr	r2, [r7, #16]
 81054c6:	4313      	orrs	r3, r2
 81054c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 81054ca:	687b      	ldr	r3, [r7, #4]
 81054cc:	693a      	ldr	r2, [r7, #16]
 81054ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 81054d0:	687b      	ldr	r3, [r7, #4]
 81054d2:	68fa      	ldr	r2, [r7, #12]
 81054d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 81054d6:	683b      	ldr	r3, [r7, #0]
 81054d8:	685a      	ldr	r2, [r3, #4]
 81054da:	687b      	ldr	r3, [r7, #4]
 81054dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 81054de:	687b      	ldr	r3, [r7, #4]
 81054e0:	697a      	ldr	r2, [r7, #20]
 81054e2:	621a      	str	r2, [r3, #32]
}
 81054e4:	bf00      	nop
 81054e6:	371c      	adds	r7, #28
 81054e8:	46bd      	mov	sp, r7
 81054ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 81054ee:	4770      	bx	lr
 81054f0:	40010000 	.word	0x40010000
 81054f4:	40010400 	.word	0x40010400
 81054f8:	40014000 	.word	0x40014000
 81054fc:	40014400 	.word	0x40014400
 8105500:	40014800 	.word	0x40014800

08105504 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8105504:	b480      	push	{r7}
 8105506:	b087      	sub	sp, #28
 8105508:	af00      	add	r7, sp, #0
 810550a:	6078      	str	r0, [r7, #4]
 810550c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 810550e:	687b      	ldr	r3, [r7, #4]
 8105510:	6a1b      	ldr	r3, [r3, #32]
 8105512:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8105516:	687b      	ldr	r3, [r7, #4]
 8105518:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810551a:	687b      	ldr	r3, [r7, #4]
 810551c:	6a1b      	ldr	r3, [r3, #32]
 810551e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8105520:	687b      	ldr	r3, [r7, #4]
 8105522:	685b      	ldr	r3, [r3, #4]
 8105524:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8105526:	687b      	ldr	r3, [r7, #4]
 8105528:	69db      	ldr	r3, [r3, #28]
 810552a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 810552c:	68fb      	ldr	r3, [r7, #12]
 810552e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8105532:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8105536:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8105538:	68fb      	ldr	r3, [r7, #12]
 810553a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 810553e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8105540:	683b      	ldr	r3, [r7, #0]
 8105542:	681b      	ldr	r3, [r3, #0]
 8105544:	021b      	lsls	r3, r3, #8
 8105546:	68fa      	ldr	r2, [r7, #12]
 8105548:	4313      	orrs	r3, r2
 810554a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 810554c:	693b      	ldr	r3, [r7, #16]
 810554e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8105552:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8105554:	683b      	ldr	r3, [r7, #0]
 8105556:	689b      	ldr	r3, [r3, #8]
 8105558:	031b      	lsls	r3, r3, #12
 810555a:	693a      	ldr	r2, [r7, #16]
 810555c:	4313      	orrs	r3, r2
 810555e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8105560:	687b      	ldr	r3, [r7, #4]
 8105562:	4a18      	ldr	r2, [pc, #96]	; (81055c4 <TIM_OC4_SetConfig+0xc0>)
 8105564:	4293      	cmp	r3, r2
 8105566:	d00f      	beq.n	8105588 <TIM_OC4_SetConfig+0x84>
 8105568:	687b      	ldr	r3, [r7, #4]
 810556a:	4a17      	ldr	r2, [pc, #92]	; (81055c8 <TIM_OC4_SetConfig+0xc4>)
 810556c:	4293      	cmp	r3, r2
 810556e:	d00b      	beq.n	8105588 <TIM_OC4_SetConfig+0x84>
 8105570:	687b      	ldr	r3, [r7, #4]
 8105572:	4a16      	ldr	r2, [pc, #88]	; (81055cc <TIM_OC4_SetConfig+0xc8>)
 8105574:	4293      	cmp	r3, r2
 8105576:	d007      	beq.n	8105588 <TIM_OC4_SetConfig+0x84>
 8105578:	687b      	ldr	r3, [r7, #4]
 810557a:	4a15      	ldr	r2, [pc, #84]	; (81055d0 <TIM_OC4_SetConfig+0xcc>)
 810557c:	4293      	cmp	r3, r2
 810557e:	d003      	beq.n	8105588 <TIM_OC4_SetConfig+0x84>
 8105580:	687b      	ldr	r3, [r7, #4]
 8105582:	4a14      	ldr	r2, [pc, #80]	; (81055d4 <TIM_OC4_SetConfig+0xd0>)
 8105584:	4293      	cmp	r3, r2
 8105586:	d109      	bne.n	810559c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8105588:	697b      	ldr	r3, [r7, #20]
 810558a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 810558e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8105590:	683b      	ldr	r3, [r7, #0]
 8105592:	695b      	ldr	r3, [r3, #20]
 8105594:	019b      	lsls	r3, r3, #6
 8105596:	697a      	ldr	r2, [r7, #20]
 8105598:	4313      	orrs	r3, r2
 810559a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810559c:	687b      	ldr	r3, [r7, #4]
 810559e:	697a      	ldr	r2, [r7, #20]
 81055a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 81055a2:	687b      	ldr	r3, [r7, #4]
 81055a4:	68fa      	ldr	r2, [r7, #12]
 81055a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 81055a8:	683b      	ldr	r3, [r7, #0]
 81055aa:	685a      	ldr	r2, [r3, #4]
 81055ac:	687b      	ldr	r3, [r7, #4]
 81055ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 81055b0:	687b      	ldr	r3, [r7, #4]
 81055b2:	693a      	ldr	r2, [r7, #16]
 81055b4:	621a      	str	r2, [r3, #32]
}
 81055b6:	bf00      	nop
 81055b8:	371c      	adds	r7, #28
 81055ba:	46bd      	mov	sp, r7
 81055bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81055c0:	4770      	bx	lr
 81055c2:	bf00      	nop
 81055c4:	40010000 	.word	0x40010000
 81055c8:	40010400 	.word	0x40010400
 81055cc:	40014000 	.word	0x40014000
 81055d0:	40014400 	.word	0x40014400
 81055d4:	40014800 	.word	0x40014800

081055d8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 81055d8:	b480      	push	{r7}
 81055da:	b087      	sub	sp, #28
 81055dc:	af00      	add	r7, sp, #0
 81055de:	6078      	str	r0, [r7, #4]
 81055e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 81055e2:	687b      	ldr	r3, [r7, #4]
 81055e4:	6a1b      	ldr	r3, [r3, #32]
 81055e6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 81055ea:	687b      	ldr	r3, [r7, #4]
 81055ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 81055ee:	687b      	ldr	r3, [r7, #4]
 81055f0:	6a1b      	ldr	r3, [r3, #32]
 81055f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 81055f4:	687b      	ldr	r3, [r7, #4]
 81055f6:	685b      	ldr	r3, [r3, #4]
 81055f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 81055fa:	687b      	ldr	r3, [r7, #4]
 81055fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81055fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8105600:	68fb      	ldr	r3, [r7, #12]
 8105602:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8105606:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 810560a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 810560c:	683b      	ldr	r3, [r7, #0]
 810560e:	681b      	ldr	r3, [r3, #0]
 8105610:	68fa      	ldr	r2, [r7, #12]
 8105612:	4313      	orrs	r3, r2
 8105614:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8105616:	693b      	ldr	r3, [r7, #16]
 8105618:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 810561c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 810561e:	683b      	ldr	r3, [r7, #0]
 8105620:	689b      	ldr	r3, [r3, #8]
 8105622:	041b      	lsls	r3, r3, #16
 8105624:	693a      	ldr	r2, [r7, #16]
 8105626:	4313      	orrs	r3, r2
 8105628:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810562a:	687b      	ldr	r3, [r7, #4]
 810562c:	4a17      	ldr	r2, [pc, #92]	; (810568c <TIM_OC5_SetConfig+0xb4>)
 810562e:	4293      	cmp	r3, r2
 8105630:	d00f      	beq.n	8105652 <TIM_OC5_SetConfig+0x7a>
 8105632:	687b      	ldr	r3, [r7, #4]
 8105634:	4a16      	ldr	r2, [pc, #88]	; (8105690 <TIM_OC5_SetConfig+0xb8>)
 8105636:	4293      	cmp	r3, r2
 8105638:	d00b      	beq.n	8105652 <TIM_OC5_SetConfig+0x7a>
 810563a:	687b      	ldr	r3, [r7, #4]
 810563c:	4a15      	ldr	r2, [pc, #84]	; (8105694 <TIM_OC5_SetConfig+0xbc>)
 810563e:	4293      	cmp	r3, r2
 8105640:	d007      	beq.n	8105652 <TIM_OC5_SetConfig+0x7a>
 8105642:	687b      	ldr	r3, [r7, #4]
 8105644:	4a14      	ldr	r2, [pc, #80]	; (8105698 <TIM_OC5_SetConfig+0xc0>)
 8105646:	4293      	cmp	r3, r2
 8105648:	d003      	beq.n	8105652 <TIM_OC5_SetConfig+0x7a>
 810564a:	687b      	ldr	r3, [r7, #4]
 810564c:	4a13      	ldr	r2, [pc, #76]	; (810569c <TIM_OC5_SetConfig+0xc4>)
 810564e:	4293      	cmp	r3, r2
 8105650:	d109      	bne.n	8105666 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8105652:	697b      	ldr	r3, [r7, #20]
 8105654:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8105658:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 810565a:	683b      	ldr	r3, [r7, #0]
 810565c:	695b      	ldr	r3, [r3, #20]
 810565e:	021b      	lsls	r3, r3, #8
 8105660:	697a      	ldr	r2, [r7, #20]
 8105662:	4313      	orrs	r3, r2
 8105664:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8105666:	687b      	ldr	r3, [r7, #4]
 8105668:	697a      	ldr	r2, [r7, #20]
 810566a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 810566c:	687b      	ldr	r3, [r7, #4]
 810566e:	68fa      	ldr	r2, [r7, #12]
 8105670:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8105672:	683b      	ldr	r3, [r7, #0]
 8105674:	685a      	ldr	r2, [r3, #4]
 8105676:	687b      	ldr	r3, [r7, #4]
 8105678:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810567a:	687b      	ldr	r3, [r7, #4]
 810567c:	693a      	ldr	r2, [r7, #16]
 810567e:	621a      	str	r2, [r3, #32]
}
 8105680:	bf00      	nop
 8105682:	371c      	adds	r7, #28
 8105684:	46bd      	mov	sp, r7
 8105686:	f85d 7b04 	ldr.w	r7, [sp], #4
 810568a:	4770      	bx	lr
 810568c:	40010000 	.word	0x40010000
 8105690:	40010400 	.word	0x40010400
 8105694:	40014000 	.word	0x40014000
 8105698:	40014400 	.word	0x40014400
 810569c:	40014800 	.word	0x40014800

081056a0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 81056a0:	b480      	push	{r7}
 81056a2:	b087      	sub	sp, #28
 81056a4:	af00      	add	r7, sp, #0
 81056a6:	6078      	str	r0, [r7, #4]
 81056a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 81056aa:	687b      	ldr	r3, [r7, #4]
 81056ac:	6a1b      	ldr	r3, [r3, #32]
 81056ae:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 81056b2:	687b      	ldr	r3, [r7, #4]
 81056b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 81056b6:	687b      	ldr	r3, [r7, #4]
 81056b8:	6a1b      	ldr	r3, [r3, #32]
 81056ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 81056bc:	687b      	ldr	r3, [r7, #4]
 81056be:	685b      	ldr	r3, [r3, #4]
 81056c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 81056c2:	687b      	ldr	r3, [r7, #4]
 81056c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81056c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 81056c8:	68fb      	ldr	r3, [r7, #12]
 81056ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 81056ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 81056d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 81056d4:	683b      	ldr	r3, [r7, #0]
 81056d6:	681b      	ldr	r3, [r3, #0]
 81056d8:	021b      	lsls	r3, r3, #8
 81056da:	68fa      	ldr	r2, [r7, #12]
 81056dc:	4313      	orrs	r3, r2
 81056de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 81056e0:	693b      	ldr	r3, [r7, #16]
 81056e2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 81056e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 81056e8:	683b      	ldr	r3, [r7, #0]
 81056ea:	689b      	ldr	r3, [r3, #8]
 81056ec:	051b      	lsls	r3, r3, #20
 81056ee:	693a      	ldr	r2, [r7, #16]
 81056f0:	4313      	orrs	r3, r2
 81056f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 81056f4:	687b      	ldr	r3, [r7, #4]
 81056f6:	4a18      	ldr	r2, [pc, #96]	; (8105758 <TIM_OC6_SetConfig+0xb8>)
 81056f8:	4293      	cmp	r3, r2
 81056fa:	d00f      	beq.n	810571c <TIM_OC6_SetConfig+0x7c>
 81056fc:	687b      	ldr	r3, [r7, #4]
 81056fe:	4a17      	ldr	r2, [pc, #92]	; (810575c <TIM_OC6_SetConfig+0xbc>)
 8105700:	4293      	cmp	r3, r2
 8105702:	d00b      	beq.n	810571c <TIM_OC6_SetConfig+0x7c>
 8105704:	687b      	ldr	r3, [r7, #4]
 8105706:	4a16      	ldr	r2, [pc, #88]	; (8105760 <TIM_OC6_SetConfig+0xc0>)
 8105708:	4293      	cmp	r3, r2
 810570a:	d007      	beq.n	810571c <TIM_OC6_SetConfig+0x7c>
 810570c:	687b      	ldr	r3, [r7, #4]
 810570e:	4a15      	ldr	r2, [pc, #84]	; (8105764 <TIM_OC6_SetConfig+0xc4>)
 8105710:	4293      	cmp	r3, r2
 8105712:	d003      	beq.n	810571c <TIM_OC6_SetConfig+0x7c>
 8105714:	687b      	ldr	r3, [r7, #4]
 8105716:	4a14      	ldr	r2, [pc, #80]	; (8105768 <TIM_OC6_SetConfig+0xc8>)
 8105718:	4293      	cmp	r3, r2
 810571a:	d109      	bne.n	8105730 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 810571c:	697b      	ldr	r3, [r7, #20]
 810571e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8105722:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8105724:	683b      	ldr	r3, [r7, #0]
 8105726:	695b      	ldr	r3, [r3, #20]
 8105728:	029b      	lsls	r3, r3, #10
 810572a:	697a      	ldr	r2, [r7, #20]
 810572c:	4313      	orrs	r3, r2
 810572e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8105730:	687b      	ldr	r3, [r7, #4]
 8105732:	697a      	ldr	r2, [r7, #20]
 8105734:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8105736:	687b      	ldr	r3, [r7, #4]
 8105738:	68fa      	ldr	r2, [r7, #12]
 810573a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 810573c:	683b      	ldr	r3, [r7, #0]
 810573e:	685a      	ldr	r2, [r3, #4]
 8105740:	687b      	ldr	r3, [r7, #4]
 8105742:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8105744:	687b      	ldr	r3, [r7, #4]
 8105746:	693a      	ldr	r2, [r7, #16]
 8105748:	621a      	str	r2, [r3, #32]
}
 810574a:	bf00      	nop
 810574c:	371c      	adds	r7, #28
 810574e:	46bd      	mov	sp, r7
 8105750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105754:	4770      	bx	lr
 8105756:	bf00      	nop
 8105758:	40010000 	.word	0x40010000
 810575c:	40010400 	.word	0x40010400
 8105760:	40014000 	.word	0x40014000
 8105764:	40014400 	.word	0x40014400
 8105768:	40014800 	.word	0x40014800

0810576c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 810576c:	b480      	push	{r7}
 810576e:	b087      	sub	sp, #28
 8105770:	af00      	add	r7, sp, #0
 8105772:	60f8      	str	r0, [r7, #12]
 8105774:	60b9      	str	r1, [r7, #8]
 8105776:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8105778:	68bb      	ldr	r3, [r7, #8]
 810577a:	f003 031f 	and.w	r3, r3, #31
 810577e:	2201      	movs	r2, #1
 8105780:	fa02 f303 	lsl.w	r3, r2, r3
 8105784:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8105786:	68fb      	ldr	r3, [r7, #12]
 8105788:	6a1a      	ldr	r2, [r3, #32]
 810578a:	697b      	ldr	r3, [r7, #20]
 810578c:	43db      	mvns	r3, r3
 810578e:	401a      	ands	r2, r3
 8105790:	68fb      	ldr	r3, [r7, #12]
 8105792:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8105794:	68fb      	ldr	r3, [r7, #12]
 8105796:	6a1a      	ldr	r2, [r3, #32]
 8105798:	68bb      	ldr	r3, [r7, #8]
 810579a:	f003 031f 	and.w	r3, r3, #31
 810579e:	6879      	ldr	r1, [r7, #4]
 81057a0:	fa01 f303 	lsl.w	r3, r1, r3
 81057a4:	431a      	orrs	r2, r3
 81057a6:	68fb      	ldr	r3, [r7, #12]
 81057a8:	621a      	str	r2, [r3, #32]
}
 81057aa:	bf00      	nop
 81057ac:	371c      	adds	r7, #28
 81057ae:	46bd      	mov	sp, r7
 81057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81057b4:	4770      	bx	lr
	...

081057b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 81057b8:	b480      	push	{r7}
 81057ba:	b085      	sub	sp, #20
 81057bc:	af00      	add	r7, sp, #0
 81057be:	6078      	str	r0, [r7, #4]
 81057c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 81057c2:	687b      	ldr	r3, [r7, #4]
 81057c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 81057c8:	2b01      	cmp	r3, #1
 81057ca:	d101      	bne.n	81057d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 81057cc:	2302      	movs	r3, #2
 81057ce:	e06d      	b.n	81058ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 81057d0:	687b      	ldr	r3, [r7, #4]
 81057d2:	2201      	movs	r2, #1
 81057d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 81057d8:	687b      	ldr	r3, [r7, #4]
 81057da:	2202      	movs	r2, #2
 81057dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 81057e0:	687b      	ldr	r3, [r7, #4]
 81057e2:	681b      	ldr	r3, [r3, #0]
 81057e4:	685b      	ldr	r3, [r3, #4]
 81057e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 81057e8:	687b      	ldr	r3, [r7, #4]
 81057ea:	681b      	ldr	r3, [r3, #0]
 81057ec:	689b      	ldr	r3, [r3, #8]
 81057ee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 81057f0:	687b      	ldr	r3, [r7, #4]
 81057f2:	681b      	ldr	r3, [r3, #0]
 81057f4:	4a30      	ldr	r2, [pc, #192]	; (81058b8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 81057f6:	4293      	cmp	r3, r2
 81057f8:	d004      	beq.n	8105804 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 81057fa:	687b      	ldr	r3, [r7, #4]
 81057fc:	681b      	ldr	r3, [r3, #0]
 81057fe:	4a2f      	ldr	r2, [pc, #188]	; (81058bc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8105800:	4293      	cmp	r3, r2
 8105802:	d108      	bne.n	8105816 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8105804:	68fb      	ldr	r3, [r7, #12]
 8105806:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 810580a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 810580c:	683b      	ldr	r3, [r7, #0]
 810580e:	685b      	ldr	r3, [r3, #4]
 8105810:	68fa      	ldr	r2, [r7, #12]
 8105812:	4313      	orrs	r3, r2
 8105814:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8105816:	68fb      	ldr	r3, [r7, #12]
 8105818:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 810581c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 810581e:	683b      	ldr	r3, [r7, #0]
 8105820:	681b      	ldr	r3, [r3, #0]
 8105822:	68fa      	ldr	r2, [r7, #12]
 8105824:	4313      	orrs	r3, r2
 8105826:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8105828:	687b      	ldr	r3, [r7, #4]
 810582a:	681b      	ldr	r3, [r3, #0]
 810582c:	68fa      	ldr	r2, [r7, #12]
 810582e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8105830:	687b      	ldr	r3, [r7, #4]
 8105832:	681b      	ldr	r3, [r3, #0]
 8105834:	4a20      	ldr	r2, [pc, #128]	; (81058b8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8105836:	4293      	cmp	r3, r2
 8105838:	d022      	beq.n	8105880 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810583a:	687b      	ldr	r3, [r7, #4]
 810583c:	681b      	ldr	r3, [r3, #0]
 810583e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8105842:	d01d      	beq.n	8105880 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8105844:	687b      	ldr	r3, [r7, #4]
 8105846:	681b      	ldr	r3, [r3, #0]
 8105848:	4a1d      	ldr	r2, [pc, #116]	; (81058c0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 810584a:	4293      	cmp	r3, r2
 810584c:	d018      	beq.n	8105880 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810584e:	687b      	ldr	r3, [r7, #4]
 8105850:	681b      	ldr	r3, [r3, #0]
 8105852:	4a1c      	ldr	r2, [pc, #112]	; (81058c4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8105854:	4293      	cmp	r3, r2
 8105856:	d013      	beq.n	8105880 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8105858:	687b      	ldr	r3, [r7, #4]
 810585a:	681b      	ldr	r3, [r3, #0]
 810585c:	4a1a      	ldr	r2, [pc, #104]	; (81058c8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 810585e:	4293      	cmp	r3, r2
 8105860:	d00e      	beq.n	8105880 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8105862:	687b      	ldr	r3, [r7, #4]
 8105864:	681b      	ldr	r3, [r3, #0]
 8105866:	4a15      	ldr	r2, [pc, #84]	; (81058bc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8105868:	4293      	cmp	r3, r2
 810586a:	d009      	beq.n	8105880 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810586c:	687b      	ldr	r3, [r7, #4]
 810586e:	681b      	ldr	r3, [r3, #0]
 8105870:	4a16      	ldr	r2, [pc, #88]	; (81058cc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8105872:	4293      	cmp	r3, r2
 8105874:	d004      	beq.n	8105880 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8105876:	687b      	ldr	r3, [r7, #4]
 8105878:	681b      	ldr	r3, [r3, #0]
 810587a:	4a15      	ldr	r2, [pc, #84]	; (81058d0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 810587c:	4293      	cmp	r3, r2
 810587e:	d10c      	bne.n	810589a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8105880:	68bb      	ldr	r3, [r7, #8]
 8105882:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8105886:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8105888:	683b      	ldr	r3, [r7, #0]
 810588a:	689b      	ldr	r3, [r3, #8]
 810588c:	68ba      	ldr	r2, [r7, #8]
 810588e:	4313      	orrs	r3, r2
 8105890:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8105892:	687b      	ldr	r3, [r7, #4]
 8105894:	681b      	ldr	r3, [r3, #0]
 8105896:	68ba      	ldr	r2, [r7, #8]
 8105898:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 810589a:	687b      	ldr	r3, [r7, #4]
 810589c:	2201      	movs	r2, #1
 810589e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 81058a2:	687b      	ldr	r3, [r7, #4]
 81058a4:	2200      	movs	r2, #0
 81058a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 81058aa:	2300      	movs	r3, #0
}
 81058ac:	4618      	mov	r0, r3
 81058ae:	3714      	adds	r7, #20
 81058b0:	46bd      	mov	sp, r7
 81058b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81058b6:	4770      	bx	lr
 81058b8:	40010000 	.word	0x40010000
 81058bc:	40010400 	.word	0x40010400
 81058c0:	40000400 	.word	0x40000400
 81058c4:	40000800 	.word	0x40000800
 81058c8:	40000c00 	.word	0x40000c00
 81058cc:	40001800 	.word	0x40001800
 81058d0:	40014000 	.word	0x40014000

081058d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 81058d4:	b480      	push	{r7}
 81058d6:	b083      	sub	sp, #12
 81058d8:	af00      	add	r7, sp, #0
 81058da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 81058dc:	bf00      	nop
 81058de:	370c      	adds	r7, #12
 81058e0:	46bd      	mov	sp, r7
 81058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81058e6:	4770      	bx	lr

081058e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 81058e8:	b480      	push	{r7}
 81058ea:	b083      	sub	sp, #12
 81058ec:	af00      	add	r7, sp, #0
 81058ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 81058f0:	bf00      	nop
 81058f2:	370c      	adds	r7, #12
 81058f4:	46bd      	mov	sp, r7
 81058f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81058fa:	4770      	bx	lr

081058fc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 81058fc:	b480      	push	{r7}
 81058fe:	b083      	sub	sp, #12
 8105900:	af00      	add	r7, sp, #0
 8105902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8105904:	bf00      	nop
 8105906:	370c      	adds	r7, #12
 8105908:	46bd      	mov	sp, r7
 810590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810590e:	4770      	bx	lr

08105910 <__errno>:
 8105910:	4b01      	ldr	r3, [pc, #4]	; (8105918 <__errno+0x8>)
 8105912:	6818      	ldr	r0, [r3, #0]
 8105914:	4770      	bx	lr
 8105916:	bf00      	nop
 8105918:	10000018 	.word	0x10000018

0810591c <__libc_init_array>:
 810591c:	b570      	push	{r4, r5, r6, lr}
 810591e:	4d0d      	ldr	r5, [pc, #52]	; (8105954 <__libc_init_array+0x38>)
 8105920:	4c0d      	ldr	r4, [pc, #52]	; (8105958 <__libc_init_array+0x3c>)
 8105922:	1b64      	subs	r4, r4, r5
 8105924:	10a4      	asrs	r4, r4, #2
 8105926:	2600      	movs	r6, #0
 8105928:	42a6      	cmp	r6, r4
 810592a:	d109      	bne.n	8105940 <__libc_init_array+0x24>
 810592c:	4d0b      	ldr	r5, [pc, #44]	; (810595c <__libc_init_array+0x40>)
 810592e:	4c0c      	ldr	r4, [pc, #48]	; (8105960 <__libc_init_array+0x44>)
 8105930:	f000 ff3c 	bl	81067ac <_init>
 8105934:	1b64      	subs	r4, r4, r5
 8105936:	10a4      	asrs	r4, r4, #2
 8105938:	2600      	movs	r6, #0
 810593a:	42a6      	cmp	r6, r4
 810593c:	d105      	bne.n	810594a <__libc_init_array+0x2e>
 810593e:	bd70      	pop	{r4, r5, r6, pc}
 8105940:	f855 3b04 	ldr.w	r3, [r5], #4
 8105944:	4798      	blx	r3
 8105946:	3601      	adds	r6, #1
 8105948:	e7ee      	b.n	8105928 <__libc_init_array+0xc>
 810594a:	f855 3b04 	ldr.w	r3, [r5], #4
 810594e:	4798      	blx	r3
 8105950:	3601      	adds	r6, #1
 8105952:	e7f2      	b.n	810593a <__libc_init_array+0x1e>
 8105954:	08106808 	.word	0x08106808
 8105958:	08106808 	.word	0x08106808
 810595c:	08106808 	.word	0x08106808
 8105960:	0810680c 	.word	0x0810680c

08105964 <memset>:
 8105964:	4402      	add	r2, r0
 8105966:	4603      	mov	r3, r0
 8105968:	4293      	cmp	r3, r2
 810596a:	d100      	bne.n	810596e <memset+0xa>
 810596c:	4770      	bx	lr
 810596e:	f803 1b01 	strb.w	r1, [r3], #1
 8105972:	e7f9      	b.n	8105968 <memset+0x4>

08105974 <pow>:
 8105974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8105976:	ed2d 8b02 	vpush	{d8}
 810597a:	eeb0 8a40 	vmov.f32	s16, s0
 810597e:	eef0 8a60 	vmov.f32	s17, s1
 8105982:	ec55 4b11 	vmov	r4, r5, d1
 8105986:	f000 f867 	bl	8105a58 <__ieee754_pow>
 810598a:	4622      	mov	r2, r4
 810598c:	462b      	mov	r3, r5
 810598e:	4620      	mov	r0, r4
 8105990:	4629      	mov	r1, r5
 8105992:	ec57 6b10 	vmov	r6, r7, d0
 8105996:	f7fb f8f5 	bl	8100b84 <__aeabi_dcmpun>
 810599a:	2800      	cmp	r0, #0
 810599c:	d13b      	bne.n	8105a16 <pow+0xa2>
 810599e:	ec51 0b18 	vmov	r0, r1, d8
 81059a2:	2200      	movs	r2, #0
 81059a4:	2300      	movs	r3, #0
 81059a6:	f7fb f8bb 	bl	8100b20 <__aeabi_dcmpeq>
 81059aa:	b1b8      	cbz	r0, 81059dc <pow+0x68>
 81059ac:	2200      	movs	r2, #0
 81059ae:	2300      	movs	r3, #0
 81059b0:	4620      	mov	r0, r4
 81059b2:	4629      	mov	r1, r5
 81059b4:	f7fb f8b4 	bl	8100b20 <__aeabi_dcmpeq>
 81059b8:	2800      	cmp	r0, #0
 81059ba:	d146      	bne.n	8105a4a <pow+0xd6>
 81059bc:	ec45 4b10 	vmov	d0, r4, r5
 81059c0:	f000 fe63 	bl	810668a <finite>
 81059c4:	b338      	cbz	r0, 8105a16 <pow+0xa2>
 81059c6:	2200      	movs	r2, #0
 81059c8:	2300      	movs	r3, #0
 81059ca:	4620      	mov	r0, r4
 81059cc:	4629      	mov	r1, r5
 81059ce:	f7fb f8b1 	bl	8100b34 <__aeabi_dcmplt>
 81059d2:	b300      	cbz	r0, 8105a16 <pow+0xa2>
 81059d4:	f7ff ff9c 	bl	8105910 <__errno>
 81059d8:	2322      	movs	r3, #34	; 0x22
 81059da:	e01b      	b.n	8105a14 <pow+0xa0>
 81059dc:	ec47 6b10 	vmov	d0, r6, r7
 81059e0:	f000 fe53 	bl	810668a <finite>
 81059e4:	b9e0      	cbnz	r0, 8105a20 <pow+0xac>
 81059e6:	eeb0 0a48 	vmov.f32	s0, s16
 81059ea:	eef0 0a68 	vmov.f32	s1, s17
 81059ee:	f000 fe4c 	bl	810668a <finite>
 81059f2:	b1a8      	cbz	r0, 8105a20 <pow+0xac>
 81059f4:	ec45 4b10 	vmov	d0, r4, r5
 81059f8:	f000 fe47 	bl	810668a <finite>
 81059fc:	b180      	cbz	r0, 8105a20 <pow+0xac>
 81059fe:	4632      	mov	r2, r6
 8105a00:	463b      	mov	r3, r7
 8105a02:	4630      	mov	r0, r6
 8105a04:	4639      	mov	r1, r7
 8105a06:	f7fb f8bd 	bl	8100b84 <__aeabi_dcmpun>
 8105a0a:	2800      	cmp	r0, #0
 8105a0c:	d0e2      	beq.n	81059d4 <pow+0x60>
 8105a0e:	f7ff ff7f 	bl	8105910 <__errno>
 8105a12:	2321      	movs	r3, #33	; 0x21
 8105a14:	6003      	str	r3, [r0, #0]
 8105a16:	ecbd 8b02 	vpop	{d8}
 8105a1a:	ec47 6b10 	vmov	d0, r6, r7
 8105a1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8105a20:	2200      	movs	r2, #0
 8105a22:	2300      	movs	r3, #0
 8105a24:	4630      	mov	r0, r6
 8105a26:	4639      	mov	r1, r7
 8105a28:	f7fb f87a 	bl	8100b20 <__aeabi_dcmpeq>
 8105a2c:	2800      	cmp	r0, #0
 8105a2e:	d0f2      	beq.n	8105a16 <pow+0xa2>
 8105a30:	eeb0 0a48 	vmov.f32	s0, s16
 8105a34:	eef0 0a68 	vmov.f32	s1, s17
 8105a38:	f000 fe27 	bl	810668a <finite>
 8105a3c:	2800      	cmp	r0, #0
 8105a3e:	d0ea      	beq.n	8105a16 <pow+0xa2>
 8105a40:	ec45 4b10 	vmov	d0, r4, r5
 8105a44:	f000 fe21 	bl	810668a <finite>
 8105a48:	e7c3      	b.n	81059d2 <pow+0x5e>
 8105a4a:	4f01      	ldr	r7, [pc, #4]	; (8105a50 <pow+0xdc>)
 8105a4c:	2600      	movs	r6, #0
 8105a4e:	e7e2      	b.n	8105a16 <pow+0xa2>
 8105a50:	3ff00000 	.word	0x3ff00000
 8105a54:	00000000 	.word	0x00000000

08105a58 <__ieee754_pow>:
 8105a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8105a5c:	ed2d 8b06 	vpush	{d8-d10}
 8105a60:	b089      	sub	sp, #36	; 0x24
 8105a62:	ed8d 1b00 	vstr	d1, [sp]
 8105a66:	e9dd 2900 	ldrd	r2, r9, [sp]
 8105a6a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8105a6e:	ea58 0102 	orrs.w	r1, r8, r2
 8105a72:	ec57 6b10 	vmov	r6, r7, d0
 8105a76:	d115      	bne.n	8105aa4 <__ieee754_pow+0x4c>
 8105a78:	19b3      	adds	r3, r6, r6
 8105a7a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8105a7e:	4152      	adcs	r2, r2
 8105a80:	4299      	cmp	r1, r3
 8105a82:	4b89      	ldr	r3, [pc, #548]	; (8105ca8 <__ieee754_pow+0x250>)
 8105a84:	4193      	sbcs	r3, r2
 8105a86:	f080 84d2 	bcs.w	810642e <__ieee754_pow+0x9d6>
 8105a8a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8105a8e:	4630      	mov	r0, r6
 8105a90:	4639      	mov	r1, r7
 8105a92:	f7fa fc27 	bl	81002e4 <__adddf3>
 8105a96:	ec41 0b10 	vmov	d0, r0, r1
 8105a9a:	b009      	add	sp, #36	; 0x24
 8105a9c:	ecbd 8b06 	vpop	{d8-d10}
 8105aa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8105aa4:	4b81      	ldr	r3, [pc, #516]	; (8105cac <__ieee754_pow+0x254>)
 8105aa6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8105aaa:	429c      	cmp	r4, r3
 8105aac:	ee10 aa10 	vmov	sl, s0
 8105ab0:	463d      	mov	r5, r7
 8105ab2:	dc06      	bgt.n	8105ac2 <__ieee754_pow+0x6a>
 8105ab4:	d101      	bne.n	8105aba <__ieee754_pow+0x62>
 8105ab6:	2e00      	cmp	r6, #0
 8105ab8:	d1e7      	bne.n	8105a8a <__ieee754_pow+0x32>
 8105aba:	4598      	cmp	r8, r3
 8105abc:	dc01      	bgt.n	8105ac2 <__ieee754_pow+0x6a>
 8105abe:	d10f      	bne.n	8105ae0 <__ieee754_pow+0x88>
 8105ac0:	b172      	cbz	r2, 8105ae0 <__ieee754_pow+0x88>
 8105ac2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8105ac6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8105aca:	ea55 050a 	orrs.w	r5, r5, sl
 8105ace:	d1dc      	bne.n	8105a8a <__ieee754_pow+0x32>
 8105ad0:	e9dd 3200 	ldrd	r3, r2, [sp]
 8105ad4:	18db      	adds	r3, r3, r3
 8105ad6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8105ada:	4152      	adcs	r2, r2
 8105adc:	429d      	cmp	r5, r3
 8105ade:	e7d0      	b.n	8105a82 <__ieee754_pow+0x2a>
 8105ae0:	2d00      	cmp	r5, #0
 8105ae2:	da3b      	bge.n	8105b5c <__ieee754_pow+0x104>
 8105ae4:	4b72      	ldr	r3, [pc, #456]	; (8105cb0 <__ieee754_pow+0x258>)
 8105ae6:	4598      	cmp	r8, r3
 8105ae8:	dc51      	bgt.n	8105b8e <__ieee754_pow+0x136>
 8105aea:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8105aee:	4598      	cmp	r8, r3
 8105af0:	f340 84ac 	ble.w	810644c <__ieee754_pow+0x9f4>
 8105af4:	ea4f 5328 	mov.w	r3, r8, asr #20
 8105af8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8105afc:	2b14      	cmp	r3, #20
 8105afe:	dd0f      	ble.n	8105b20 <__ieee754_pow+0xc8>
 8105b00:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8105b04:	fa22 f103 	lsr.w	r1, r2, r3
 8105b08:	fa01 f303 	lsl.w	r3, r1, r3
 8105b0c:	4293      	cmp	r3, r2
 8105b0e:	f040 849d 	bne.w	810644c <__ieee754_pow+0x9f4>
 8105b12:	f001 0101 	and.w	r1, r1, #1
 8105b16:	f1c1 0302 	rsb	r3, r1, #2
 8105b1a:	9304      	str	r3, [sp, #16]
 8105b1c:	b182      	cbz	r2, 8105b40 <__ieee754_pow+0xe8>
 8105b1e:	e05f      	b.n	8105be0 <__ieee754_pow+0x188>
 8105b20:	2a00      	cmp	r2, #0
 8105b22:	d15b      	bne.n	8105bdc <__ieee754_pow+0x184>
 8105b24:	f1c3 0314 	rsb	r3, r3, #20
 8105b28:	fa48 f103 	asr.w	r1, r8, r3
 8105b2c:	fa01 f303 	lsl.w	r3, r1, r3
 8105b30:	4543      	cmp	r3, r8
 8105b32:	f040 8488 	bne.w	8106446 <__ieee754_pow+0x9ee>
 8105b36:	f001 0101 	and.w	r1, r1, #1
 8105b3a:	f1c1 0302 	rsb	r3, r1, #2
 8105b3e:	9304      	str	r3, [sp, #16]
 8105b40:	4b5c      	ldr	r3, [pc, #368]	; (8105cb4 <__ieee754_pow+0x25c>)
 8105b42:	4598      	cmp	r8, r3
 8105b44:	d132      	bne.n	8105bac <__ieee754_pow+0x154>
 8105b46:	f1b9 0f00 	cmp.w	r9, #0
 8105b4a:	f280 8478 	bge.w	810643e <__ieee754_pow+0x9e6>
 8105b4e:	4959      	ldr	r1, [pc, #356]	; (8105cb4 <__ieee754_pow+0x25c>)
 8105b50:	4632      	mov	r2, r6
 8105b52:	463b      	mov	r3, r7
 8105b54:	2000      	movs	r0, #0
 8105b56:	f7fa fea5 	bl	81008a4 <__aeabi_ddiv>
 8105b5a:	e79c      	b.n	8105a96 <__ieee754_pow+0x3e>
 8105b5c:	2300      	movs	r3, #0
 8105b5e:	9304      	str	r3, [sp, #16]
 8105b60:	2a00      	cmp	r2, #0
 8105b62:	d13d      	bne.n	8105be0 <__ieee754_pow+0x188>
 8105b64:	4b51      	ldr	r3, [pc, #324]	; (8105cac <__ieee754_pow+0x254>)
 8105b66:	4598      	cmp	r8, r3
 8105b68:	d1ea      	bne.n	8105b40 <__ieee754_pow+0xe8>
 8105b6a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8105b6e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8105b72:	ea53 030a 	orrs.w	r3, r3, sl
 8105b76:	f000 845a 	beq.w	810642e <__ieee754_pow+0x9d6>
 8105b7a:	4b4f      	ldr	r3, [pc, #316]	; (8105cb8 <__ieee754_pow+0x260>)
 8105b7c:	429c      	cmp	r4, r3
 8105b7e:	dd08      	ble.n	8105b92 <__ieee754_pow+0x13a>
 8105b80:	f1b9 0f00 	cmp.w	r9, #0
 8105b84:	f2c0 8457 	blt.w	8106436 <__ieee754_pow+0x9de>
 8105b88:	e9dd 0100 	ldrd	r0, r1, [sp]
 8105b8c:	e783      	b.n	8105a96 <__ieee754_pow+0x3e>
 8105b8e:	2302      	movs	r3, #2
 8105b90:	e7e5      	b.n	8105b5e <__ieee754_pow+0x106>
 8105b92:	f1b9 0f00 	cmp.w	r9, #0
 8105b96:	f04f 0000 	mov.w	r0, #0
 8105b9a:	f04f 0100 	mov.w	r1, #0
 8105b9e:	f6bf af7a 	bge.w	8105a96 <__ieee754_pow+0x3e>
 8105ba2:	e9dd 0300 	ldrd	r0, r3, [sp]
 8105ba6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8105baa:	e774      	b.n	8105a96 <__ieee754_pow+0x3e>
 8105bac:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8105bb0:	d106      	bne.n	8105bc0 <__ieee754_pow+0x168>
 8105bb2:	4632      	mov	r2, r6
 8105bb4:	463b      	mov	r3, r7
 8105bb6:	4630      	mov	r0, r6
 8105bb8:	4639      	mov	r1, r7
 8105bba:	f7fa fd49 	bl	8100650 <__aeabi_dmul>
 8105bbe:	e76a      	b.n	8105a96 <__ieee754_pow+0x3e>
 8105bc0:	4b3e      	ldr	r3, [pc, #248]	; (8105cbc <__ieee754_pow+0x264>)
 8105bc2:	4599      	cmp	r9, r3
 8105bc4:	d10c      	bne.n	8105be0 <__ieee754_pow+0x188>
 8105bc6:	2d00      	cmp	r5, #0
 8105bc8:	db0a      	blt.n	8105be0 <__ieee754_pow+0x188>
 8105bca:	ec47 6b10 	vmov	d0, r6, r7
 8105bce:	b009      	add	sp, #36	; 0x24
 8105bd0:	ecbd 8b06 	vpop	{d8-d10}
 8105bd4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8105bd8:	f000 bc6c 	b.w	81064b4 <__ieee754_sqrt>
 8105bdc:	2300      	movs	r3, #0
 8105bde:	9304      	str	r3, [sp, #16]
 8105be0:	ec47 6b10 	vmov	d0, r6, r7
 8105be4:	f000 fd48 	bl	8106678 <fabs>
 8105be8:	ec51 0b10 	vmov	r0, r1, d0
 8105bec:	f1ba 0f00 	cmp.w	sl, #0
 8105bf0:	d129      	bne.n	8105c46 <__ieee754_pow+0x1ee>
 8105bf2:	b124      	cbz	r4, 8105bfe <__ieee754_pow+0x1a6>
 8105bf4:	4b2f      	ldr	r3, [pc, #188]	; (8105cb4 <__ieee754_pow+0x25c>)
 8105bf6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8105bfa:	429a      	cmp	r2, r3
 8105bfc:	d123      	bne.n	8105c46 <__ieee754_pow+0x1ee>
 8105bfe:	f1b9 0f00 	cmp.w	r9, #0
 8105c02:	da05      	bge.n	8105c10 <__ieee754_pow+0x1b8>
 8105c04:	4602      	mov	r2, r0
 8105c06:	460b      	mov	r3, r1
 8105c08:	2000      	movs	r0, #0
 8105c0a:	492a      	ldr	r1, [pc, #168]	; (8105cb4 <__ieee754_pow+0x25c>)
 8105c0c:	f7fa fe4a 	bl	81008a4 <__aeabi_ddiv>
 8105c10:	2d00      	cmp	r5, #0
 8105c12:	f6bf af40 	bge.w	8105a96 <__ieee754_pow+0x3e>
 8105c16:	9b04      	ldr	r3, [sp, #16]
 8105c18:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8105c1c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8105c20:	4323      	orrs	r3, r4
 8105c22:	d108      	bne.n	8105c36 <__ieee754_pow+0x1de>
 8105c24:	4602      	mov	r2, r0
 8105c26:	460b      	mov	r3, r1
 8105c28:	4610      	mov	r0, r2
 8105c2a:	4619      	mov	r1, r3
 8105c2c:	f7fa fb58 	bl	81002e0 <__aeabi_dsub>
 8105c30:	4602      	mov	r2, r0
 8105c32:	460b      	mov	r3, r1
 8105c34:	e78f      	b.n	8105b56 <__ieee754_pow+0xfe>
 8105c36:	9b04      	ldr	r3, [sp, #16]
 8105c38:	2b01      	cmp	r3, #1
 8105c3a:	f47f af2c 	bne.w	8105a96 <__ieee754_pow+0x3e>
 8105c3e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8105c42:	4619      	mov	r1, r3
 8105c44:	e727      	b.n	8105a96 <__ieee754_pow+0x3e>
 8105c46:	0feb      	lsrs	r3, r5, #31
 8105c48:	3b01      	subs	r3, #1
 8105c4a:	9306      	str	r3, [sp, #24]
 8105c4c:	9a06      	ldr	r2, [sp, #24]
 8105c4e:	9b04      	ldr	r3, [sp, #16]
 8105c50:	4313      	orrs	r3, r2
 8105c52:	d102      	bne.n	8105c5a <__ieee754_pow+0x202>
 8105c54:	4632      	mov	r2, r6
 8105c56:	463b      	mov	r3, r7
 8105c58:	e7e6      	b.n	8105c28 <__ieee754_pow+0x1d0>
 8105c5a:	4b19      	ldr	r3, [pc, #100]	; (8105cc0 <__ieee754_pow+0x268>)
 8105c5c:	4598      	cmp	r8, r3
 8105c5e:	f340 80fb 	ble.w	8105e58 <__ieee754_pow+0x400>
 8105c62:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8105c66:	4598      	cmp	r8, r3
 8105c68:	4b13      	ldr	r3, [pc, #76]	; (8105cb8 <__ieee754_pow+0x260>)
 8105c6a:	dd0c      	ble.n	8105c86 <__ieee754_pow+0x22e>
 8105c6c:	429c      	cmp	r4, r3
 8105c6e:	dc0f      	bgt.n	8105c90 <__ieee754_pow+0x238>
 8105c70:	f1b9 0f00 	cmp.w	r9, #0
 8105c74:	da0f      	bge.n	8105c96 <__ieee754_pow+0x23e>
 8105c76:	2000      	movs	r0, #0
 8105c78:	b009      	add	sp, #36	; 0x24
 8105c7a:	ecbd 8b06 	vpop	{d8-d10}
 8105c7e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8105c82:	f000 bcf0 	b.w	8106666 <__math_oflow>
 8105c86:	429c      	cmp	r4, r3
 8105c88:	dbf2      	blt.n	8105c70 <__ieee754_pow+0x218>
 8105c8a:	4b0a      	ldr	r3, [pc, #40]	; (8105cb4 <__ieee754_pow+0x25c>)
 8105c8c:	429c      	cmp	r4, r3
 8105c8e:	dd19      	ble.n	8105cc4 <__ieee754_pow+0x26c>
 8105c90:	f1b9 0f00 	cmp.w	r9, #0
 8105c94:	dcef      	bgt.n	8105c76 <__ieee754_pow+0x21e>
 8105c96:	2000      	movs	r0, #0
 8105c98:	b009      	add	sp, #36	; 0x24
 8105c9a:	ecbd 8b06 	vpop	{d8-d10}
 8105c9e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8105ca2:	f000 bcd7 	b.w	8106654 <__math_uflow>
 8105ca6:	bf00      	nop
 8105ca8:	fff00000 	.word	0xfff00000
 8105cac:	7ff00000 	.word	0x7ff00000
 8105cb0:	433fffff 	.word	0x433fffff
 8105cb4:	3ff00000 	.word	0x3ff00000
 8105cb8:	3fefffff 	.word	0x3fefffff
 8105cbc:	3fe00000 	.word	0x3fe00000
 8105cc0:	41e00000 	.word	0x41e00000
 8105cc4:	4b60      	ldr	r3, [pc, #384]	; (8105e48 <__ieee754_pow+0x3f0>)
 8105cc6:	2200      	movs	r2, #0
 8105cc8:	f7fa fb0a 	bl	81002e0 <__aeabi_dsub>
 8105ccc:	a354      	add	r3, pc, #336	; (adr r3, 8105e20 <__ieee754_pow+0x3c8>)
 8105cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105cd2:	4604      	mov	r4, r0
 8105cd4:	460d      	mov	r5, r1
 8105cd6:	f7fa fcbb 	bl	8100650 <__aeabi_dmul>
 8105cda:	a353      	add	r3, pc, #332	; (adr r3, 8105e28 <__ieee754_pow+0x3d0>)
 8105cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105ce0:	4606      	mov	r6, r0
 8105ce2:	460f      	mov	r7, r1
 8105ce4:	4620      	mov	r0, r4
 8105ce6:	4629      	mov	r1, r5
 8105ce8:	f7fa fcb2 	bl	8100650 <__aeabi_dmul>
 8105cec:	4b57      	ldr	r3, [pc, #348]	; (8105e4c <__ieee754_pow+0x3f4>)
 8105cee:	4682      	mov	sl, r0
 8105cf0:	468b      	mov	fp, r1
 8105cf2:	2200      	movs	r2, #0
 8105cf4:	4620      	mov	r0, r4
 8105cf6:	4629      	mov	r1, r5
 8105cf8:	f7fa fcaa 	bl	8100650 <__aeabi_dmul>
 8105cfc:	4602      	mov	r2, r0
 8105cfe:	460b      	mov	r3, r1
 8105d00:	a14b      	add	r1, pc, #300	; (adr r1, 8105e30 <__ieee754_pow+0x3d8>)
 8105d02:	e9d1 0100 	ldrd	r0, r1, [r1]
 8105d06:	f7fa faeb 	bl	81002e0 <__aeabi_dsub>
 8105d0a:	4622      	mov	r2, r4
 8105d0c:	462b      	mov	r3, r5
 8105d0e:	f7fa fc9f 	bl	8100650 <__aeabi_dmul>
 8105d12:	4602      	mov	r2, r0
 8105d14:	460b      	mov	r3, r1
 8105d16:	2000      	movs	r0, #0
 8105d18:	494d      	ldr	r1, [pc, #308]	; (8105e50 <__ieee754_pow+0x3f8>)
 8105d1a:	f7fa fae1 	bl	81002e0 <__aeabi_dsub>
 8105d1e:	4622      	mov	r2, r4
 8105d20:	4680      	mov	r8, r0
 8105d22:	4689      	mov	r9, r1
 8105d24:	462b      	mov	r3, r5
 8105d26:	4620      	mov	r0, r4
 8105d28:	4629      	mov	r1, r5
 8105d2a:	f7fa fc91 	bl	8100650 <__aeabi_dmul>
 8105d2e:	4602      	mov	r2, r0
 8105d30:	460b      	mov	r3, r1
 8105d32:	4640      	mov	r0, r8
 8105d34:	4649      	mov	r1, r9
 8105d36:	f7fa fc8b 	bl	8100650 <__aeabi_dmul>
 8105d3a:	a33f      	add	r3, pc, #252	; (adr r3, 8105e38 <__ieee754_pow+0x3e0>)
 8105d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105d40:	f7fa fc86 	bl	8100650 <__aeabi_dmul>
 8105d44:	4602      	mov	r2, r0
 8105d46:	460b      	mov	r3, r1
 8105d48:	4650      	mov	r0, sl
 8105d4a:	4659      	mov	r1, fp
 8105d4c:	f7fa fac8 	bl	81002e0 <__aeabi_dsub>
 8105d50:	4602      	mov	r2, r0
 8105d52:	460b      	mov	r3, r1
 8105d54:	4680      	mov	r8, r0
 8105d56:	4689      	mov	r9, r1
 8105d58:	4630      	mov	r0, r6
 8105d5a:	4639      	mov	r1, r7
 8105d5c:	f7fa fac2 	bl	81002e4 <__adddf3>
 8105d60:	2000      	movs	r0, #0
 8105d62:	4632      	mov	r2, r6
 8105d64:	463b      	mov	r3, r7
 8105d66:	4604      	mov	r4, r0
 8105d68:	460d      	mov	r5, r1
 8105d6a:	f7fa fab9 	bl	81002e0 <__aeabi_dsub>
 8105d6e:	4602      	mov	r2, r0
 8105d70:	460b      	mov	r3, r1
 8105d72:	4640      	mov	r0, r8
 8105d74:	4649      	mov	r1, r9
 8105d76:	f7fa fab3 	bl	81002e0 <__aeabi_dsub>
 8105d7a:	9b04      	ldr	r3, [sp, #16]
 8105d7c:	9a06      	ldr	r2, [sp, #24]
 8105d7e:	3b01      	subs	r3, #1
 8105d80:	4313      	orrs	r3, r2
 8105d82:	4682      	mov	sl, r0
 8105d84:	468b      	mov	fp, r1
 8105d86:	f040 81e7 	bne.w	8106158 <__ieee754_pow+0x700>
 8105d8a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8105e40 <__ieee754_pow+0x3e8>
 8105d8e:	eeb0 8a47 	vmov.f32	s16, s14
 8105d92:	eef0 8a67 	vmov.f32	s17, s15
 8105d96:	e9dd 6700 	ldrd	r6, r7, [sp]
 8105d9a:	2600      	movs	r6, #0
 8105d9c:	4632      	mov	r2, r6
 8105d9e:	463b      	mov	r3, r7
 8105da0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8105da4:	f7fa fa9c 	bl	81002e0 <__aeabi_dsub>
 8105da8:	4622      	mov	r2, r4
 8105daa:	462b      	mov	r3, r5
 8105dac:	f7fa fc50 	bl	8100650 <__aeabi_dmul>
 8105db0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8105db4:	4680      	mov	r8, r0
 8105db6:	4689      	mov	r9, r1
 8105db8:	4650      	mov	r0, sl
 8105dba:	4659      	mov	r1, fp
 8105dbc:	f7fa fc48 	bl	8100650 <__aeabi_dmul>
 8105dc0:	4602      	mov	r2, r0
 8105dc2:	460b      	mov	r3, r1
 8105dc4:	4640      	mov	r0, r8
 8105dc6:	4649      	mov	r1, r9
 8105dc8:	f7fa fa8c 	bl	81002e4 <__adddf3>
 8105dcc:	4632      	mov	r2, r6
 8105dce:	463b      	mov	r3, r7
 8105dd0:	4680      	mov	r8, r0
 8105dd2:	4689      	mov	r9, r1
 8105dd4:	4620      	mov	r0, r4
 8105dd6:	4629      	mov	r1, r5
 8105dd8:	f7fa fc3a 	bl	8100650 <__aeabi_dmul>
 8105ddc:	460b      	mov	r3, r1
 8105dde:	4604      	mov	r4, r0
 8105de0:	460d      	mov	r5, r1
 8105de2:	4602      	mov	r2, r0
 8105de4:	4649      	mov	r1, r9
 8105de6:	4640      	mov	r0, r8
 8105de8:	f7fa fa7c 	bl	81002e4 <__adddf3>
 8105dec:	4b19      	ldr	r3, [pc, #100]	; (8105e54 <__ieee754_pow+0x3fc>)
 8105dee:	4299      	cmp	r1, r3
 8105df0:	ec45 4b19 	vmov	d9, r4, r5
 8105df4:	4606      	mov	r6, r0
 8105df6:	460f      	mov	r7, r1
 8105df8:	468b      	mov	fp, r1
 8105dfa:	f340 82f1 	ble.w	81063e0 <__ieee754_pow+0x988>
 8105dfe:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8105e02:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8105e06:	4303      	orrs	r3, r0
 8105e08:	f000 81e4 	beq.w	81061d4 <__ieee754_pow+0x77c>
 8105e0c:	ec51 0b18 	vmov	r0, r1, d8
 8105e10:	2200      	movs	r2, #0
 8105e12:	2300      	movs	r3, #0
 8105e14:	f7fa fe8e 	bl	8100b34 <__aeabi_dcmplt>
 8105e18:	3800      	subs	r0, #0
 8105e1a:	bf18      	it	ne
 8105e1c:	2001      	movne	r0, #1
 8105e1e:	e72b      	b.n	8105c78 <__ieee754_pow+0x220>
 8105e20:	60000000 	.word	0x60000000
 8105e24:	3ff71547 	.word	0x3ff71547
 8105e28:	f85ddf44 	.word	0xf85ddf44
 8105e2c:	3e54ae0b 	.word	0x3e54ae0b
 8105e30:	55555555 	.word	0x55555555
 8105e34:	3fd55555 	.word	0x3fd55555
 8105e38:	652b82fe 	.word	0x652b82fe
 8105e3c:	3ff71547 	.word	0x3ff71547
 8105e40:	00000000 	.word	0x00000000
 8105e44:	bff00000 	.word	0xbff00000
 8105e48:	3ff00000 	.word	0x3ff00000
 8105e4c:	3fd00000 	.word	0x3fd00000
 8105e50:	3fe00000 	.word	0x3fe00000
 8105e54:	408fffff 	.word	0x408fffff
 8105e58:	4bd5      	ldr	r3, [pc, #852]	; (81061b0 <__ieee754_pow+0x758>)
 8105e5a:	402b      	ands	r3, r5
 8105e5c:	2200      	movs	r2, #0
 8105e5e:	b92b      	cbnz	r3, 8105e6c <__ieee754_pow+0x414>
 8105e60:	4bd4      	ldr	r3, [pc, #848]	; (81061b4 <__ieee754_pow+0x75c>)
 8105e62:	f7fa fbf5 	bl	8100650 <__aeabi_dmul>
 8105e66:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8105e6a:	460c      	mov	r4, r1
 8105e6c:	1523      	asrs	r3, r4, #20
 8105e6e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8105e72:	4413      	add	r3, r2
 8105e74:	9305      	str	r3, [sp, #20]
 8105e76:	4bd0      	ldr	r3, [pc, #832]	; (81061b8 <__ieee754_pow+0x760>)
 8105e78:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8105e7c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8105e80:	429c      	cmp	r4, r3
 8105e82:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8105e86:	dd08      	ble.n	8105e9a <__ieee754_pow+0x442>
 8105e88:	4bcc      	ldr	r3, [pc, #816]	; (81061bc <__ieee754_pow+0x764>)
 8105e8a:	429c      	cmp	r4, r3
 8105e8c:	f340 8162 	ble.w	8106154 <__ieee754_pow+0x6fc>
 8105e90:	9b05      	ldr	r3, [sp, #20]
 8105e92:	3301      	adds	r3, #1
 8105e94:	9305      	str	r3, [sp, #20]
 8105e96:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8105e9a:	2400      	movs	r4, #0
 8105e9c:	00e3      	lsls	r3, r4, #3
 8105e9e:	9307      	str	r3, [sp, #28]
 8105ea0:	4bc7      	ldr	r3, [pc, #796]	; (81061c0 <__ieee754_pow+0x768>)
 8105ea2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8105ea6:	ed93 7b00 	vldr	d7, [r3]
 8105eaa:	4629      	mov	r1, r5
 8105eac:	ec53 2b17 	vmov	r2, r3, d7
 8105eb0:	eeb0 9a47 	vmov.f32	s18, s14
 8105eb4:	eef0 9a67 	vmov.f32	s19, s15
 8105eb8:	4682      	mov	sl, r0
 8105eba:	f7fa fa11 	bl	81002e0 <__aeabi_dsub>
 8105ebe:	4652      	mov	r2, sl
 8105ec0:	4606      	mov	r6, r0
 8105ec2:	460f      	mov	r7, r1
 8105ec4:	462b      	mov	r3, r5
 8105ec6:	ec51 0b19 	vmov	r0, r1, d9
 8105eca:	f7fa fa0b 	bl	81002e4 <__adddf3>
 8105ece:	4602      	mov	r2, r0
 8105ed0:	460b      	mov	r3, r1
 8105ed2:	2000      	movs	r0, #0
 8105ed4:	49bb      	ldr	r1, [pc, #748]	; (81061c4 <__ieee754_pow+0x76c>)
 8105ed6:	f7fa fce5 	bl	81008a4 <__aeabi_ddiv>
 8105eda:	ec41 0b1a 	vmov	d10, r0, r1
 8105ede:	4602      	mov	r2, r0
 8105ee0:	460b      	mov	r3, r1
 8105ee2:	4630      	mov	r0, r6
 8105ee4:	4639      	mov	r1, r7
 8105ee6:	f7fa fbb3 	bl	8100650 <__aeabi_dmul>
 8105eea:	2300      	movs	r3, #0
 8105eec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8105ef0:	9302      	str	r3, [sp, #8]
 8105ef2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8105ef6:	46ab      	mov	fp, r5
 8105ef8:	106d      	asrs	r5, r5, #1
 8105efa:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8105efe:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8105f02:	ec41 0b18 	vmov	d8, r0, r1
 8105f06:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8105f0a:	2200      	movs	r2, #0
 8105f0c:	4640      	mov	r0, r8
 8105f0e:	4649      	mov	r1, r9
 8105f10:	4614      	mov	r4, r2
 8105f12:	461d      	mov	r5, r3
 8105f14:	f7fa fb9c 	bl	8100650 <__aeabi_dmul>
 8105f18:	4602      	mov	r2, r0
 8105f1a:	460b      	mov	r3, r1
 8105f1c:	4630      	mov	r0, r6
 8105f1e:	4639      	mov	r1, r7
 8105f20:	f7fa f9de 	bl	81002e0 <__aeabi_dsub>
 8105f24:	ec53 2b19 	vmov	r2, r3, d9
 8105f28:	4606      	mov	r6, r0
 8105f2a:	460f      	mov	r7, r1
 8105f2c:	4620      	mov	r0, r4
 8105f2e:	4629      	mov	r1, r5
 8105f30:	f7fa f9d6 	bl	81002e0 <__aeabi_dsub>
 8105f34:	4602      	mov	r2, r0
 8105f36:	460b      	mov	r3, r1
 8105f38:	4650      	mov	r0, sl
 8105f3a:	4659      	mov	r1, fp
 8105f3c:	f7fa f9d0 	bl	81002e0 <__aeabi_dsub>
 8105f40:	4642      	mov	r2, r8
 8105f42:	464b      	mov	r3, r9
 8105f44:	f7fa fb84 	bl	8100650 <__aeabi_dmul>
 8105f48:	4602      	mov	r2, r0
 8105f4a:	460b      	mov	r3, r1
 8105f4c:	4630      	mov	r0, r6
 8105f4e:	4639      	mov	r1, r7
 8105f50:	f7fa f9c6 	bl	81002e0 <__aeabi_dsub>
 8105f54:	ec53 2b1a 	vmov	r2, r3, d10
 8105f58:	f7fa fb7a 	bl	8100650 <__aeabi_dmul>
 8105f5c:	ec53 2b18 	vmov	r2, r3, d8
 8105f60:	ec41 0b19 	vmov	d9, r0, r1
 8105f64:	ec51 0b18 	vmov	r0, r1, d8
 8105f68:	f7fa fb72 	bl	8100650 <__aeabi_dmul>
 8105f6c:	a37c      	add	r3, pc, #496	; (adr r3, 8106160 <__ieee754_pow+0x708>)
 8105f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105f72:	4604      	mov	r4, r0
 8105f74:	460d      	mov	r5, r1
 8105f76:	f7fa fb6b 	bl	8100650 <__aeabi_dmul>
 8105f7a:	a37b      	add	r3, pc, #492	; (adr r3, 8106168 <__ieee754_pow+0x710>)
 8105f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105f80:	f7fa f9b0 	bl	81002e4 <__adddf3>
 8105f84:	4622      	mov	r2, r4
 8105f86:	462b      	mov	r3, r5
 8105f88:	f7fa fb62 	bl	8100650 <__aeabi_dmul>
 8105f8c:	a378      	add	r3, pc, #480	; (adr r3, 8106170 <__ieee754_pow+0x718>)
 8105f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105f92:	f7fa f9a7 	bl	81002e4 <__adddf3>
 8105f96:	4622      	mov	r2, r4
 8105f98:	462b      	mov	r3, r5
 8105f9a:	f7fa fb59 	bl	8100650 <__aeabi_dmul>
 8105f9e:	a376      	add	r3, pc, #472	; (adr r3, 8106178 <__ieee754_pow+0x720>)
 8105fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105fa4:	f7fa f99e 	bl	81002e4 <__adddf3>
 8105fa8:	4622      	mov	r2, r4
 8105faa:	462b      	mov	r3, r5
 8105fac:	f7fa fb50 	bl	8100650 <__aeabi_dmul>
 8105fb0:	a373      	add	r3, pc, #460	; (adr r3, 8106180 <__ieee754_pow+0x728>)
 8105fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105fb6:	f7fa f995 	bl	81002e4 <__adddf3>
 8105fba:	4622      	mov	r2, r4
 8105fbc:	462b      	mov	r3, r5
 8105fbe:	f7fa fb47 	bl	8100650 <__aeabi_dmul>
 8105fc2:	a371      	add	r3, pc, #452	; (adr r3, 8106188 <__ieee754_pow+0x730>)
 8105fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105fc8:	f7fa f98c 	bl	81002e4 <__adddf3>
 8105fcc:	4622      	mov	r2, r4
 8105fce:	4606      	mov	r6, r0
 8105fd0:	460f      	mov	r7, r1
 8105fd2:	462b      	mov	r3, r5
 8105fd4:	4620      	mov	r0, r4
 8105fd6:	4629      	mov	r1, r5
 8105fd8:	f7fa fb3a 	bl	8100650 <__aeabi_dmul>
 8105fdc:	4602      	mov	r2, r0
 8105fde:	460b      	mov	r3, r1
 8105fe0:	4630      	mov	r0, r6
 8105fe2:	4639      	mov	r1, r7
 8105fe4:	f7fa fb34 	bl	8100650 <__aeabi_dmul>
 8105fe8:	4642      	mov	r2, r8
 8105fea:	4604      	mov	r4, r0
 8105fec:	460d      	mov	r5, r1
 8105fee:	464b      	mov	r3, r9
 8105ff0:	ec51 0b18 	vmov	r0, r1, d8
 8105ff4:	f7fa f976 	bl	81002e4 <__adddf3>
 8105ff8:	ec53 2b19 	vmov	r2, r3, d9
 8105ffc:	f7fa fb28 	bl	8100650 <__aeabi_dmul>
 8106000:	4622      	mov	r2, r4
 8106002:	462b      	mov	r3, r5
 8106004:	f7fa f96e 	bl	81002e4 <__adddf3>
 8106008:	4642      	mov	r2, r8
 810600a:	4682      	mov	sl, r0
 810600c:	468b      	mov	fp, r1
 810600e:	464b      	mov	r3, r9
 8106010:	4640      	mov	r0, r8
 8106012:	4649      	mov	r1, r9
 8106014:	f7fa fb1c 	bl	8100650 <__aeabi_dmul>
 8106018:	4b6b      	ldr	r3, [pc, #428]	; (81061c8 <__ieee754_pow+0x770>)
 810601a:	2200      	movs	r2, #0
 810601c:	4606      	mov	r6, r0
 810601e:	460f      	mov	r7, r1
 8106020:	f7fa f960 	bl	81002e4 <__adddf3>
 8106024:	4652      	mov	r2, sl
 8106026:	465b      	mov	r3, fp
 8106028:	f7fa f95c 	bl	81002e4 <__adddf3>
 810602c:	2000      	movs	r0, #0
 810602e:	4604      	mov	r4, r0
 8106030:	460d      	mov	r5, r1
 8106032:	4602      	mov	r2, r0
 8106034:	460b      	mov	r3, r1
 8106036:	4640      	mov	r0, r8
 8106038:	4649      	mov	r1, r9
 810603a:	f7fa fb09 	bl	8100650 <__aeabi_dmul>
 810603e:	4b62      	ldr	r3, [pc, #392]	; (81061c8 <__ieee754_pow+0x770>)
 8106040:	4680      	mov	r8, r0
 8106042:	4689      	mov	r9, r1
 8106044:	2200      	movs	r2, #0
 8106046:	4620      	mov	r0, r4
 8106048:	4629      	mov	r1, r5
 810604a:	f7fa f949 	bl	81002e0 <__aeabi_dsub>
 810604e:	4632      	mov	r2, r6
 8106050:	463b      	mov	r3, r7
 8106052:	f7fa f945 	bl	81002e0 <__aeabi_dsub>
 8106056:	4602      	mov	r2, r0
 8106058:	460b      	mov	r3, r1
 810605a:	4650      	mov	r0, sl
 810605c:	4659      	mov	r1, fp
 810605e:	f7fa f93f 	bl	81002e0 <__aeabi_dsub>
 8106062:	ec53 2b18 	vmov	r2, r3, d8
 8106066:	f7fa faf3 	bl	8100650 <__aeabi_dmul>
 810606a:	4622      	mov	r2, r4
 810606c:	4606      	mov	r6, r0
 810606e:	460f      	mov	r7, r1
 8106070:	462b      	mov	r3, r5
 8106072:	ec51 0b19 	vmov	r0, r1, d9
 8106076:	f7fa faeb 	bl	8100650 <__aeabi_dmul>
 810607a:	4602      	mov	r2, r0
 810607c:	460b      	mov	r3, r1
 810607e:	4630      	mov	r0, r6
 8106080:	4639      	mov	r1, r7
 8106082:	f7fa f92f 	bl	81002e4 <__adddf3>
 8106086:	4606      	mov	r6, r0
 8106088:	460f      	mov	r7, r1
 810608a:	4602      	mov	r2, r0
 810608c:	460b      	mov	r3, r1
 810608e:	4640      	mov	r0, r8
 8106090:	4649      	mov	r1, r9
 8106092:	f7fa f927 	bl	81002e4 <__adddf3>
 8106096:	a33e      	add	r3, pc, #248	; (adr r3, 8106190 <__ieee754_pow+0x738>)
 8106098:	e9d3 2300 	ldrd	r2, r3, [r3]
 810609c:	2000      	movs	r0, #0
 810609e:	4604      	mov	r4, r0
 81060a0:	460d      	mov	r5, r1
 81060a2:	f7fa fad5 	bl	8100650 <__aeabi_dmul>
 81060a6:	4642      	mov	r2, r8
 81060a8:	ec41 0b18 	vmov	d8, r0, r1
 81060ac:	464b      	mov	r3, r9
 81060ae:	4620      	mov	r0, r4
 81060b0:	4629      	mov	r1, r5
 81060b2:	f7fa f915 	bl	81002e0 <__aeabi_dsub>
 81060b6:	4602      	mov	r2, r0
 81060b8:	460b      	mov	r3, r1
 81060ba:	4630      	mov	r0, r6
 81060bc:	4639      	mov	r1, r7
 81060be:	f7fa f90f 	bl	81002e0 <__aeabi_dsub>
 81060c2:	a335      	add	r3, pc, #212	; (adr r3, 8106198 <__ieee754_pow+0x740>)
 81060c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81060c8:	f7fa fac2 	bl	8100650 <__aeabi_dmul>
 81060cc:	a334      	add	r3, pc, #208	; (adr r3, 81061a0 <__ieee754_pow+0x748>)
 81060ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 81060d2:	4606      	mov	r6, r0
 81060d4:	460f      	mov	r7, r1
 81060d6:	4620      	mov	r0, r4
 81060d8:	4629      	mov	r1, r5
 81060da:	f7fa fab9 	bl	8100650 <__aeabi_dmul>
 81060de:	4602      	mov	r2, r0
 81060e0:	460b      	mov	r3, r1
 81060e2:	4630      	mov	r0, r6
 81060e4:	4639      	mov	r1, r7
 81060e6:	f7fa f8fd 	bl	81002e4 <__adddf3>
 81060ea:	9a07      	ldr	r2, [sp, #28]
 81060ec:	4b37      	ldr	r3, [pc, #220]	; (81061cc <__ieee754_pow+0x774>)
 81060ee:	4413      	add	r3, r2
 81060f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81060f4:	f7fa f8f6 	bl	81002e4 <__adddf3>
 81060f8:	4682      	mov	sl, r0
 81060fa:	9805      	ldr	r0, [sp, #20]
 81060fc:	468b      	mov	fp, r1
 81060fe:	f7fa fa3d 	bl	810057c <__aeabi_i2d>
 8106102:	9a07      	ldr	r2, [sp, #28]
 8106104:	4b32      	ldr	r3, [pc, #200]	; (81061d0 <__ieee754_pow+0x778>)
 8106106:	4413      	add	r3, r2
 8106108:	e9d3 8900 	ldrd	r8, r9, [r3]
 810610c:	4606      	mov	r6, r0
 810610e:	460f      	mov	r7, r1
 8106110:	4652      	mov	r2, sl
 8106112:	465b      	mov	r3, fp
 8106114:	ec51 0b18 	vmov	r0, r1, d8
 8106118:	f7fa f8e4 	bl	81002e4 <__adddf3>
 810611c:	4642      	mov	r2, r8
 810611e:	464b      	mov	r3, r9
 8106120:	f7fa f8e0 	bl	81002e4 <__adddf3>
 8106124:	4632      	mov	r2, r6
 8106126:	463b      	mov	r3, r7
 8106128:	f7fa f8dc 	bl	81002e4 <__adddf3>
 810612c:	2000      	movs	r0, #0
 810612e:	4632      	mov	r2, r6
 8106130:	463b      	mov	r3, r7
 8106132:	4604      	mov	r4, r0
 8106134:	460d      	mov	r5, r1
 8106136:	f7fa f8d3 	bl	81002e0 <__aeabi_dsub>
 810613a:	4642      	mov	r2, r8
 810613c:	464b      	mov	r3, r9
 810613e:	f7fa f8cf 	bl	81002e0 <__aeabi_dsub>
 8106142:	ec53 2b18 	vmov	r2, r3, d8
 8106146:	f7fa f8cb 	bl	81002e0 <__aeabi_dsub>
 810614a:	4602      	mov	r2, r0
 810614c:	460b      	mov	r3, r1
 810614e:	4650      	mov	r0, sl
 8106150:	4659      	mov	r1, fp
 8106152:	e610      	b.n	8105d76 <__ieee754_pow+0x31e>
 8106154:	2401      	movs	r4, #1
 8106156:	e6a1      	b.n	8105e9c <__ieee754_pow+0x444>
 8106158:	ed9f 7b13 	vldr	d7, [pc, #76]	; 81061a8 <__ieee754_pow+0x750>
 810615c:	e617      	b.n	8105d8e <__ieee754_pow+0x336>
 810615e:	bf00      	nop
 8106160:	4a454eef 	.word	0x4a454eef
 8106164:	3fca7e28 	.word	0x3fca7e28
 8106168:	93c9db65 	.word	0x93c9db65
 810616c:	3fcd864a 	.word	0x3fcd864a
 8106170:	a91d4101 	.word	0xa91d4101
 8106174:	3fd17460 	.word	0x3fd17460
 8106178:	518f264d 	.word	0x518f264d
 810617c:	3fd55555 	.word	0x3fd55555
 8106180:	db6fabff 	.word	0xdb6fabff
 8106184:	3fdb6db6 	.word	0x3fdb6db6
 8106188:	33333303 	.word	0x33333303
 810618c:	3fe33333 	.word	0x3fe33333
 8106190:	e0000000 	.word	0xe0000000
 8106194:	3feec709 	.word	0x3feec709
 8106198:	dc3a03fd 	.word	0xdc3a03fd
 810619c:	3feec709 	.word	0x3feec709
 81061a0:	145b01f5 	.word	0x145b01f5
 81061a4:	be3e2fe0 	.word	0xbe3e2fe0
 81061a8:	00000000 	.word	0x00000000
 81061ac:	3ff00000 	.word	0x3ff00000
 81061b0:	7ff00000 	.word	0x7ff00000
 81061b4:	43400000 	.word	0x43400000
 81061b8:	0003988e 	.word	0x0003988e
 81061bc:	000bb679 	.word	0x000bb679
 81061c0:	081067d8 	.word	0x081067d8
 81061c4:	3ff00000 	.word	0x3ff00000
 81061c8:	40080000 	.word	0x40080000
 81061cc:	081067f8 	.word	0x081067f8
 81061d0:	081067e8 	.word	0x081067e8
 81061d4:	a3b5      	add	r3, pc, #724	; (adr r3, 81064ac <__ieee754_pow+0xa54>)
 81061d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81061da:	4640      	mov	r0, r8
 81061dc:	4649      	mov	r1, r9
 81061de:	f7fa f881 	bl	81002e4 <__adddf3>
 81061e2:	4622      	mov	r2, r4
 81061e4:	ec41 0b1a 	vmov	d10, r0, r1
 81061e8:	462b      	mov	r3, r5
 81061ea:	4630      	mov	r0, r6
 81061ec:	4639      	mov	r1, r7
 81061ee:	f7fa f877 	bl	81002e0 <__aeabi_dsub>
 81061f2:	4602      	mov	r2, r0
 81061f4:	460b      	mov	r3, r1
 81061f6:	ec51 0b1a 	vmov	r0, r1, d10
 81061fa:	f7fa fcb9 	bl	8100b70 <__aeabi_dcmpgt>
 81061fe:	2800      	cmp	r0, #0
 8106200:	f47f ae04 	bne.w	8105e0c <__ieee754_pow+0x3b4>
 8106204:	4aa4      	ldr	r2, [pc, #656]	; (8106498 <__ieee754_pow+0xa40>)
 8106206:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 810620a:	4293      	cmp	r3, r2
 810620c:	f340 8108 	ble.w	8106420 <__ieee754_pow+0x9c8>
 8106210:	151b      	asrs	r3, r3, #20
 8106212:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8106216:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 810621a:	fa4a f303 	asr.w	r3, sl, r3
 810621e:	445b      	add	r3, fp
 8106220:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8106224:	4e9d      	ldr	r6, [pc, #628]	; (810649c <__ieee754_pow+0xa44>)
 8106226:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 810622a:	4116      	asrs	r6, r2
 810622c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8106230:	2000      	movs	r0, #0
 8106232:	ea23 0106 	bic.w	r1, r3, r6
 8106236:	f1c2 0214 	rsb	r2, r2, #20
 810623a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 810623e:	fa4a fa02 	asr.w	sl, sl, r2
 8106242:	f1bb 0f00 	cmp.w	fp, #0
 8106246:	4602      	mov	r2, r0
 8106248:	460b      	mov	r3, r1
 810624a:	4620      	mov	r0, r4
 810624c:	4629      	mov	r1, r5
 810624e:	bfb8      	it	lt
 8106250:	f1ca 0a00 	rsblt	sl, sl, #0
 8106254:	f7fa f844 	bl	81002e0 <__aeabi_dsub>
 8106258:	ec41 0b19 	vmov	d9, r0, r1
 810625c:	4642      	mov	r2, r8
 810625e:	464b      	mov	r3, r9
 8106260:	ec51 0b19 	vmov	r0, r1, d9
 8106264:	f7fa f83e 	bl	81002e4 <__adddf3>
 8106268:	a37b      	add	r3, pc, #492	; (adr r3, 8106458 <__ieee754_pow+0xa00>)
 810626a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810626e:	2000      	movs	r0, #0
 8106270:	4604      	mov	r4, r0
 8106272:	460d      	mov	r5, r1
 8106274:	f7fa f9ec 	bl	8100650 <__aeabi_dmul>
 8106278:	ec53 2b19 	vmov	r2, r3, d9
 810627c:	4606      	mov	r6, r0
 810627e:	460f      	mov	r7, r1
 8106280:	4620      	mov	r0, r4
 8106282:	4629      	mov	r1, r5
 8106284:	f7fa f82c 	bl	81002e0 <__aeabi_dsub>
 8106288:	4602      	mov	r2, r0
 810628a:	460b      	mov	r3, r1
 810628c:	4640      	mov	r0, r8
 810628e:	4649      	mov	r1, r9
 8106290:	f7fa f826 	bl	81002e0 <__aeabi_dsub>
 8106294:	a372      	add	r3, pc, #456	; (adr r3, 8106460 <__ieee754_pow+0xa08>)
 8106296:	e9d3 2300 	ldrd	r2, r3, [r3]
 810629a:	f7fa f9d9 	bl	8100650 <__aeabi_dmul>
 810629e:	a372      	add	r3, pc, #456	; (adr r3, 8106468 <__ieee754_pow+0xa10>)
 81062a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81062a4:	4680      	mov	r8, r0
 81062a6:	4689      	mov	r9, r1
 81062a8:	4620      	mov	r0, r4
 81062aa:	4629      	mov	r1, r5
 81062ac:	f7fa f9d0 	bl	8100650 <__aeabi_dmul>
 81062b0:	4602      	mov	r2, r0
 81062b2:	460b      	mov	r3, r1
 81062b4:	4640      	mov	r0, r8
 81062b6:	4649      	mov	r1, r9
 81062b8:	f7fa f814 	bl	81002e4 <__adddf3>
 81062bc:	4604      	mov	r4, r0
 81062be:	460d      	mov	r5, r1
 81062c0:	4602      	mov	r2, r0
 81062c2:	460b      	mov	r3, r1
 81062c4:	4630      	mov	r0, r6
 81062c6:	4639      	mov	r1, r7
 81062c8:	f7fa f80c 	bl	81002e4 <__adddf3>
 81062cc:	4632      	mov	r2, r6
 81062ce:	463b      	mov	r3, r7
 81062d0:	4680      	mov	r8, r0
 81062d2:	4689      	mov	r9, r1
 81062d4:	f7fa f804 	bl	81002e0 <__aeabi_dsub>
 81062d8:	4602      	mov	r2, r0
 81062da:	460b      	mov	r3, r1
 81062dc:	4620      	mov	r0, r4
 81062de:	4629      	mov	r1, r5
 81062e0:	f7f9 fffe 	bl	81002e0 <__aeabi_dsub>
 81062e4:	4642      	mov	r2, r8
 81062e6:	4606      	mov	r6, r0
 81062e8:	460f      	mov	r7, r1
 81062ea:	464b      	mov	r3, r9
 81062ec:	4640      	mov	r0, r8
 81062ee:	4649      	mov	r1, r9
 81062f0:	f7fa f9ae 	bl	8100650 <__aeabi_dmul>
 81062f4:	a35e      	add	r3, pc, #376	; (adr r3, 8106470 <__ieee754_pow+0xa18>)
 81062f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81062fa:	4604      	mov	r4, r0
 81062fc:	460d      	mov	r5, r1
 81062fe:	f7fa f9a7 	bl	8100650 <__aeabi_dmul>
 8106302:	a35d      	add	r3, pc, #372	; (adr r3, 8106478 <__ieee754_pow+0xa20>)
 8106304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106308:	f7f9 ffea 	bl	81002e0 <__aeabi_dsub>
 810630c:	4622      	mov	r2, r4
 810630e:	462b      	mov	r3, r5
 8106310:	f7fa f99e 	bl	8100650 <__aeabi_dmul>
 8106314:	a35a      	add	r3, pc, #360	; (adr r3, 8106480 <__ieee754_pow+0xa28>)
 8106316:	e9d3 2300 	ldrd	r2, r3, [r3]
 810631a:	f7f9 ffe3 	bl	81002e4 <__adddf3>
 810631e:	4622      	mov	r2, r4
 8106320:	462b      	mov	r3, r5
 8106322:	f7fa f995 	bl	8100650 <__aeabi_dmul>
 8106326:	a358      	add	r3, pc, #352	; (adr r3, 8106488 <__ieee754_pow+0xa30>)
 8106328:	e9d3 2300 	ldrd	r2, r3, [r3]
 810632c:	f7f9 ffd8 	bl	81002e0 <__aeabi_dsub>
 8106330:	4622      	mov	r2, r4
 8106332:	462b      	mov	r3, r5
 8106334:	f7fa f98c 	bl	8100650 <__aeabi_dmul>
 8106338:	a355      	add	r3, pc, #340	; (adr r3, 8106490 <__ieee754_pow+0xa38>)
 810633a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810633e:	f7f9 ffd1 	bl	81002e4 <__adddf3>
 8106342:	4622      	mov	r2, r4
 8106344:	462b      	mov	r3, r5
 8106346:	f7fa f983 	bl	8100650 <__aeabi_dmul>
 810634a:	4602      	mov	r2, r0
 810634c:	460b      	mov	r3, r1
 810634e:	4640      	mov	r0, r8
 8106350:	4649      	mov	r1, r9
 8106352:	f7f9 ffc5 	bl	81002e0 <__aeabi_dsub>
 8106356:	4604      	mov	r4, r0
 8106358:	460d      	mov	r5, r1
 810635a:	4602      	mov	r2, r0
 810635c:	460b      	mov	r3, r1
 810635e:	4640      	mov	r0, r8
 8106360:	4649      	mov	r1, r9
 8106362:	f7fa f975 	bl	8100650 <__aeabi_dmul>
 8106366:	2200      	movs	r2, #0
 8106368:	ec41 0b19 	vmov	d9, r0, r1
 810636c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8106370:	4620      	mov	r0, r4
 8106372:	4629      	mov	r1, r5
 8106374:	f7f9 ffb4 	bl	81002e0 <__aeabi_dsub>
 8106378:	4602      	mov	r2, r0
 810637a:	460b      	mov	r3, r1
 810637c:	ec51 0b19 	vmov	r0, r1, d9
 8106380:	f7fa fa90 	bl	81008a4 <__aeabi_ddiv>
 8106384:	4632      	mov	r2, r6
 8106386:	4604      	mov	r4, r0
 8106388:	460d      	mov	r5, r1
 810638a:	463b      	mov	r3, r7
 810638c:	4640      	mov	r0, r8
 810638e:	4649      	mov	r1, r9
 8106390:	f7fa f95e 	bl	8100650 <__aeabi_dmul>
 8106394:	4632      	mov	r2, r6
 8106396:	463b      	mov	r3, r7
 8106398:	f7f9 ffa4 	bl	81002e4 <__adddf3>
 810639c:	4602      	mov	r2, r0
 810639e:	460b      	mov	r3, r1
 81063a0:	4620      	mov	r0, r4
 81063a2:	4629      	mov	r1, r5
 81063a4:	f7f9 ff9c 	bl	81002e0 <__aeabi_dsub>
 81063a8:	4642      	mov	r2, r8
 81063aa:	464b      	mov	r3, r9
 81063ac:	f7f9 ff98 	bl	81002e0 <__aeabi_dsub>
 81063b0:	460b      	mov	r3, r1
 81063b2:	4602      	mov	r2, r0
 81063b4:	493a      	ldr	r1, [pc, #232]	; (81064a0 <__ieee754_pow+0xa48>)
 81063b6:	2000      	movs	r0, #0
 81063b8:	f7f9 ff92 	bl	81002e0 <__aeabi_dsub>
 81063bc:	ec41 0b10 	vmov	d0, r0, r1
 81063c0:	ee10 3a90 	vmov	r3, s1
 81063c4:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 81063c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 81063cc:	da2b      	bge.n	8106426 <__ieee754_pow+0x9ce>
 81063ce:	4650      	mov	r0, sl
 81063d0:	f000 f966 	bl	81066a0 <scalbn>
 81063d4:	ec51 0b10 	vmov	r0, r1, d0
 81063d8:	ec53 2b18 	vmov	r2, r3, d8
 81063dc:	f7ff bbed 	b.w	8105bba <__ieee754_pow+0x162>
 81063e0:	4b30      	ldr	r3, [pc, #192]	; (81064a4 <__ieee754_pow+0xa4c>)
 81063e2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 81063e6:	429e      	cmp	r6, r3
 81063e8:	f77f af0c 	ble.w	8106204 <__ieee754_pow+0x7ac>
 81063ec:	4b2e      	ldr	r3, [pc, #184]	; (81064a8 <__ieee754_pow+0xa50>)
 81063ee:	440b      	add	r3, r1
 81063f0:	4303      	orrs	r3, r0
 81063f2:	d009      	beq.n	8106408 <__ieee754_pow+0x9b0>
 81063f4:	ec51 0b18 	vmov	r0, r1, d8
 81063f8:	2200      	movs	r2, #0
 81063fa:	2300      	movs	r3, #0
 81063fc:	f7fa fb9a 	bl	8100b34 <__aeabi_dcmplt>
 8106400:	3800      	subs	r0, #0
 8106402:	bf18      	it	ne
 8106404:	2001      	movne	r0, #1
 8106406:	e447      	b.n	8105c98 <__ieee754_pow+0x240>
 8106408:	4622      	mov	r2, r4
 810640a:	462b      	mov	r3, r5
 810640c:	f7f9 ff68 	bl	81002e0 <__aeabi_dsub>
 8106410:	4642      	mov	r2, r8
 8106412:	464b      	mov	r3, r9
 8106414:	f7fa fba2 	bl	8100b5c <__aeabi_dcmpge>
 8106418:	2800      	cmp	r0, #0
 810641a:	f43f aef3 	beq.w	8106204 <__ieee754_pow+0x7ac>
 810641e:	e7e9      	b.n	81063f4 <__ieee754_pow+0x99c>
 8106420:	f04f 0a00 	mov.w	sl, #0
 8106424:	e71a      	b.n	810625c <__ieee754_pow+0x804>
 8106426:	ec51 0b10 	vmov	r0, r1, d0
 810642a:	4619      	mov	r1, r3
 810642c:	e7d4      	b.n	81063d8 <__ieee754_pow+0x980>
 810642e:	491c      	ldr	r1, [pc, #112]	; (81064a0 <__ieee754_pow+0xa48>)
 8106430:	2000      	movs	r0, #0
 8106432:	f7ff bb30 	b.w	8105a96 <__ieee754_pow+0x3e>
 8106436:	2000      	movs	r0, #0
 8106438:	2100      	movs	r1, #0
 810643a:	f7ff bb2c 	b.w	8105a96 <__ieee754_pow+0x3e>
 810643e:	4630      	mov	r0, r6
 8106440:	4639      	mov	r1, r7
 8106442:	f7ff bb28 	b.w	8105a96 <__ieee754_pow+0x3e>
 8106446:	9204      	str	r2, [sp, #16]
 8106448:	f7ff bb7a 	b.w	8105b40 <__ieee754_pow+0xe8>
 810644c:	2300      	movs	r3, #0
 810644e:	f7ff bb64 	b.w	8105b1a <__ieee754_pow+0xc2>
 8106452:	bf00      	nop
 8106454:	f3af 8000 	nop.w
 8106458:	00000000 	.word	0x00000000
 810645c:	3fe62e43 	.word	0x3fe62e43
 8106460:	fefa39ef 	.word	0xfefa39ef
 8106464:	3fe62e42 	.word	0x3fe62e42
 8106468:	0ca86c39 	.word	0x0ca86c39
 810646c:	be205c61 	.word	0xbe205c61
 8106470:	72bea4d0 	.word	0x72bea4d0
 8106474:	3e663769 	.word	0x3e663769
 8106478:	c5d26bf1 	.word	0xc5d26bf1
 810647c:	3ebbbd41 	.word	0x3ebbbd41
 8106480:	af25de2c 	.word	0xaf25de2c
 8106484:	3f11566a 	.word	0x3f11566a
 8106488:	16bebd93 	.word	0x16bebd93
 810648c:	3f66c16c 	.word	0x3f66c16c
 8106490:	5555553e 	.word	0x5555553e
 8106494:	3fc55555 	.word	0x3fc55555
 8106498:	3fe00000 	.word	0x3fe00000
 810649c:	000fffff 	.word	0x000fffff
 81064a0:	3ff00000 	.word	0x3ff00000
 81064a4:	4090cbff 	.word	0x4090cbff
 81064a8:	3f6f3400 	.word	0x3f6f3400
 81064ac:	652b82fe 	.word	0x652b82fe
 81064b0:	3c971547 	.word	0x3c971547

081064b4 <__ieee754_sqrt>:
 81064b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 81064b8:	ec55 4b10 	vmov	r4, r5, d0
 81064bc:	4e55      	ldr	r6, [pc, #340]	; (8106614 <__ieee754_sqrt+0x160>)
 81064be:	43ae      	bics	r6, r5
 81064c0:	ee10 0a10 	vmov	r0, s0
 81064c4:	ee10 3a10 	vmov	r3, s0
 81064c8:	462a      	mov	r2, r5
 81064ca:	4629      	mov	r1, r5
 81064cc:	d110      	bne.n	81064f0 <__ieee754_sqrt+0x3c>
 81064ce:	ee10 2a10 	vmov	r2, s0
 81064d2:	462b      	mov	r3, r5
 81064d4:	f7fa f8bc 	bl	8100650 <__aeabi_dmul>
 81064d8:	4602      	mov	r2, r0
 81064da:	460b      	mov	r3, r1
 81064dc:	4620      	mov	r0, r4
 81064de:	4629      	mov	r1, r5
 81064e0:	f7f9 ff00 	bl	81002e4 <__adddf3>
 81064e4:	4604      	mov	r4, r0
 81064e6:	460d      	mov	r5, r1
 81064e8:	ec45 4b10 	vmov	d0, r4, r5
 81064ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 81064f0:	2d00      	cmp	r5, #0
 81064f2:	dc10      	bgt.n	8106516 <__ieee754_sqrt+0x62>
 81064f4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 81064f8:	4330      	orrs	r0, r6
 81064fa:	d0f5      	beq.n	81064e8 <__ieee754_sqrt+0x34>
 81064fc:	b15d      	cbz	r5, 8106516 <__ieee754_sqrt+0x62>
 81064fe:	ee10 2a10 	vmov	r2, s0
 8106502:	462b      	mov	r3, r5
 8106504:	ee10 0a10 	vmov	r0, s0
 8106508:	f7f9 feea 	bl	81002e0 <__aeabi_dsub>
 810650c:	4602      	mov	r2, r0
 810650e:	460b      	mov	r3, r1
 8106510:	f7fa f9c8 	bl	81008a4 <__aeabi_ddiv>
 8106514:	e7e6      	b.n	81064e4 <__ieee754_sqrt+0x30>
 8106516:	1512      	asrs	r2, r2, #20
 8106518:	d074      	beq.n	8106604 <__ieee754_sqrt+0x150>
 810651a:	07d4      	lsls	r4, r2, #31
 810651c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8106520:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8106524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8106528:	bf5e      	ittt	pl
 810652a:	0fda      	lsrpl	r2, r3, #31
 810652c:	005b      	lslpl	r3, r3, #1
 810652e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8106532:	2400      	movs	r4, #0
 8106534:	0fda      	lsrs	r2, r3, #31
 8106536:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 810653a:	107f      	asrs	r7, r7, #1
 810653c:	005b      	lsls	r3, r3, #1
 810653e:	2516      	movs	r5, #22
 8106540:	4620      	mov	r0, r4
 8106542:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8106546:	1886      	adds	r6, r0, r2
 8106548:	428e      	cmp	r6, r1
 810654a:	bfde      	ittt	le
 810654c:	1b89      	suble	r1, r1, r6
 810654e:	18b0      	addle	r0, r6, r2
 8106550:	18a4      	addle	r4, r4, r2
 8106552:	0049      	lsls	r1, r1, #1
 8106554:	3d01      	subs	r5, #1
 8106556:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 810655a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 810655e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8106562:	d1f0      	bne.n	8106546 <__ieee754_sqrt+0x92>
 8106564:	462a      	mov	r2, r5
 8106566:	f04f 0e20 	mov.w	lr, #32
 810656a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 810656e:	4281      	cmp	r1, r0
 8106570:	eb06 0c05 	add.w	ip, r6, r5
 8106574:	dc02      	bgt.n	810657c <__ieee754_sqrt+0xc8>
 8106576:	d113      	bne.n	81065a0 <__ieee754_sqrt+0xec>
 8106578:	459c      	cmp	ip, r3
 810657a:	d811      	bhi.n	81065a0 <__ieee754_sqrt+0xec>
 810657c:	f1bc 0f00 	cmp.w	ip, #0
 8106580:	eb0c 0506 	add.w	r5, ip, r6
 8106584:	da43      	bge.n	810660e <__ieee754_sqrt+0x15a>
 8106586:	2d00      	cmp	r5, #0
 8106588:	db41      	blt.n	810660e <__ieee754_sqrt+0x15a>
 810658a:	f100 0801 	add.w	r8, r0, #1
 810658e:	1a09      	subs	r1, r1, r0
 8106590:	459c      	cmp	ip, r3
 8106592:	bf88      	it	hi
 8106594:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8106598:	eba3 030c 	sub.w	r3, r3, ip
 810659c:	4432      	add	r2, r6
 810659e:	4640      	mov	r0, r8
 81065a0:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 81065a4:	f1be 0e01 	subs.w	lr, lr, #1
 81065a8:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 81065ac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 81065b0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 81065b4:	d1db      	bne.n	810656e <__ieee754_sqrt+0xba>
 81065b6:	430b      	orrs	r3, r1
 81065b8:	d006      	beq.n	81065c8 <__ieee754_sqrt+0x114>
 81065ba:	1c50      	adds	r0, r2, #1
 81065bc:	bf13      	iteet	ne
 81065be:	3201      	addne	r2, #1
 81065c0:	3401      	addeq	r4, #1
 81065c2:	4672      	moveq	r2, lr
 81065c4:	f022 0201 	bicne.w	r2, r2, #1
 81065c8:	1063      	asrs	r3, r4, #1
 81065ca:	0852      	lsrs	r2, r2, #1
 81065cc:	07e1      	lsls	r1, r4, #31
 81065ce:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 81065d2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 81065d6:	bf48      	it	mi
 81065d8:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 81065dc:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 81065e0:	4614      	mov	r4, r2
 81065e2:	e781      	b.n	81064e8 <__ieee754_sqrt+0x34>
 81065e4:	0ad9      	lsrs	r1, r3, #11
 81065e6:	3815      	subs	r0, #21
 81065e8:	055b      	lsls	r3, r3, #21
 81065ea:	2900      	cmp	r1, #0
 81065ec:	d0fa      	beq.n	81065e4 <__ieee754_sqrt+0x130>
 81065ee:	02cd      	lsls	r5, r1, #11
 81065f0:	d50a      	bpl.n	8106608 <__ieee754_sqrt+0x154>
 81065f2:	f1c2 0420 	rsb	r4, r2, #32
 81065f6:	fa23 f404 	lsr.w	r4, r3, r4
 81065fa:	1e55      	subs	r5, r2, #1
 81065fc:	4093      	lsls	r3, r2
 81065fe:	4321      	orrs	r1, r4
 8106600:	1b42      	subs	r2, r0, r5
 8106602:	e78a      	b.n	810651a <__ieee754_sqrt+0x66>
 8106604:	4610      	mov	r0, r2
 8106606:	e7f0      	b.n	81065ea <__ieee754_sqrt+0x136>
 8106608:	0049      	lsls	r1, r1, #1
 810660a:	3201      	adds	r2, #1
 810660c:	e7ef      	b.n	81065ee <__ieee754_sqrt+0x13a>
 810660e:	4680      	mov	r8, r0
 8106610:	e7bd      	b.n	810658e <__ieee754_sqrt+0xda>
 8106612:	bf00      	nop
 8106614:	7ff00000 	.word	0x7ff00000

08106618 <with_errno>:
 8106618:	b570      	push	{r4, r5, r6, lr}
 810661a:	4604      	mov	r4, r0
 810661c:	460d      	mov	r5, r1
 810661e:	4616      	mov	r6, r2
 8106620:	f7ff f976 	bl	8105910 <__errno>
 8106624:	4629      	mov	r1, r5
 8106626:	6006      	str	r6, [r0, #0]
 8106628:	4620      	mov	r0, r4
 810662a:	bd70      	pop	{r4, r5, r6, pc}

0810662c <xflow>:
 810662c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 810662e:	4614      	mov	r4, r2
 8106630:	461d      	mov	r5, r3
 8106632:	b108      	cbz	r0, 8106638 <xflow+0xc>
 8106634:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8106638:	e9cd 2300 	strd	r2, r3, [sp]
 810663c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8106640:	4620      	mov	r0, r4
 8106642:	4629      	mov	r1, r5
 8106644:	f7fa f804 	bl	8100650 <__aeabi_dmul>
 8106648:	2222      	movs	r2, #34	; 0x22
 810664a:	b003      	add	sp, #12
 810664c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8106650:	f7ff bfe2 	b.w	8106618 <with_errno>

08106654 <__math_uflow>:
 8106654:	b508      	push	{r3, lr}
 8106656:	2200      	movs	r2, #0
 8106658:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 810665c:	f7ff ffe6 	bl	810662c <xflow>
 8106660:	ec41 0b10 	vmov	d0, r0, r1
 8106664:	bd08      	pop	{r3, pc}

08106666 <__math_oflow>:
 8106666:	b508      	push	{r3, lr}
 8106668:	2200      	movs	r2, #0
 810666a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 810666e:	f7ff ffdd 	bl	810662c <xflow>
 8106672:	ec41 0b10 	vmov	d0, r0, r1
 8106676:	bd08      	pop	{r3, pc}

08106678 <fabs>:
 8106678:	ec51 0b10 	vmov	r0, r1, d0
 810667c:	ee10 2a10 	vmov	r2, s0
 8106680:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8106684:	ec43 2b10 	vmov	d0, r2, r3
 8106688:	4770      	bx	lr

0810668a <finite>:
 810668a:	b082      	sub	sp, #8
 810668c:	ed8d 0b00 	vstr	d0, [sp]
 8106690:	9801      	ldr	r0, [sp, #4]
 8106692:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8106696:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 810669a:	0fc0      	lsrs	r0, r0, #31
 810669c:	b002      	add	sp, #8
 810669e:	4770      	bx	lr

081066a0 <scalbn>:
 81066a0:	b570      	push	{r4, r5, r6, lr}
 81066a2:	ec55 4b10 	vmov	r4, r5, d0
 81066a6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 81066aa:	4606      	mov	r6, r0
 81066ac:	462b      	mov	r3, r5
 81066ae:	b99a      	cbnz	r2, 81066d8 <scalbn+0x38>
 81066b0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 81066b4:	4323      	orrs	r3, r4
 81066b6:	d036      	beq.n	8106726 <scalbn+0x86>
 81066b8:	4b39      	ldr	r3, [pc, #228]	; (81067a0 <scalbn+0x100>)
 81066ba:	4629      	mov	r1, r5
 81066bc:	ee10 0a10 	vmov	r0, s0
 81066c0:	2200      	movs	r2, #0
 81066c2:	f7f9 ffc5 	bl	8100650 <__aeabi_dmul>
 81066c6:	4b37      	ldr	r3, [pc, #220]	; (81067a4 <scalbn+0x104>)
 81066c8:	429e      	cmp	r6, r3
 81066ca:	4604      	mov	r4, r0
 81066cc:	460d      	mov	r5, r1
 81066ce:	da10      	bge.n	81066f2 <scalbn+0x52>
 81066d0:	a32b      	add	r3, pc, #172	; (adr r3, 8106780 <scalbn+0xe0>)
 81066d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81066d6:	e03a      	b.n	810674e <scalbn+0xae>
 81066d8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 81066dc:	428a      	cmp	r2, r1
 81066de:	d10c      	bne.n	81066fa <scalbn+0x5a>
 81066e0:	ee10 2a10 	vmov	r2, s0
 81066e4:	4620      	mov	r0, r4
 81066e6:	4629      	mov	r1, r5
 81066e8:	f7f9 fdfc 	bl	81002e4 <__adddf3>
 81066ec:	4604      	mov	r4, r0
 81066ee:	460d      	mov	r5, r1
 81066f0:	e019      	b.n	8106726 <scalbn+0x86>
 81066f2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 81066f6:	460b      	mov	r3, r1
 81066f8:	3a36      	subs	r2, #54	; 0x36
 81066fa:	4432      	add	r2, r6
 81066fc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8106700:	428a      	cmp	r2, r1
 8106702:	dd08      	ble.n	8106716 <scalbn+0x76>
 8106704:	2d00      	cmp	r5, #0
 8106706:	a120      	add	r1, pc, #128	; (adr r1, 8106788 <scalbn+0xe8>)
 8106708:	e9d1 0100 	ldrd	r0, r1, [r1]
 810670c:	da1c      	bge.n	8106748 <scalbn+0xa8>
 810670e:	a120      	add	r1, pc, #128	; (adr r1, 8106790 <scalbn+0xf0>)
 8106710:	e9d1 0100 	ldrd	r0, r1, [r1]
 8106714:	e018      	b.n	8106748 <scalbn+0xa8>
 8106716:	2a00      	cmp	r2, #0
 8106718:	dd08      	ble.n	810672c <scalbn+0x8c>
 810671a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 810671e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8106722:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8106726:	ec45 4b10 	vmov	d0, r4, r5
 810672a:	bd70      	pop	{r4, r5, r6, pc}
 810672c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8106730:	da19      	bge.n	8106766 <scalbn+0xc6>
 8106732:	f24c 3350 	movw	r3, #50000	; 0xc350
 8106736:	429e      	cmp	r6, r3
 8106738:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 810673c:	dd0a      	ble.n	8106754 <scalbn+0xb4>
 810673e:	a112      	add	r1, pc, #72	; (adr r1, 8106788 <scalbn+0xe8>)
 8106740:	e9d1 0100 	ldrd	r0, r1, [r1]
 8106744:	2b00      	cmp	r3, #0
 8106746:	d1e2      	bne.n	810670e <scalbn+0x6e>
 8106748:	a30f      	add	r3, pc, #60	; (adr r3, 8106788 <scalbn+0xe8>)
 810674a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810674e:	f7f9 ff7f 	bl	8100650 <__aeabi_dmul>
 8106752:	e7cb      	b.n	81066ec <scalbn+0x4c>
 8106754:	a10a      	add	r1, pc, #40	; (adr r1, 8106780 <scalbn+0xe0>)
 8106756:	e9d1 0100 	ldrd	r0, r1, [r1]
 810675a:	2b00      	cmp	r3, #0
 810675c:	d0b8      	beq.n	81066d0 <scalbn+0x30>
 810675e:	a10e      	add	r1, pc, #56	; (adr r1, 8106798 <scalbn+0xf8>)
 8106760:	e9d1 0100 	ldrd	r0, r1, [r1]
 8106764:	e7b4      	b.n	81066d0 <scalbn+0x30>
 8106766:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 810676a:	3236      	adds	r2, #54	; 0x36
 810676c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8106770:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8106774:	4620      	mov	r0, r4
 8106776:	4b0c      	ldr	r3, [pc, #48]	; (81067a8 <scalbn+0x108>)
 8106778:	2200      	movs	r2, #0
 810677a:	e7e8      	b.n	810674e <scalbn+0xae>
 810677c:	f3af 8000 	nop.w
 8106780:	c2f8f359 	.word	0xc2f8f359
 8106784:	01a56e1f 	.word	0x01a56e1f
 8106788:	8800759c 	.word	0x8800759c
 810678c:	7e37e43c 	.word	0x7e37e43c
 8106790:	8800759c 	.word	0x8800759c
 8106794:	fe37e43c 	.word	0xfe37e43c
 8106798:	c2f8f359 	.word	0xc2f8f359
 810679c:	81a56e1f 	.word	0x81a56e1f
 81067a0:	43500000 	.word	0x43500000
 81067a4:	ffff3cb0 	.word	0xffff3cb0
 81067a8:	3c900000 	.word	0x3c900000

081067ac <_init>:
 81067ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81067ae:	bf00      	nop
 81067b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 81067b2:	bc08      	pop	{r3}
 81067b4:	469e      	mov	lr, r3
 81067b6:	4770      	bx	lr

081067b8 <_fini>:
 81067b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81067ba:	bf00      	nop
 81067bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 81067be:	bc08      	pop	{r3}
 81067c0:	469e      	mov	lr, r3
 81067c2:	4770      	bx	lr
