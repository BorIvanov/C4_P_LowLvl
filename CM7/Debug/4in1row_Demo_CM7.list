
4in1row_Demo_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009480  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000300  08009720  08009720  00019720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a20  08009a20  00020134  2**0
                  CONTENTS
  4 .ARM          00000008  08009a20  08009a20  00019a20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009a28  08009a28  00020134  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a28  08009a28  00019a28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009a2c  08009a2c  00019a2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  24000000  08009a30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000074  08009aa4  00020074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  240000d4  08009b04  000200d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000264  24000134  08009b64  00020134  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  24000398  08009b64  00020398  2**0
                  ALLOC
 13 .SharedData   0000000a  38000000  38000000  00030000  2**2
                  ALLOC
 14 .ARM.attributes 0000002e  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY
 15 .debug_info   00018c11  00000000  00000000  00020162  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00002f4a  00000000  00000000  00038d73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000f30  00000000  00000000  0003bcc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00000df8  00000000  00000000  0003cbf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0003c62a  00000000  00000000  0003d9e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00016ac6  00000000  00000000  0007a012  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00184213  00000000  00000000  00090ad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000050  00000000  00000000  00214ceb  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00004898  00000000  00000000  00214d3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000134 	.word	0x24000134
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08009708 	.word	0x08009708

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000138 	.word	0x24000138
 80002dc:	08009708 	.word	0x08009708

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000698:	4b3d      	ldr	r3, [pc, #244]	; (8000790 <SystemInit+0xfc>)
 800069a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800069e:	4a3c      	ldr	r2, [pc, #240]	; (8000790 <SystemInit+0xfc>)
 80006a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006a8:	4b39      	ldr	r3, [pc, #228]	; (8000790 <SystemInit+0xfc>)
 80006aa:	691b      	ldr	r3, [r3, #16]
 80006ac:	4a38      	ldr	r2, [pc, #224]	; (8000790 <SystemInit+0xfc>)
 80006ae:	f043 0310 	orr.w	r3, r3, #16
 80006b2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006b4:	4b37      	ldr	r3, [pc, #220]	; (8000794 <SystemInit+0x100>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f003 030f 	and.w	r3, r3, #15
 80006bc:	2b06      	cmp	r3, #6
 80006be:	d807      	bhi.n	80006d0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006c0:	4b34      	ldr	r3, [pc, #208]	; (8000794 <SystemInit+0x100>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f023 030f 	bic.w	r3, r3, #15
 80006c8:	4a32      	ldr	r2, [pc, #200]	; (8000794 <SystemInit+0x100>)
 80006ca:	f043 0307 	orr.w	r3, r3, #7
 80006ce:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006d0:	4b31      	ldr	r3, [pc, #196]	; (8000798 <SystemInit+0x104>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a30      	ldr	r2, [pc, #192]	; (8000798 <SystemInit+0x104>)
 80006d6:	f043 0301 	orr.w	r3, r3, #1
 80006da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006dc:	4b2e      	ldr	r3, [pc, #184]	; (8000798 <SystemInit+0x104>)
 80006de:	2200      	movs	r2, #0
 80006e0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006e2:	4b2d      	ldr	r3, [pc, #180]	; (8000798 <SystemInit+0x104>)
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	492c      	ldr	r1, [pc, #176]	; (8000798 <SystemInit+0x104>)
 80006e8:	4b2c      	ldr	r3, [pc, #176]	; (800079c <SystemInit+0x108>)
 80006ea:	4013      	ands	r3, r2
 80006ec:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ee:	4b29      	ldr	r3, [pc, #164]	; (8000794 <SystemInit+0x100>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f003 0308 	and.w	r3, r3, #8
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d007      	beq.n	800070a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006fa:	4b26      	ldr	r3, [pc, #152]	; (8000794 <SystemInit+0x100>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	f023 030f 	bic.w	r3, r3, #15
 8000702:	4a24      	ldr	r2, [pc, #144]	; (8000794 <SystemInit+0x100>)
 8000704:	f043 0307 	orr.w	r3, r3, #7
 8000708:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800070a:	4b23      	ldr	r3, [pc, #140]	; (8000798 <SystemInit+0x104>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000710:	4b21      	ldr	r3, [pc, #132]	; (8000798 <SystemInit+0x104>)
 8000712:	2200      	movs	r2, #0
 8000714:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000716:	4b20      	ldr	r3, [pc, #128]	; (8000798 <SystemInit+0x104>)
 8000718:	2200      	movs	r2, #0
 800071a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800071c:	4b1e      	ldr	r3, [pc, #120]	; (8000798 <SystemInit+0x104>)
 800071e:	4a20      	ldr	r2, [pc, #128]	; (80007a0 <SystemInit+0x10c>)
 8000720:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000722:	4b1d      	ldr	r3, [pc, #116]	; (8000798 <SystemInit+0x104>)
 8000724:	4a1f      	ldr	r2, [pc, #124]	; (80007a4 <SystemInit+0x110>)
 8000726:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000728:	4b1b      	ldr	r3, [pc, #108]	; (8000798 <SystemInit+0x104>)
 800072a:	4a1f      	ldr	r2, [pc, #124]	; (80007a8 <SystemInit+0x114>)
 800072c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800072e:	4b1a      	ldr	r3, [pc, #104]	; (8000798 <SystemInit+0x104>)
 8000730:	2200      	movs	r2, #0
 8000732:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000734:	4b18      	ldr	r3, [pc, #96]	; (8000798 <SystemInit+0x104>)
 8000736:	4a1c      	ldr	r2, [pc, #112]	; (80007a8 <SystemInit+0x114>)
 8000738:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800073a:	4b17      	ldr	r3, [pc, #92]	; (8000798 <SystemInit+0x104>)
 800073c:	2200      	movs	r2, #0
 800073e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000740:	4b15      	ldr	r3, [pc, #84]	; (8000798 <SystemInit+0x104>)
 8000742:	4a19      	ldr	r2, [pc, #100]	; (80007a8 <SystemInit+0x114>)
 8000744:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000746:	4b14      	ldr	r3, [pc, #80]	; (8000798 <SystemInit+0x104>)
 8000748:	2200      	movs	r2, #0
 800074a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <SystemInit+0x104>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a11      	ldr	r2, [pc, #68]	; (8000798 <SystemInit+0x104>)
 8000752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000756:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000758:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <SystemInit+0x104>)
 800075a:	2200      	movs	r2, #0
 800075c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800075e:	4b13      	ldr	r3, [pc, #76]	; (80007ac <SystemInit+0x118>)
 8000760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000762:	4a12      	ldr	r2, [pc, #72]	; (80007ac <SystemInit+0x118>)
 8000764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000768:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800076a:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <SystemInit+0x11c>)
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <SystemInit+0x120>)
 8000770:	4013      	ands	r3, r2
 8000772:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000776:	d202      	bcs.n	800077e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000778:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <SystemInit+0x124>)
 800077a:	2201      	movs	r2, #1
 800077c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800077e:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <SystemInit+0x128>)
 8000780:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000784:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000786:	bf00      	nop
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr
 8000790:	e000ed00 	.word	0xe000ed00
 8000794:	52002000 	.word	0x52002000
 8000798:	58024400 	.word	0x58024400
 800079c:	eaf6ed7f 	.word	0xeaf6ed7f
 80007a0:	02020200 	.word	0x02020200
 80007a4:	01ff0000 	.word	0x01ff0000
 80007a8:	01010280 	.word	0x01010280
 80007ac:	580000c0 	.word	0x580000c0
 80007b0:	5c001000 	.word	0x5c001000
 80007b4:	ffff0000 	.word	0xffff0000
 80007b8:	51008108 	.word	0x51008108
 80007bc:	52004000 	.word	0x52004000

080007c0 <Init_COM_controller>:
#include "COM_controller.h"

uint8_t* rxdata;
uint8_t* subRM;

void Init_COM_controller(UART_HandleTypeDef* const RPIbus, uint8_t* data, uint8_t* substate){
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b084      	sub	sp, #16
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	60f8      	str	r0, [r7, #12]
 80007c8:	60b9      	str	r1, [r7, #8]
 80007ca:	607a      	str	r2, [r7, #4]
	rxdata = data;
 80007cc:	4a09      	ldr	r2, [pc, #36]	; (80007f4 <Init_COM_controller+0x34>)
 80007ce:	68bb      	ldr	r3, [r7, #8]
 80007d0:	6013      	str	r3, [r2, #0]
	subRM = substate;
 80007d2:	4a09      	ldr	r2, [pc, #36]	; (80007f8 <Init_COM_controller+0x38>)
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	6013      	str	r3, [r2, #0]
	HAL_UART_Receive_IT(RPIbus, rxdata, 3);
 80007d8:	4b06      	ldr	r3, [pc, #24]	; (80007f4 <Init_COM_controller+0x34>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	2203      	movs	r2, #3
 80007de:	4619      	mov	r1, r3
 80007e0:	68f8      	ldr	r0, [r7, #12]
 80007e2:	f005 fa9b 	bl	8005d1c <HAL_UART_Receive_IT>
	srand(18);
 80007e6:	2012      	movs	r0, #18
 80007e8:	f007 fd4c 	bl	8008284 <srand>
}
 80007ec:	bf00      	nop
 80007ee:	3710      	adds	r7, #16
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	24000150 	.word	0x24000150
 80007f8:	24000154 	.word	0x24000154

080007fc <RPI_Request_Move>:

void RPI_Request_Move(UART_HandleTypeDef* const RPIbus, uint8_t insertColumn){
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b08c      	sub	sp, #48	; 0x30
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
 8000804:	460b      	mov	r3, r1
 8000806:	70fb      	strb	r3, [r7, #3]
	int random = rand() % 7 + 1;
 8000808:	f007 fd6a 	bl	80082e0 <rand>
 800080c:	4602      	mov	r2, r0
 800080e:	4b13      	ldr	r3, [pc, #76]	; (800085c <RPI_Request_Move+0x60>)
 8000810:	fb83 1302 	smull	r1, r3, r3, r2
 8000814:	4413      	add	r3, r2
 8000816:	1099      	asrs	r1, r3, #2
 8000818:	17d3      	asrs	r3, r2, #31
 800081a:	1ac9      	subs	r1, r1, r3
 800081c:	460b      	mov	r3, r1
 800081e:	00db      	lsls	r3, r3, #3
 8000820:	1a5b      	subs	r3, r3, r1
 8000822:	1ad1      	subs	r1, r2, r3
 8000824:	1c4b      	adds	r3, r1, #1
 8000826:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint8_t buf[32];
	sprintf((char *) buf, "Coin inserted in column : %i\r\n\n", random);
 8000828:	f107 030c 	add.w	r3, r7, #12
 800082c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800082e:	490c      	ldr	r1, [pc, #48]	; (8000860 <RPI_Request_Move+0x64>)
 8000830:	4618      	mov	r0, r3
 8000832:	f007 fd93 	bl	800835c <siprintf>
	UART_WriteString(&huart3, (char *)buf);
 8000836:	f107 030c 	add.w	r3, r7, #12
 800083a:	4619      	mov	r1, r3
 800083c:	4809      	ldr	r0, [pc, #36]	; (8000864 <RPI_Request_Move+0x68>)
 800083e:	f000 f843 	bl	80008c8 <UART_WriteString>
	HAL_Delay(2000);
 8000842:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000846:	f001 f857 	bl	80018f8 <HAL_Delay>
	UART_WriteValue(RPIbus, random);
 800084a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800084c:	6878      	ldr	r0, [r7, #4]
 800084e:	f000 f84f 	bl	80008f0 <UART_WriteValue>
}
 8000852:	bf00      	nop
 8000854:	3730      	adds	r7, #48	; 0x30
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	92492493 	.word	0x92492493
 8000860:	08009720 	.word	0x08009720
 8000864:	240002f4 	.word	0x240002f4

08000868 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000868:	b580      	push	{r7, lr}
 800086a:	b08a      	sub	sp, #40	; 0x28
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
	uint8_t buf[28];
	sprintf((char*) buf, "Received RPI value : %.*s\r\n\n", 2, rxdata);
 8000870:	4b10      	ldr	r3, [pc, #64]	; (80008b4 <HAL_UART_RxCpltCallback+0x4c>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	f107 000c 	add.w	r0, r7, #12
 8000878:	2202      	movs	r2, #2
 800087a:	490f      	ldr	r1, [pc, #60]	; (80008b8 <HAL_UART_RxCpltCallback+0x50>)
 800087c:	f007 fd6e 	bl	800835c <siprintf>
	UART_WriteString(&huart3, "-----------------------------------------------\r\n");
 8000880:	490e      	ldr	r1, [pc, #56]	; (80008bc <HAL_UART_RxCpltCallback+0x54>)
 8000882:	480f      	ldr	r0, [pc, #60]	; (80008c0 <HAL_UART_RxCpltCallback+0x58>)
 8000884:	f000 f820 	bl	80008c8 <UART_WriteString>
	UART_WriteString(&huart3, (char *)buf);
 8000888:	f107 030c 	add.w	r3, r7, #12
 800088c:	4619      	mov	r1, r3
 800088e:	480c      	ldr	r0, [pc, #48]	; (80008c0 <HAL_UART_RxCpltCallback+0x58>)
 8000890:	f000 f81a 	bl	80008c8 <UART_WriteString>
	*subRM = SUBSTATE_RM_REC_MOVE;
 8000894:	4b0b      	ldr	r3, [pc, #44]	; (80008c4 <HAL_UART_RxCpltCallback+0x5c>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	2201      	movs	r2, #1
 800089a:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(huart, rxdata, 3);
 800089c:	4b05      	ldr	r3, [pc, #20]	; (80008b4 <HAL_UART_RxCpltCallback+0x4c>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	2203      	movs	r2, #3
 80008a2:	4619      	mov	r1, r3
 80008a4:	6878      	ldr	r0, [r7, #4]
 80008a6:	f005 fa39 	bl	8005d1c <HAL_UART_Receive_IT>
}
 80008aa:	bf00      	nop
 80008ac:	3728      	adds	r7, #40	; 0x28
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	24000150 	.word	0x24000150
 80008b8:	08009740 	.word	0x08009740
 80008bc:	08009760 	.word	0x08009760
 80008c0:	240002f4 	.word	0x240002f4
 80008c4:	24000154 	.word	0x24000154

080008c8 <UART_WriteString>:

void UART_WriteString(UART_HandleTypeDef* const bus, char* buf){
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
 80008d0:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(bus, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 80008d2:	6838      	ldr	r0, [r7, #0]
 80008d4:	f7ff fd04 	bl	80002e0 <strlen>
 80008d8:	4603      	mov	r3, r0
 80008da:	b29a      	uxth	r2, r3
 80008dc:	f04f 33ff 	mov.w	r3, #4294967295
 80008e0:	6839      	ldr	r1, [r7, #0]
 80008e2:	6878      	ldr	r0, [r7, #4]
 80008e4:	f005 f984 	bl	8005bf0 <HAL_UART_Transmit>
}
 80008e8:	bf00      	nop
 80008ea:	3708      	adds	r7, #8
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}

080008f0 <UART_WriteValue>:

void UART_WriteValue(UART_HandleTypeDef* const bus, int value){
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b086      	sub	sp, #24
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
 80008f8:	6039      	str	r1, [r7, #0]
	uint8_t buf[12];
	sprintf((char*) buf, "%i\r\n", value);
 80008fa:	f107 030c 	add.w	r3, r7, #12
 80008fe:	683a      	ldr	r2, [r7, #0]
 8000900:	490a      	ldr	r1, [pc, #40]	; (800092c <UART_WriteValue+0x3c>)
 8000902:	4618      	mov	r0, r3
 8000904:	f007 fd2a 	bl	800835c <siprintf>
	HAL_UART_Transmit(bus, (uint8_t*)buf, strlen((const char*)buf), HAL_MAX_DELAY);
 8000908:	f107 030c 	add.w	r3, r7, #12
 800090c:	4618      	mov	r0, r3
 800090e:	f7ff fce7 	bl	80002e0 <strlen>
 8000912:	4603      	mov	r3, r0
 8000914:	b29a      	uxth	r2, r3
 8000916:	f107 010c 	add.w	r1, r7, #12
 800091a:	f04f 33ff 	mov.w	r3, #4294967295
 800091e:	6878      	ldr	r0, [r7, #4]
 8000920:	f005 f966 	bl	8005bf0 <HAL_UART_Transmit>
}
 8000924:	bf00      	nop
 8000926:	3718      	adds	r7, #24
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	08009794 	.word	0x08009794

08000930 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000934:	4b1e      	ldr	r3, [pc, #120]	; (80009b0 <MX_ETH_Init+0x80>)
 8000936:	4a1f      	ldr	r2, [pc, #124]	; (80009b4 <MX_ETH_Init+0x84>)
 8000938:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800093a:	4b1f      	ldr	r3, [pc, #124]	; (80009b8 <MX_ETH_Init+0x88>)
 800093c:	2200      	movs	r2, #0
 800093e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000940:	4b1d      	ldr	r3, [pc, #116]	; (80009b8 <MX_ETH_Init+0x88>)
 8000942:	2280      	movs	r2, #128	; 0x80
 8000944:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000946:	4b1c      	ldr	r3, [pc, #112]	; (80009b8 <MX_ETH_Init+0x88>)
 8000948:	22e1      	movs	r2, #225	; 0xe1
 800094a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 800094c:	4b1a      	ldr	r3, [pc, #104]	; (80009b8 <MX_ETH_Init+0x88>)
 800094e:	2200      	movs	r2, #0
 8000950:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000952:	4b19      	ldr	r3, [pc, #100]	; (80009b8 <MX_ETH_Init+0x88>)
 8000954:	2200      	movs	r2, #0
 8000956:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000958:	4b17      	ldr	r3, [pc, #92]	; (80009b8 <MX_ETH_Init+0x88>)
 800095a:	2200      	movs	r2, #0
 800095c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800095e:	4b14      	ldr	r3, [pc, #80]	; (80009b0 <MX_ETH_Init+0x80>)
 8000960:	4a15      	ldr	r2, [pc, #84]	; (80009b8 <MX_ETH_Init+0x88>)
 8000962:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000964:	4b12      	ldr	r3, [pc, #72]	; (80009b0 <MX_ETH_Init+0x80>)
 8000966:	2201      	movs	r2, #1
 8000968:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800096a:	4b11      	ldr	r3, [pc, #68]	; (80009b0 <MX_ETH_Init+0x80>)
 800096c:	4a13      	ldr	r2, [pc, #76]	; (80009bc <MX_ETH_Init+0x8c>)
 800096e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000970:	4b0f      	ldr	r3, [pc, #60]	; (80009b0 <MX_ETH_Init+0x80>)
 8000972:	4a13      	ldr	r2, [pc, #76]	; (80009c0 <MX_ETH_Init+0x90>)
 8000974:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000976:	4b0e      	ldr	r3, [pc, #56]	; (80009b0 <MX_ETH_Init+0x80>)
 8000978:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800097c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800097e:	480c      	ldr	r0, [pc, #48]	; (80009b0 <MX_ETH_Init+0x80>)
 8000980:	f001 feee 	bl	8002760 <HAL_ETH_Init>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 800098a:	f000 fbc0 	bl	800110e <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800098e:	2238      	movs	r2, #56	; 0x38
 8000990:	2100      	movs	r1, #0
 8000992:	480c      	ldr	r0, [pc, #48]	; (80009c4 <MX_ETH_Init+0x94>)
 8000994:	f007 fc6e 	bl	8008274 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000998:	4b0a      	ldr	r3, [pc, #40]	; (80009c4 <MX_ETH_Init+0x94>)
 800099a:	2221      	movs	r2, #33	; 0x21
 800099c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800099e:	4b09      	ldr	r3, [pc, #36]	; (80009c4 <MX_ETH_Init+0x94>)
 80009a0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80009a4:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80009a6:	4b07      	ldr	r3, [pc, #28]	; (80009c4 <MX_ETH_Init+0x94>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80009ac:	bf00      	nop
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	24000190 	.word	0x24000190
 80009b4:	40028000 	.word	0x40028000
 80009b8:	24000240 	.word	0x24000240
 80009bc:	240000d4 	.word	0x240000d4
 80009c0:	24000074 	.word	0x24000074
 80009c4:	24000158 	.word	0x24000158

080009c8 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b08e      	sub	sp, #56	; 0x38
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
 80009d8:	605a      	str	r2, [r3, #4]
 80009da:	609a      	str	r2, [r3, #8]
 80009dc:	60da      	str	r2, [r3, #12]
 80009de:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a59      	ldr	r2, [pc, #356]	; (8000b4c <HAL_ETH_MspInit+0x184>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	f040 80ab 	bne.w	8000b42 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80009ec:	4b58      	ldr	r3, [pc, #352]	; (8000b50 <HAL_ETH_MspInit+0x188>)
 80009ee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80009f2:	4a57      	ldr	r2, [pc, #348]	; (8000b50 <HAL_ETH_MspInit+0x188>)
 80009f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009f8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80009fc:	4b54      	ldr	r3, [pc, #336]	; (8000b50 <HAL_ETH_MspInit+0x188>)
 80009fe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000a02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a06:	623b      	str	r3, [r7, #32]
 8000a08:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000a0a:	4b51      	ldr	r3, [pc, #324]	; (8000b50 <HAL_ETH_MspInit+0x188>)
 8000a0c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000a10:	4a4f      	ldr	r2, [pc, #316]	; (8000b50 <HAL_ETH_MspInit+0x188>)
 8000a12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a16:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000a1a:	4b4d      	ldr	r3, [pc, #308]	; (8000b50 <HAL_ETH_MspInit+0x188>)
 8000a1c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000a20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a24:	61fb      	str	r3, [r7, #28]
 8000a26:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000a28:	4b49      	ldr	r3, [pc, #292]	; (8000b50 <HAL_ETH_MspInit+0x188>)
 8000a2a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000a2e:	4a48      	ldr	r2, [pc, #288]	; (8000b50 <HAL_ETH_MspInit+0x188>)
 8000a30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a34:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000a38:	4b45      	ldr	r3, [pc, #276]	; (8000b50 <HAL_ETH_MspInit+0x188>)
 8000a3a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a42:	61bb      	str	r3, [r7, #24]
 8000a44:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a46:	4b42      	ldr	r3, [pc, #264]	; (8000b50 <HAL_ETH_MspInit+0x188>)
 8000a48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a4c:	4a40      	ldr	r2, [pc, #256]	; (8000b50 <HAL_ETH_MspInit+0x188>)
 8000a4e:	f043 0304 	orr.w	r3, r3, #4
 8000a52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a56:	4b3e      	ldr	r3, [pc, #248]	; (8000b50 <HAL_ETH_MspInit+0x188>)
 8000a58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a5c:	f003 0304 	and.w	r3, r3, #4
 8000a60:	617b      	str	r3, [r7, #20]
 8000a62:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a64:	4b3a      	ldr	r3, [pc, #232]	; (8000b50 <HAL_ETH_MspInit+0x188>)
 8000a66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a6a:	4a39      	ldr	r2, [pc, #228]	; (8000b50 <HAL_ETH_MspInit+0x188>)
 8000a6c:	f043 0301 	orr.w	r3, r3, #1
 8000a70:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a74:	4b36      	ldr	r3, [pc, #216]	; (8000b50 <HAL_ETH_MspInit+0x188>)
 8000a76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a7a:	f003 0301 	and.w	r3, r3, #1
 8000a7e:	613b      	str	r3, [r7, #16]
 8000a80:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a82:	4b33      	ldr	r3, [pc, #204]	; (8000b50 <HAL_ETH_MspInit+0x188>)
 8000a84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a88:	4a31      	ldr	r2, [pc, #196]	; (8000b50 <HAL_ETH_MspInit+0x188>)
 8000a8a:	f043 0302 	orr.w	r3, r3, #2
 8000a8e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a92:	4b2f      	ldr	r3, [pc, #188]	; (8000b50 <HAL_ETH_MspInit+0x188>)
 8000a94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a98:	f003 0302 	and.w	r3, r3, #2
 8000a9c:	60fb      	str	r3, [r7, #12]
 8000a9e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000aa0:	4b2b      	ldr	r3, [pc, #172]	; (8000b50 <HAL_ETH_MspInit+0x188>)
 8000aa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa6:	4a2a      	ldr	r2, [pc, #168]	; (8000b50 <HAL_ETH_MspInit+0x188>)
 8000aa8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000aac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ab0:	4b27      	ldr	r3, [pc, #156]	; (8000b50 <HAL_ETH_MspInit+0x188>)
 8000ab2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000aba:	60bb      	str	r3, [r7, #8]
 8000abc:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000abe:	2332      	movs	r3, #50	; 0x32
 8000ac0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aca:	2300      	movs	r3, #0
 8000acc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ace:	230b      	movs	r3, #11
 8000ad0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ad2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	481e      	ldr	r0, [pc, #120]	; (8000b54 <HAL_ETH_MspInit+0x18c>)
 8000ada:	f002 fa65 	bl	8002fa8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000ade:	2386      	movs	r3, #134	; 0x86
 8000ae0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae2:	2302      	movs	r3, #2
 8000ae4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aea:	2300      	movs	r3, #0
 8000aec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000aee:	230b      	movs	r3, #11
 8000af0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000af6:	4619      	mov	r1, r3
 8000af8:	4817      	ldr	r0, [pc, #92]	; (8000b58 <HAL_ETH_MspInit+0x190>)
 8000afa:	f002 fa55 	bl	8002fa8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000afe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b04:	2302      	movs	r3, #2
 8000b06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b10:	230b      	movs	r3, #11
 8000b12:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4810      	ldr	r0, [pc, #64]	; (8000b5c <HAL_ETH_MspInit+0x194>)
 8000b1c:	f002 fa44 	bl	8002fa8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000b20:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000b24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b26:	2302      	movs	r3, #2
 8000b28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b32:	230b      	movs	r3, #11
 8000b34:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	4808      	ldr	r0, [pc, #32]	; (8000b60 <HAL_ETH_MspInit+0x198>)
 8000b3e:	f002 fa33 	bl	8002fa8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8000b42:	bf00      	nop
 8000b44:	3738      	adds	r7, #56	; 0x38
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	40028000 	.word	0x40028000
 8000b50:	58024400 	.word	0x58024400
 8000b54:	58020800 	.word	0x58020800
 8000b58:	58020000 	.word	0x58020000
 8000b5c:	58020400 	.word	0x58020400
 8000b60:	58021800 	.word	0x58021800

08000b64 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b08c      	sub	sp, #48	; 0x30
 8000b68:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6a:	f107 031c 	add.w	r3, r7, #28
 8000b6e:	2200      	movs	r2, #0
 8000b70:	601a      	str	r2, [r3, #0]
 8000b72:	605a      	str	r2, [r3, #4]
 8000b74:	609a      	str	r2, [r3, #8]
 8000b76:	60da      	str	r2, [r3, #12]
 8000b78:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b7a:	4b44      	ldr	r3, [pc, #272]	; (8000c8c <MX_GPIO_Init+0x128>)
 8000b7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b80:	4a42      	ldr	r2, [pc, #264]	; (8000c8c <MX_GPIO_Init+0x128>)
 8000b82:	f043 0304 	orr.w	r3, r3, #4
 8000b86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b8a:	4b40      	ldr	r3, [pc, #256]	; (8000c8c <MX_GPIO_Init+0x128>)
 8000b8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b90:	f003 0304 	and.w	r3, r3, #4
 8000b94:	61bb      	str	r3, [r7, #24]
 8000b96:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b98:	4b3c      	ldr	r3, [pc, #240]	; (8000c8c <MX_GPIO_Init+0x128>)
 8000b9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b9e:	4a3b      	ldr	r2, [pc, #236]	; (8000c8c <MX_GPIO_Init+0x128>)
 8000ba0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ba4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ba8:	4b38      	ldr	r3, [pc, #224]	; (8000c8c <MX_GPIO_Init+0x128>)
 8000baa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bb2:	617b      	str	r3, [r7, #20]
 8000bb4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb6:	4b35      	ldr	r3, [pc, #212]	; (8000c8c <MX_GPIO_Init+0x128>)
 8000bb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bbc:	4a33      	ldr	r2, [pc, #204]	; (8000c8c <MX_GPIO_Init+0x128>)
 8000bbe:	f043 0301 	orr.w	r3, r3, #1
 8000bc2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bc6:	4b31      	ldr	r3, [pc, #196]	; (8000c8c <MX_GPIO_Init+0x128>)
 8000bc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bcc:	f003 0301 	and.w	r3, r3, #1
 8000bd0:	613b      	str	r3, [r7, #16]
 8000bd2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bd4:	4b2d      	ldr	r3, [pc, #180]	; (8000c8c <MX_GPIO_Init+0x128>)
 8000bd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bda:	4a2c      	ldr	r2, [pc, #176]	; (8000c8c <MX_GPIO_Init+0x128>)
 8000bdc:	f043 0302 	orr.w	r3, r3, #2
 8000be0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000be4:	4b29      	ldr	r3, [pc, #164]	; (8000c8c <MX_GPIO_Init+0x128>)
 8000be6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bea:	f003 0302 	and.w	r3, r3, #2
 8000bee:	60fb      	str	r3, [r7, #12]
 8000bf0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bf2:	4b26      	ldr	r3, [pc, #152]	; (8000c8c <MX_GPIO_Init+0x128>)
 8000bf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bf8:	4a24      	ldr	r2, [pc, #144]	; (8000c8c <MX_GPIO_Init+0x128>)
 8000bfa:	f043 0308 	orr.w	r3, r3, #8
 8000bfe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c02:	4b22      	ldr	r3, [pc, #136]	; (8000c8c <MX_GPIO_Init+0x128>)
 8000c04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c08:	f003 0308 	and.w	r3, r3, #8
 8000c0c:	60bb      	str	r3, [r7, #8]
 8000c0e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c10:	4b1e      	ldr	r3, [pc, #120]	; (8000c8c <MX_GPIO_Init+0x128>)
 8000c12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c16:	4a1d      	ldr	r2, [pc, #116]	; (8000c8c <MX_GPIO_Init+0x128>)
 8000c18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c1c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c20:	4b1a      	ldr	r3, [pc, #104]	; (8000c8c <MX_GPIO_Init+0x128>)
 8000c22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c2a:	607b      	str	r3, [r7, #4]
 8000c2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000c2e:	2200      	movs	r2, #0
 8000c30:	f244 0101 	movw	r1, #16385	; 0x4001
 8000c34:	4816      	ldr	r0, [pc, #88]	; (8000c90 <MX_GPIO_Init+0x12c>)
 8000c36:	f002 fb67 	bl	8003308 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c3a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c40:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c46:	2302      	movs	r3, #2
 8000c48:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c4a:	f107 031c 	add.w	r3, r7, #28
 8000c4e:	4619      	mov	r1, r3
 8000c50:	4810      	ldr	r0, [pc, #64]	; (8000c94 <MX_GPIO_Init+0x130>)
 8000c52:	f002 f9a9 	bl	8002fa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000c56:	f244 0301 	movw	r3, #16385	; 0x4001
 8000c5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c60:	2300      	movs	r3, #0
 8000c62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c64:	2300      	movs	r3, #0
 8000c66:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c68:	f107 031c 	add.w	r3, r7, #28
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	4808      	ldr	r0, [pc, #32]	; (8000c90 <MX_GPIO_Init+0x12c>)
 8000c70:	f002 f99a 	bl	8002fa8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000c74:	2200      	movs	r2, #0
 8000c76:	2100      	movs	r1, #0
 8000c78:	2028      	movs	r0, #40	; 0x28
 8000c7a:	f000 ff5c 	bl	8001b36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c7e:	2028      	movs	r0, #40	; 0x28
 8000c80:	f000 ff73 	bl	8001b6a <HAL_NVIC_EnableIRQ>

}
 8000c84:	bf00      	nop
 8000c86:	3730      	adds	r7, #48	; 0x30
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	58024400 	.word	0x58024400
 8000c90:	58020400 	.word	0x58020400
 8000c94:	58020800 	.word	0x58020800

08000c98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b08c      	sub	sp, #48	; 0x30
 8000c9c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000c9e:	f000 fa09 	bl	80010b4 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000ca2:	4ba2      	ldr	r3, [pc, #648]	; (8000f2c <main+0x294>)
 8000ca4:	695b      	ldr	r3, [r3, #20]
 8000ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d11b      	bne.n	8000ce6 <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000cae:	f3bf 8f4f 	dsb	sy
}
 8000cb2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000cb4:	f3bf 8f6f 	isb	sy
}
 8000cb8:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000cba:	4b9c      	ldr	r3, [pc, #624]	; (8000f2c <main+0x294>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000cc2:	f3bf 8f4f 	dsb	sy
}
 8000cc6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000cc8:	f3bf 8f6f 	isb	sy
}
 8000ccc:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000cce:	4b97      	ldr	r3, [pc, #604]	; (8000f2c <main+0x294>)
 8000cd0:	695b      	ldr	r3, [r3, #20]
 8000cd2:	4a96      	ldr	r2, [pc, #600]	; (8000f2c <main+0x294>)
 8000cd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cd8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000cda:	f3bf 8f4f 	dsb	sy
}
 8000cde:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ce0:	f3bf 8f6f 	isb	sy
}
 8000ce4:	e000      	b.n	8000ce8 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000ce6:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000ce8:	4b90      	ldr	r3, [pc, #576]	; (8000f2c <main+0x294>)
 8000cea:	695b      	ldr	r3, [r3, #20]
 8000cec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d138      	bne.n	8000d66 <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000cf4:	4b8d      	ldr	r3, [pc, #564]	; (8000f2c <main+0x294>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000cfc:	f3bf 8f4f 	dsb	sy
}
 8000d00:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000d02:	4b8a      	ldr	r3, [pc, #552]	; (8000f2c <main+0x294>)
 8000d04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000d08:	62bb      	str	r3, [r7, #40]	; 0x28

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d0c:	0b5b      	lsrs	r3, r3, #13
 8000d0e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000d12:	627b      	str	r3, [r7, #36]	; 0x24
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d16:	08db      	lsrs	r3, r3, #3
 8000d18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000d1c:	623b      	str	r3, [r7, #32]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d20:	015a      	lsls	r2, r3, #5
 8000d22:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000d26:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000d28:	6a3a      	ldr	r2, [r7, #32]
 8000d2a:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000d2c:	497f      	ldr	r1, [pc, #508]	; (8000f2c <main+0x294>)
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000d34:	6a3b      	ldr	r3, [r7, #32]
 8000d36:	1e5a      	subs	r2, r3, #1
 8000d38:	623a      	str	r2, [r7, #32]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d1ef      	bne.n	8000d1e <main+0x86>
    } while(sets-- != 0U);
 8000d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d40:	1e5a      	subs	r2, r3, #1
 8000d42:	627a      	str	r2, [r7, #36]	; 0x24
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d1e5      	bne.n	8000d14 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000d48:	f3bf 8f4f 	dsb	sy
}
 8000d4c:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000d4e:	4b77      	ldr	r3, [pc, #476]	; (8000f2c <main+0x294>)
 8000d50:	695b      	ldr	r3, [r3, #20]
 8000d52:	4a76      	ldr	r2, [pc, #472]	; (8000f2c <main+0x294>)
 8000d54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d58:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000d5a:	f3bf 8f4f 	dsb	sy
}
 8000d5e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000d60:	f3bf 8f6f 	isb	sy
}
 8000d64:	e000      	b.n	8000d68 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000d66:	bf00      	nop
  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000d68:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000d6e:	bf00      	nop
 8000d70:	4b6f      	ldr	r3, [pc, #444]	; (8000f30 <main+0x298>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d004      	beq.n	8000d86 <main+0xee>
 8000d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d7e:	1e5a      	subs	r2, r3, #1
 8000d80:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	dcf4      	bgt.n	8000d70 <main+0xd8>
  if ( timeout < 0 )
 8000d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	da01      	bge.n	8000d90 <main+0xf8>
  {
  Error_Handler();
 8000d8c:	f000 f9bf 	bl	800110e <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d90:	f000 fd20 	bl	80017d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d94:	f000 f8ee 	bl	8000f74 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000d98:	4b65      	ldr	r3, [pc, #404]	; (8000f30 <main+0x298>)
 8000d9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d9e:	4a64      	ldr	r2, [pc, #400]	; (8000f30 <main+0x298>)
 8000da0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000da4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000da8:	4b61      	ldr	r3, [pc, #388]	; (8000f30 <main+0x298>)
 8000daa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000db2:	61fb      	str	r3, [r7, #28]
 8000db4:	69fb      	ldr	r3, [r7, #28]
/*Take HSEM */
//HAL_HSEM_FastTake(HSEM_ID_0);
/*Release HSEM in order to notify the CPU2(CM4)*/
//HAL_HSEM_Release(HSEM_ID_0,0);
HSEM_TAKE_RELEASE(HSEM_WAKEUP_CPU2);
 8000db6:	2000      	movs	r0, #0
 8000db8:	f002 faf4 	bl	80033a4 <HAL_HSEM_FastTake>
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	2000      	movs	r0, #0
 8000dc0:	f002 fb0a 	bl	80033d8 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000dc4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000dca:	bf00      	nop
 8000dcc:	4b58      	ldr	r3, [pc, #352]	; (8000f30 <main+0x298>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d104      	bne.n	8000de2 <main+0x14a>
 8000dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dda:	1e5a      	subs	r2, r3, #1
 8000ddc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	dcf4      	bgt.n	8000dcc <main+0x134>
if ( timeout < 0 )
 8000de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	da01      	bge.n	8000dec <main+0x154>
{
Error_Handler();
 8000de8:	f000 f991 	bl	800110e <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dec:	f7ff feba 	bl	8000b64 <MX_GPIO_Init>
  MX_ETH_Init();
 8000df0:	f7ff fd9e 	bl	8000930 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000df4:	f000 fba2 	bl	800153c <MX_USART3_UART_Init>
  MX_USART1_UART_Init();
 8000df8:	f000 fb54 	bl	80014a4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  Init_COM_controller(&huart1, Rx_data, &substateRM);
 8000dfc:	4a4d      	ldr	r2, [pc, #308]	; (8000f34 <main+0x29c>)
 8000dfe:	494e      	ldr	r1, [pc, #312]	; (8000f38 <main+0x2a0>)
 8000e00:	484e      	ldr	r0, [pc, #312]	; (8000f3c <main+0x2a4>)
 8000e02:	f7ff fcdd 	bl	80007c0 <Init_COM_controller>
  initTaskGenerator(&state, &substateRM, &substateHM, Rx_data);
 8000e06:	4b4c      	ldr	r3, [pc, #304]	; (8000f38 <main+0x2a0>)
 8000e08:	4a4d      	ldr	r2, [pc, #308]	; (8000f40 <main+0x2a8>)
 8000e0a:	494a      	ldr	r1, [pc, #296]	; (8000f34 <main+0x29c>)
 8000e0c:	484d      	ldr	r0, [pc, #308]	; (8000f44 <main+0x2ac>)
 8000e0e:	f000 fab5 	bl	800137c <initTaskGenerator>

  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000e12:	2201      	movs	r2, #1
 8000e14:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e18:	484b      	ldr	r0, [pc, #300]	; (8000f48 <main+0x2b0>)
 8000e1a:	f002 fa75 	bl	8003308 <HAL_GPIO_WritePin>

  UART_WriteString(&huart3, "-----------------------------------------------\r\n");
 8000e1e:	494b      	ldr	r1, [pc, #300]	; (8000f4c <main+0x2b4>)
 8000e20:	484b      	ldr	r0, [pc, #300]	; (8000f50 <main+0x2b8>)
 8000e22:	f7ff fd51 	bl	80008c8 <UART_WriteString>
  UART_WriteString(&huart3, "Initialize system and calibrate motor X\r\n\n");
 8000e26:	494b      	ldr	r1, [pc, #300]	; (8000f54 <main+0x2bc>)
 8000e28:	4849      	ldr	r0, [pc, #292]	; (8000f50 <main+0x2b8>)
 8000e2a:	f7ff fd4d 	bl	80008c8 <UART_WriteString>

    /* USER CODE BEGIN 3 */
	  if(state == STATE_INIT){

	  }
	  if(state == STATE_START){
 8000e2e:	4b45      	ldr	r3, [pc, #276]	; (8000f44 <main+0x2ac>)
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	2b01      	cmp	r3, #1
 8000e34:	d125      	bne.n	8000e82 <main+0x1ea>
		  if(!blue_btn){
 8000e36:	4b48      	ldr	r3, [pc, #288]	; (8000f58 <main+0x2c0>)
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d10a      	bne.n	8000e54 <main+0x1bc>
			  UART_WriteString(&huart3, "-----------------------------------------------\r\n");
 8000e3e:	4943      	ldr	r1, [pc, #268]	; (8000f4c <main+0x2b4>)
 8000e40:	4843      	ldr	r0, [pc, #268]	; (8000f50 <main+0x2b8>)
 8000e42:	f7ff fd41 	bl	80008c8 <UART_WriteString>
			  UART_WriteString(&huart3, "Press the blue button to start the game\r\n\n");
 8000e46:	4945      	ldr	r1, [pc, #276]	; (8000f5c <main+0x2c4>)
 8000e48:	4841      	ldr	r0, [pc, #260]	; (8000f50 <main+0x2b8>)
 8000e4a:	f7ff fd3d 	bl	80008c8 <UART_WriteString>
			  blue_btn = 1;
 8000e4e:	4b42      	ldr	r3, [pc, #264]	; (8000f58 <main+0x2c0>)
 8000e50:	2201      	movs	r2, #1
 8000e52:	701a      	strb	r2, [r3, #0]
		  }

		  if(q == 4){
 8000e54:	4b42      	ldr	r3, [pc, #264]	; (8000f60 <main+0x2c8>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	2b04      	cmp	r3, #4
 8000e5a:	d10c      	bne.n	8000e76 <main+0x1de>
			  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e62:	4839      	ldr	r0, [pc, #228]	; (8000f48 <main+0x2b0>)
 8000e64:	f002 fa50 	bl	8003308 <HAL_GPIO_WritePin>
			  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000e68:	2101      	movs	r1, #1
 8000e6a:	4837      	ldr	r0, [pc, #220]	; (8000f48 <main+0x2b0>)
 8000e6c:	f002 fa65 	bl	800333a <HAL_GPIO_TogglePin>
			  q = 0;
 8000e70:	4b3b      	ldr	r3, [pc, #236]	; (8000f60 <main+0x2c8>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	701a      	strb	r2, [r3, #0]
		  }
		  q++;
 8000e76:	4b3a      	ldr	r3, [pc, #232]	; (8000f60 <main+0x2c8>)
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	3301      	adds	r3, #1
 8000e7c:	b2da      	uxtb	r2, r3
 8000e7e:	4b38      	ldr	r3, [pc, #224]	; (8000f60 <main+0x2c8>)
 8000e80:	701a      	strb	r2, [r3, #0]
	  }
	  if(state == STATE_HUMAN_MOVE){
 8000e82:	4b30      	ldr	r3, [pc, #192]	; (8000f44 <main+0x2ac>)
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	2b03      	cmp	r3, #3
 8000e88:	d111      	bne.n	8000eae <main+0x216>
		  if(substateHM == SUBSTATE_HM_ACTIVATE){
 8000e8a:	4b2d      	ldr	r3, [pc, #180]	; (8000f40 <main+0x2a8>)
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d10d      	bne.n	8000eae <main+0x216>
			  taskToDo(TASK_HUMAN_MOVE);
 8000e92:	2000      	movs	r0, #0
 8000e94:	f000 fa9e 	bl	80013d4 <taskToDo>
			  UART_WriteString(&huart3, "-----------------------------------------------\r\n");
 8000e98:	492c      	ldr	r1, [pc, #176]	; (8000f4c <main+0x2b4>)
 8000e9a:	482d      	ldr	r0, [pc, #180]	; (8000f50 <main+0x2b8>)
 8000e9c:	f7ff fd14 	bl	80008c8 <UART_WriteString>
			  UART_WriteString(&huart3, "The player can insert a coin\r\n\n");
 8000ea0:	4930      	ldr	r1, [pc, #192]	; (8000f64 <main+0x2cc>)
 8000ea2:	482b      	ldr	r0, [pc, #172]	; (8000f50 <main+0x2b8>)
 8000ea4:	f7ff fd10 	bl	80008c8 <UART_WriteString>
			  substateHM = SUBSTATE_HM_WAIT;
 8000ea8:	4b25      	ldr	r3, [pc, #148]	; (8000f40 <main+0x2a8>)
 8000eaa:	2201      	movs	r2, #1
 8000eac:	701a      	strb	r2, [r3, #0]
		  }
		  if(substateHM == SUBSTATE_HM_WAIT){
			  //do nothing
		  }
	  }
	  if(state == STATE_ROBOT_MOVE){
 8000eae:	4b25      	ldr	r3, [pc, #148]	; (8000f44 <main+0x2ac>)
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	2b02      	cmp	r3, #2
 8000eb4:	d136      	bne.n	8000f24 <main+0x28c>
		  if(substateRM == SUBSTATE_RM_REQ_MOVE){
 8000eb6:	4b1f      	ldr	r3, [pc, #124]	; (8000f34 <main+0x29c>)
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d107      	bne.n	8000ece <main+0x236>
			  RPI_Request_Move(&huart1, 0);
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	481e      	ldr	r0, [pc, #120]	; (8000f3c <main+0x2a4>)
 8000ec2:	f7ff fc9b 	bl	80007fc <RPI_Request_Move>
			  HAL_Delay(2000);
 8000ec6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000eca:	f000 fd15 	bl	80018f8 <HAL_Delay>
		  }
		  if(substateRM == SUBSTATE_RM_REC_MOVE){
 8000ece:	4b19      	ldr	r3, [pc, #100]	; (8000f34 <main+0x29c>)
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	2b01      	cmp	r3, #1
 8000ed4:	d114      	bne.n	8000f00 <main+0x268>
			  uint8_t buf[28];
			  taskToDo(TASK_ROBOT_MOVE);
 8000ed6:	2001      	movs	r0, #1
 8000ed8:	f000 fa7c 	bl	80013d4 <taskToDo>
			  substateRM = SUBSTATE_RM_WAIT_CM4;
 8000edc:	4b15      	ldr	r3, [pc, #84]	; (8000f34 <main+0x29c>)
 8000ede:	2203      	movs	r2, #3
 8000ee0:	701a      	strb	r2, [r3, #0]
			  UART_WriteString(&huart3, "Start robot move\r\n\n");
 8000ee2:	4921      	ldr	r1, [pc, #132]	; (8000f68 <main+0x2d0>)
 8000ee4:	481a      	ldr	r0, [pc, #104]	; (8000f50 <main+0x2b8>)
 8000ee6:	f7ff fcef 	bl	80008c8 <UART_WriteString>
			  sprintf((char*) buf, "Enter coin in column : %.*s\r\n\n", 2, Rx_data);
 8000eea:	4638      	mov	r0, r7
 8000eec:	4b12      	ldr	r3, [pc, #72]	; (8000f38 <main+0x2a0>)
 8000eee:	2202      	movs	r2, #2
 8000ef0:	491e      	ldr	r1, [pc, #120]	; (8000f6c <main+0x2d4>)
 8000ef2:	f007 fa33 	bl	800835c <siprintf>
			  UART_WriteString(&huart3, (char *)buf);
 8000ef6:	463b      	mov	r3, r7
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4815      	ldr	r0, [pc, #84]	; (8000f50 <main+0x2b8>)
 8000efc:	f7ff fce4 	bl	80008c8 <UART_WriteString>
		  }
		  if(substateRM == SUBSTATE_RM_WAIT_CM4){
			  //do nothing
		  }
		  if(substateRM == SUBSTATE_RM_CM4_DONE){
 8000f00:	4b0c      	ldr	r3, [pc, #48]	; (8000f34 <main+0x29c>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	2b04      	cmp	r3, #4
 8000f06:	d10d      	bne.n	8000f24 <main+0x28c>
			  UART_WriteString(&huart3, "Robot move done\r\n\n");
 8000f08:	4919      	ldr	r1, [pc, #100]	; (8000f70 <main+0x2d8>)
 8000f0a:	4811      	ldr	r0, [pc, #68]	; (8000f50 <main+0x2b8>)
 8000f0c:	f7ff fcdc 	bl	80008c8 <UART_WriteString>
			  substateRM = SUBSTATE_RM_REQ_MOVE;
 8000f10:	4b08      	ldr	r3, [pc, #32]	; (8000f34 <main+0x29c>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	701a      	strb	r2, [r3, #0]
			  state = STATE_HUMAN_MOVE;
 8000f16:	4b0b      	ldr	r3, [pc, #44]	; (8000f44 <main+0x2ac>)
 8000f18:	2203      	movs	r2, #3
 8000f1a:	701a      	strb	r2, [r3, #0]
			  HAL_Delay(1000);
 8000f1c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f20:	f000 fcea 	bl	80018f8 <HAL_Delay>
		  }
	  }
	  HAL_Delay(50);
 8000f24:	2032      	movs	r0, #50	; 0x32
 8000f26:	f000 fce7 	bl	80018f8 <HAL_Delay>
	  if(state == STATE_INIT){
 8000f2a:	e780      	b.n	8000e2e <main+0x196>
 8000f2c:	e000ed00 	.word	0xe000ed00
 8000f30:	58024400 	.word	0x58024400
 8000f34:	24000247 	.word	0x24000247
 8000f38:	2400024c 	.word	0x2400024c
 8000f3c:	24000264 	.word	0x24000264
 8000f40:	24000248 	.word	0x24000248
 8000f44:	24000246 	.word	0x24000246
 8000f48:	58020400 	.word	0x58020400
 8000f4c:	0800979c 	.word	0x0800979c
 8000f50:	240002f4 	.word	0x240002f4
 8000f54:	080097d0 	.word	0x080097d0
 8000f58:	2400024a 	.word	0x2400024a
 8000f5c:	080097fc 	.word	0x080097fc
 8000f60:	24000249 	.word	0x24000249
 8000f64:	08009828 	.word	0x08009828
 8000f68:	08009848 	.word	0x08009848
 8000f6c:	0800985c 	.word	0x0800985c
 8000f70:	0800987c 	.word	0x0800987c

08000f74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b09c      	sub	sp, #112	; 0x70
 8000f78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f7e:	224c      	movs	r2, #76	; 0x4c
 8000f80:	2100      	movs	r1, #0
 8000f82:	4618      	mov	r0, r3
 8000f84:	f007 f976 	bl	8008274 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f88:	1d3b      	adds	r3, r7, #4
 8000f8a:	2220      	movs	r2, #32
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f007 f970 	bl	8008274 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000f94:	2004      	movs	r0, #4
 8000f96:	f002 fa5f 	bl	8003458 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	603b      	str	r3, [r7, #0]
 8000f9e:	4b30      	ldr	r3, [pc, #192]	; (8001060 <SystemClock_Config+0xec>)
 8000fa0:	699b      	ldr	r3, [r3, #24]
 8000fa2:	4a2f      	ldr	r2, [pc, #188]	; (8001060 <SystemClock_Config+0xec>)
 8000fa4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000fa8:	6193      	str	r3, [r2, #24]
 8000faa:	4b2d      	ldr	r3, [pc, #180]	; (8001060 <SystemClock_Config+0xec>)
 8000fac:	699b      	ldr	r3, [r3, #24]
 8000fae:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fb2:	603b      	str	r3, [r7, #0]
 8000fb4:	4b2b      	ldr	r3, [pc, #172]	; (8001064 <SystemClock_Config+0xf0>)
 8000fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fb8:	4a2a      	ldr	r2, [pc, #168]	; (8001064 <SystemClock_Config+0xf0>)
 8000fba:	f043 0301 	orr.w	r3, r3, #1
 8000fbe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000fc0:	4b28      	ldr	r3, [pc, #160]	; (8001064 <SystemClock_Config+0xf0>)
 8000fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fc4:	f003 0301 	and.w	r3, r3, #1
 8000fc8:	603b      	str	r3, [r7, #0]
 8000fca:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000fcc:	bf00      	nop
 8000fce:	4b24      	ldr	r3, [pc, #144]	; (8001060 <SystemClock_Config+0xec>)
 8000fd0:	699b      	ldr	r3, [r3, #24]
 8000fd2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000fd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000fda:	d1f8      	bne.n	8000fce <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fe0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fe4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fea:	2302      	movs	r3, #2
 8000fec:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000ff2:	233c      	movs	r3, #60	; 0x3c
 8000ff4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000ffa:	2308      	movs	r3, #8
 8000ffc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ffe:	2302      	movs	r3, #2
 8001000:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001002:	230c      	movs	r3, #12
 8001004:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001006:	2300      	movs	r3, #0
 8001008:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800100a:	2300      	movs	r3, #0
 800100c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800100e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001012:	4618      	mov	r0, r3
 8001014:	f002 fa7a 	bl	800350c <HAL_RCC_OscConfig>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800101e:	f000 f876 	bl	800110e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001022:	233f      	movs	r3, #63	; 0x3f
 8001024:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001026:	2303      	movs	r3, #3
 8001028:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800102a:	2300      	movs	r3, #0
 800102c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800102e:	2308      	movs	r3, #8
 8001030:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001032:	2300      	movs	r3, #0
 8001034:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001036:	2340      	movs	r3, #64	; 0x40
 8001038:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800103a:	2300      	movs	r3, #0
 800103c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800103e:	2300      	movs	r3, #0
 8001040:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001042:	1d3b      	adds	r3, r7, #4
 8001044:	2101      	movs	r1, #1
 8001046:	4618      	mov	r0, r3
 8001048:	f002 fe8e 	bl	8003d68 <HAL_RCC_ClockConfig>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8001052:	f000 f85c 	bl	800110e <Error_Handler>
  }
}
 8001056:	bf00      	nop
 8001058:	3770      	adds	r7, #112	; 0x70
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	58024800 	.word	0x58024800
 8001064:	58000400 	.word	0x58000400

08001068 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	4603      	mov	r3, r0
 8001070:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == B1_Pin) // If The INT Source Is EXTI Line13 (PB13 Pin). This is the user button
 8001072:	88fb      	ldrh	r3, [r7, #6]
 8001074:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001078:	d10f      	bne.n	800109a <HAL_GPIO_EXTI_Callback+0x32>
    {
    	if (state == STATE_START){
 800107a:	4b0a      	ldr	r3, [pc, #40]	; (80010a4 <HAL_GPIO_EXTI_Callback+0x3c>)
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	2b01      	cmp	r3, #1
 8001080:	d10b      	bne.n	800109a <HAL_GPIO_EXTI_Callback+0x32>
    		state = STATE_HUMAN_MOVE;
 8001082:	4b08      	ldr	r3, [pc, #32]	; (80010a4 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001084:	2203      	movs	r2, #3
 8001086:	701a      	strb	r2, [r3, #0]
    		UART_WriteString(&huart3, "Game started\r\n\n");
 8001088:	4907      	ldr	r1, [pc, #28]	; (80010a8 <HAL_GPIO_EXTI_Callback+0x40>)
 800108a:	4808      	ldr	r0, [pc, #32]	; (80010ac <HAL_GPIO_EXTI_Callback+0x44>)
 800108c:	f7ff fc1c 	bl	80008c8 <UART_WriteString>
    		HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8001090:	2201      	movs	r2, #1
 8001092:	2101      	movs	r1, #1
 8001094:	4806      	ldr	r0, [pc, #24]	; (80010b0 <HAL_GPIO_EXTI_Callback+0x48>)
 8001096:	f002 f937 	bl	8003308 <HAL_GPIO_WritePin>
    	}
    }
}
 800109a:	bf00      	nop
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	24000246 	.word	0x24000246
 80010a8:	08009890 	.word	0x08009890
 80010ac:	240002f4 	.word	0x240002f4
 80010b0:	58020400 	.word	0x58020400

080010b4 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80010ba:	463b      	mov	r3, r7
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	605a      	str	r2, [r3, #4]
 80010c2:	609a      	str	r2, [r3, #8]
 80010c4:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80010c6:	f000 fd6b 	bl	8001ba0 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80010ca:	2301      	movs	r3, #1
 80010cc:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80010ce:	2300      	movs	r3, #0
 80010d0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x38000000;
 80010d2:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 80010d6:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32B;
 80010d8:	2304      	movs	r3, #4
 80010da:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 80010dc:	2300      	movs	r3, #0
 80010de:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80010e0:	2300      	movs	r3, #0
 80010e2:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80010e4:	2303      	movs	r3, #3
 80010e6:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80010e8:	2301      	movs	r3, #1
 80010ea:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80010ec:	2301      	movs	r3, #1
 80010ee:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80010f0:	2300      	movs	r3, #0
 80010f2:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 80010f4:	2301      	movs	r3, #1
 80010f6:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80010f8:	463b      	mov	r3, r7
 80010fa:	4618      	mov	r0, r3
 80010fc:	f000 fd88 	bl	8001c10 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001100:	2004      	movs	r0, #4
 8001102:	f000 fd65 	bl	8001bd0 <HAL_MPU_Enable>

}
 8001106:	bf00      	nop
 8001108:	3710      	adds	r7, #16
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}

0800110e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800110e:	b480      	push	{r7}
 8001110:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001112:	b672      	cpsid	i
}
 8001114:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001116:	e7fe      	b.n	8001116 <Error_Handler+0x8>

08001118 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800111e:	4b0d      	ldr	r3, [pc, #52]	; (8001154 <HAL_MspInit+0x3c>)
 8001120:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001124:	4a0b      	ldr	r2, [pc, #44]	; (8001154 <HAL_MspInit+0x3c>)
 8001126:	f043 0302 	orr.w	r3, r3, #2
 800112a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800112e:	4b09      	ldr	r3, [pc, #36]	; (8001154 <HAL_MspInit+0x3c>)
 8001130:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001134:	f003 0302 	and.w	r3, r3, #2
 8001138:	607b      	str	r3, [r7, #4]
 800113a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM1_IRQn, 0, 0);
 800113c:	2200      	movs	r2, #0
 800113e:	2100      	movs	r1, #0
 8001140:	207d      	movs	r0, #125	; 0x7d
 8001142:	f000 fcf8 	bl	8001b36 <HAL_NVIC_SetPriority>
  /* HSEM1_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(HSEM1_IRQn);
 8001146:	207d      	movs	r0, #125	; 0x7d
 8001148:	f000 fd0f 	bl	8001b6a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800114c:	bf00      	nop
 800114e:	3708      	adds	r7, #8
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	58024400 	.word	0x58024400

08001158 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800115c:	e7fe      	b.n	800115c <NMI_Handler+0x4>

0800115e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800115e:	b480      	push	{r7}
 8001160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001162:	e7fe      	b.n	8001162 <HardFault_Handler+0x4>

08001164 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001168:	e7fe      	b.n	8001168 <MemManage_Handler+0x4>

0800116a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800116a:	b480      	push	{r7}
 800116c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800116e:	e7fe      	b.n	800116e <BusFault_Handler+0x4>

08001170 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001174:	e7fe      	b.n	8001174 <UsageFault_Handler+0x4>

08001176 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001176:	b480      	push	{r7}
 8001178:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800117a:	bf00      	nop
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr

08001184 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001188:	bf00      	nop
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr

08001192 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001192:	b480      	push	{r7}
 8001194:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001196:	bf00      	nop
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr

080011a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011a4:	f000 fb88 	bl	80018b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011a8:	bf00      	nop
 80011aa:	bd80      	pop	{r7, pc}

080011ac <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80011b0:	4802      	ldr	r0, [pc, #8]	; (80011bc <USART1_IRQHandler+0x10>)
 80011b2:	f004 fe09 	bl	8005dc8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80011b6:	bf00      	nop
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	24000264 	.word	0x24000264

080011c0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80011c4:	4802      	ldr	r0, [pc, #8]	; (80011d0 <USART3_IRQHandler+0x10>)
 80011c6:	f004 fdff 	bl	8005dc8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80011ca:	bf00      	nop
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	240002f4 	.word	0x240002f4

080011d4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80011d8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80011dc:	f002 f8c7 	bl	800336e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80011e0:	bf00      	nop
 80011e2:	bd80      	pop	{r7, pc}

080011e4 <HSEM1_IRQHandler>:

/**
  * @brief This function handles HSEM1 global interrupt.
  */
void HSEM1_IRQHandler(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM1_IRQn 0 */

  /* USER CODE END HSEM1_IRQn 0 */
  HAL_HSEM_IRQHandler();
 80011e8:	f002 f91c 	bl	8003424 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM1_IRQn 1 */

  /* USER CODE END HSEM1_IRQn 1 */
}
 80011ec:	bf00      	nop
 80011ee:	bd80      	pop	{r7, pc}

080011f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
	return 1;
 80011f4:	2301      	movs	r3, #1
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr

08001200 <_kill>:

int _kill(int pid, int sig)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800120a:	f007 f809 	bl	8008220 <__errno>
 800120e:	4603      	mov	r3, r0
 8001210:	2216      	movs	r2, #22
 8001212:	601a      	str	r2, [r3, #0]
	return -1;
 8001214:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001218:	4618      	mov	r0, r3
 800121a:	3708      	adds	r7, #8
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}

08001220 <_exit>:

void _exit (int status)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001228:	f04f 31ff 	mov.w	r1, #4294967295
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f7ff ffe7 	bl	8001200 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001232:	e7fe      	b.n	8001232 <_exit+0x12>

08001234 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b086      	sub	sp, #24
 8001238:	af00      	add	r7, sp, #0
 800123a:	60f8      	str	r0, [r7, #12]
 800123c:	60b9      	str	r1, [r7, #8]
 800123e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001240:	2300      	movs	r3, #0
 8001242:	617b      	str	r3, [r7, #20]
 8001244:	e00a      	b.n	800125c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001246:	f3af 8000 	nop.w
 800124a:	4601      	mov	r1, r0
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	1c5a      	adds	r2, r3, #1
 8001250:	60ba      	str	r2, [r7, #8]
 8001252:	b2ca      	uxtb	r2, r1
 8001254:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	3301      	adds	r3, #1
 800125a:	617b      	str	r3, [r7, #20]
 800125c:	697a      	ldr	r2, [r7, #20]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	429a      	cmp	r2, r3
 8001262:	dbf0      	blt.n	8001246 <_read+0x12>
	}

return len;
 8001264:	687b      	ldr	r3, [r7, #4]
}
 8001266:	4618      	mov	r0, r3
 8001268:	3718      	adds	r7, #24
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}

0800126e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800126e:	b580      	push	{r7, lr}
 8001270:	b086      	sub	sp, #24
 8001272:	af00      	add	r7, sp, #0
 8001274:	60f8      	str	r0, [r7, #12]
 8001276:	60b9      	str	r1, [r7, #8]
 8001278:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800127a:	2300      	movs	r3, #0
 800127c:	617b      	str	r3, [r7, #20]
 800127e:	e009      	b.n	8001294 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	1c5a      	adds	r2, r3, #1
 8001284:	60ba      	str	r2, [r7, #8]
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	4618      	mov	r0, r3
 800128a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	3301      	adds	r3, #1
 8001292:	617b      	str	r3, [r7, #20]
 8001294:	697a      	ldr	r2, [r7, #20]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	429a      	cmp	r2, r3
 800129a:	dbf1      	blt.n	8001280 <_write+0x12>
	}
	return len;
 800129c:	687b      	ldr	r3, [r7, #4]
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3718      	adds	r7, #24
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <_close>:

int _close(int file)
{
 80012a6:	b480      	push	{r7}
 80012a8:	b083      	sub	sp, #12
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	6078      	str	r0, [r7, #4]
	return -1;
 80012ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr

080012be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012be:	b480      	push	{r7}
 80012c0:	b083      	sub	sp, #12
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	6078      	str	r0, [r7, #4]
 80012c6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012ce:	605a      	str	r2, [r3, #4]
	return 0;
 80012d0:	2300      	movs	r3, #0
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	370c      	adds	r7, #12
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr

080012de <_isatty>:

int _isatty(int file)
{
 80012de:	b480      	push	{r7}
 80012e0:	b083      	sub	sp, #12
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]
	return 1;
 80012e6:	2301      	movs	r3, #1
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b085      	sub	sp, #20
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	60f8      	str	r0, [r7, #12]
 80012fc:	60b9      	str	r1, [r7, #8]
 80012fe:	607a      	str	r2, [r7, #4]
	return 0;
 8001300:	2300      	movs	r3, #0
}
 8001302:	4618      	mov	r0, r3
 8001304:	3714      	adds	r7, #20
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
	...

08001310 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b086      	sub	sp, #24
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001318:	4a14      	ldr	r2, [pc, #80]	; (800136c <_sbrk+0x5c>)
 800131a:	4b15      	ldr	r3, [pc, #84]	; (8001370 <_sbrk+0x60>)
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001324:	4b13      	ldr	r3, [pc, #76]	; (8001374 <_sbrk+0x64>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d102      	bne.n	8001332 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800132c:	4b11      	ldr	r3, [pc, #68]	; (8001374 <_sbrk+0x64>)
 800132e:	4a12      	ldr	r2, [pc, #72]	; (8001378 <_sbrk+0x68>)
 8001330:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001332:	4b10      	ldr	r3, [pc, #64]	; (8001374 <_sbrk+0x64>)
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4413      	add	r3, r2
 800133a:	693a      	ldr	r2, [r7, #16]
 800133c:	429a      	cmp	r2, r3
 800133e:	d207      	bcs.n	8001350 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001340:	f006 ff6e 	bl	8008220 <__errno>
 8001344:	4603      	mov	r3, r0
 8001346:	220c      	movs	r2, #12
 8001348:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800134a:	f04f 33ff 	mov.w	r3, #4294967295
 800134e:	e009      	b.n	8001364 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001350:	4b08      	ldr	r3, [pc, #32]	; (8001374 <_sbrk+0x64>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001356:	4b07      	ldr	r3, [pc, #28]	; (8001374 <_sbrk+0x64>)
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4413      	add	r3, r2
 800135e:	4a05      	ldr	r2, [pc, #20]	; (8001374 <_sbrk+0x64>)
 8001360:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001362:	68fb      	ldr	r3, [r7, #12]
}
 8001364:	4618      	mov	r0, r3
 8001366:	3718      	adds	r7, #24
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	24080000 	.word	0x24080000
 8001370:	00000400 	.word	0x00000400
 8001374:	24000250 	.word	0x24000250
 8001378:	24000398 	.word	0x24000398

0800137c <initTaskGenerator>:
uint8_t* subRobotM;
uint8_t* subHumanM;
uint8_t* st;
uint8_t* data;

void initTaskGenerator(uint8_t* state, uint8_t* substateRM, uint8_t* substateHM, uint8_t* dataIn){
 800137c:	b580      	push	{r7, lr}
 800137e:	b084      	sub	sp, #16
 8001380:	af00      	add	r7, sp, #0
 8001382:	60f8      	str	r0, [r7, #12]
 8001384:	60b9      	str	r1, [r7, #8]
 8001386:	607a      	str	r2, [r7, #4]
 8001388:	603b      	str	r3, [r7, #0]
	subRobotM = substateRM;
 800138a:	4a0d      	ldr	r2, [pc, #52]	; (80013c0 <initTaskGenerator+0x44>)
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	6013      	str	r3, [r2, #0]
	subHumanM = substateHM;
 8001390:	4a0c      	ldr	r2, [pc, #48]	; (80013c4 <initTaskGenerator+0x48>)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6013      	str	r3, [r2, #0]
	st = state;
 8001396:	4a0c      	ldr	r2, [pc, #48]	; (80013c8 <initTaskGenerator+0x4c>)
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	6013      	str	r3, [r2, #0]
	data = dataIn;
 800139c:	4a0b      	ldr	r2, [pc, #44]	; (80013cc <initTaskGenerator+0x50>)
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	6013      	str	r3, [r2, #0]

	HAL_HSEM_ActivateNotification(HSEM_CM4_DONE_MASK);
 80013a2:	2002      	movs	r0, #2
 80013a4:	f002 f82c 	bl	8003400 <HAL_HSEM_ActivateNotification>
	HAL_HSEM_ActivateNotification(HSEM_COIN_COLUMN_MASK);
 80013a8:	2040      	movs	r0, #64	; 0x40
 80013aa:	f002 f829 	bl	8003400 <HAL_HSEM_ActivateNotification>
	memset(SharedBuf, 0, 10);
 80013ae:	220a      	movs	r2, #10
 80013b0:	2100      	movs	r1, #0
 80013b2:	4807      	ldr	r0, [pc, #28]	; (80013d0 <initTaskGenerator+0x54>)
 80013b4:	f006 ff5e 	bl	8008274 <memset>
}
 80013b8:	bf00      	nop
 80013ba:	3710      	adds	r7, #16
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	24000254 	.word	0x24000254
 80013c4:	24000258 	.word	0x24000258
 80013c8:	2400025c 	.word	0x2400025c
 80013cc:	24000260 	.word	0x24000260
 80013d0:	38000000 	.word	0x38000000

080013d4 <taskToDo>:

void taskToDo(uint8_t task){
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	4603      	mov	r3, r0
 80013dc:	71fb      	strb	r3, [r7, #7]
	if(task == TASK_ROBOT_MOVE){
 80013de:	79fb      	ldrb	r3, [r7, #7]
 80013e0:	2b01      	cmp	r3, #1
 80013e2:	d10f      	bne.n	8001404 <taskToDo+0x30>
		memset(SharedBuf, (int)(data[0]-'0'), 1);
 80013e4:	4b13      	ldr	r3, [pc, #76]	; (8001434 <taskToDo+0x60>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	3b30      	subs	r3, #48	; 0x30
 80013ec:	2201      	movs	r2, #1
 80013ee:	4619      	mov	r1, r3
 80013f0:	4811      	ldr	r0, [pc, #68]	; (8001438 <taskToDo+0x64>)
 80013f2:	f006 ff3f 	bl	8008274 <memset>
		HSEM_TAKE_RELEASE(HSEM_ROBOT_MOVE);
 80013f6:	2002      	movs	r0, #2
 80013f8:	f001 ffd4 	bl	80033a4 <HAL_HSEM_FastTake>
 80013fc:	2100      	movs	r1, #0
 80013fe:	2002      	movs	r0, #2
 8001400:	f001 ffea 	bl	80033d8 <HAL_HSEM_Release>
	}
	if(task == TASK_HUMAN_MOVE){
 8001404:	79fb      	ldrb	r3, [r7, #7]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d106      	bne.n	8001418 <taskToDo+0x44>
		HSEM_TAKE_RELEASE(HSEM_HUMAN_MOVE);
 800140a:	2003      	movs	r0, #3
 800140c:	f001 ffca 	bl	80033a4 <HAL_HSEM_FastTake>
 8001410:	2100      	movs	r1, #0
 8001412:	2003      	movs	r0, #3
 8001414:	f001 ffe0 	bl	80033d8 <HAL_HSEM_Release>
	}
	if(task == TASK_CLEAN_UP){
 8001418:	79fb      	ldrb	r3, [r7, #7]
 800141a:	2b02      	cmp	r3, #2
 800141c:	d106      	bne.n	800142c <taskToDo+0x58>
		HSEM_TAKE_RELEASE(HSEM_CLEAN_UP);
 800141e:	2004      	movs	r0, #4
 8001420:	f001 ffc0 	bl	80033a4 <HAL_HSEM_FastTake>
 8001424:	2100      	movs	r1, #0
 8001426:	2004      	movs	r0, #4
 8001428:	f001 ffd6 	bl	80033d8 <HAL_HSEM_Release>
	}
}
 800142c:	bf00      	nop
 800142e:	3708      	adds	r7, #8
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	24000260 	.word	0x24000260
 8001438:	38000000 	.word	0x38000000

0800143c <HAL_HSEM_FreeCallback>:

void HAL_HSEM_FreeCallback(uint32_t SemMask){
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
	if(SemMask == HSEM_CM4_DONE_MASK){
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2b02      	cmp	r3, #2
 8001448:	d114      	bne.n	8001474 <HAL_HSEM_FreeCallback+0x38>
		if(*st == STATE_INIT){
 800144a:	4b13      	ldr	r3, [pc, #76]	; (8001498 <HAL_HSEM_FreeCallback+0x5c>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d103      	bne.n	800145c <HAL_HSEM_FreeCallback+0x20>
			*st = STATE_START;
 8001454:	4b10      	ldr	r3, [pc, #64]	; (8001498 <HAL_HSEM_FreeCallback+0x5c>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2201      	movs	r2, #1
 800145a:	701a      	strb	r2, [r3, #0]
		}
		if(*st == STATE_ROBOT_MOVE){
 800145c:	4b0e      	ldr	r3, [pc, #56]	; (8001498 <HAL_HSEM_FreeCallback+0x5c>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	2b02      	cmp	r3, #2
 8001464:	d103      	bne.n	800146e <HAL_HSEM_FreeCallback+0x32>
			*subRobotM = SUBSTATE_RM_CM4_DONE;
 8001466:	4b0d      	ldr	r3, [pc, #52]	; (800149c <HAL_HSEM_FreeCallback+0x60>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	2204      	movs	r2, #4
 800146c:	701a      	strb	r2, [r3, #0]
		}
		HAL_HSEM_ActivateNotification(HSEM_CM4_DONE_MASK);
 800146e:	2002      	movs	r0, #2
 8001470:	f001 ffc6 	bl	8003400 <HAL_HSEM_ActivateNotification>
	}
	if(SemMask == HSEM_COIN_COLUMN_MASK){
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2b40      	cmp	r3, #64	; 0x40
 8001478:	d10a      	bne.n	8001490 <HAL_HSEM_FreeCallback+0x54>
		*subHumanM = SUBSTATE_HM_ACTIVATE;
 800147a:	4b09      	ldr	r3, [pc, #36]	; (80014a0 <HAL_HSEM_FreeCallback+0x64>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	2200      	movs	r2, #0
 8001480:	701a      	strb	r2, [r3, #0]
		*st = STATE_ROBOT_MOVE;
 8001482:	4b05      	ldr	r3, [pc, #20]	; (8001498 <HAL_HSEM_FreeCallback+0x5c>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	2202      	movs	r2, #2
 8001488:	701a      	strb	r2, [r3, #0]
		HAL_HSEM_ActivateNotification(HSEM_COIN_COLUMN_MASK);
 800148a:	2040      	movs	r0, #64	; 0x40
 800148c:	f001 ffb8 	bl	8003400 <HAL_HSEM_ActivateNotification>
	}
}
 8001490:	bf00      	nop
 8001492:	3708      	adds	r7, #8
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	2400025c 	.word	0x2400025c
 800149c:	24000254 	.word	0x24000254
 80014a0:	24000258 	.word	0x24000258

080014a4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014a8:	4b22      	ldr	r3, [pc, #136]	; (8001534 <MX_USART1_UART_Init+0x90>)
 80014aa:	4a23      	ldr	r2, [pc, #140]	; (8001538 <MX_USART1_UART_Init+0x94>)
 80014ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80014ae:	4b21      	ldr	r3, [pc, #132]	; (8001534 <MX_USART1_UART_Init+0x90>)
 80014b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014b6:	4b1f      	ldr	r3, [pc, #124]	; (8001534 <MX_USART1_UART_Init+0x90>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014bc:	4b1d      	ldr	r3, [pc, #116]	; (8001534 <MX_USART1_UART_Init+0x90>)
 80014be:	2200      	movs	r2, #0
 80014c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014c2:	4b1c      	ldr	r3, [pc, #112]	; (8001534 <MX_USART1_UART_Init+0x90>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014c8:	4b1a      	ldr	r3, [pc, #104]	; (8001534 <MX_USART1_UART_Init+0x90>)
 80014ca:	220c      	movs	r2, #12
 80014cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014ce:	4b19      	ldr	r3, [pc, #100]	; (8001534 <MX_USART1_UART_Init+0x90>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014d4:	4b17      	ldr	r3, [pc, #92]	; (8001534 <MX_USART1_UART_Init+0x90>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014da:	4b16      	ldr	r3, [pc, #88]	; (8001534 <MX_USART1_UART_Init+0x90>)
 80014dc:	2200      	movs	r2, #0
 80014de:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80014e0:	4b14      	ldr	r3, [pc, #80]	; (8001534 <MX_USART1_UART_Init+0x90>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014e6:	4b13      	ldr	r3, [pc, #76]	; (8001534 <MX_USART1_UART_Init+0x90>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014ec:	4811      	ldr	r0, [pc, #68]	; (8001534 <MX_USART1_UART_Init+0x90>)
 80014ee:	f004 fb2f 	bl	8005b50 <HAL_UART_Init>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80014f8:	f7ff fe09 	bl	800110e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014fc:	2100      	movs	r1, #0
 80014fe:	480d      	ldr	r0, [pc, #52]	; (8001534 <MX_USART1_UART_Init+0x90>)
 8001500:	f006 fdc3 	bl	800808a <HAL_UARTEx_SetTxFifoThreshold>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800150a:	f7ff fe00 	bl	800110e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800150e:	2100      	movs	r1, #0
 8001510:	4808      	ldr	r0, [pc, #32]	; (8001534 <MX_USART1_UART_Init+0x90>)
 8001512:	f006 fdf8 	bl	8008106 <HAL_UARTEx_SetRxFifoThreshold>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800151c:	f7ff fdf7 	bl	800110e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001520:	4804      	ldr	r0, [pc, #16]	; (8001534 <MX_USART1_UART_Init+0x90>)
 8001522:	f006 fd79 	bl	8008018 <HAL_UARTEx_DisableFifoMode>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800152c:	f7ff fdef 	bl	800110e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001530:	bf00      	nop
 8001532:	bd80      	pop	{r7, pc}
 8001534:	24000264 	.word	0x24000264
 8001538:	40011000 	.word	0x40011000

0800153c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001540:	4b22      	ldr	r3, [pc, #136]	; (80015cc <MX_USART3_UART_Init+0x90>)
 8001542:	4a23      	ldr	r2, [pc, #140]	; (80015d0 <MX_USART3_UART_Init+0x94>)
 8001544:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001546:	4b21      	ldr	r3, [pc, #132]	; (80015cc <MX_USART3_UART_Init+0x90>)
 8001548:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800154c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800154e:	4b1f      	ldr	r3, [pc, #124]	; (80015cc <MX_USART3_UART_Init+0x90>)
 8001550:	2200      	movs	r2, #0
 8001552:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001554:	4b1d      	ldr	r3, [pc, #116]	; (80015cc <MX_USART3_UART_Init+0x90>)
 8001556:	2200      	movs	r2, #0
 8001558:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800155a:	4b1c      	ldr	r3, [pc, #112]	; (80015cc <MX_USART3_UART_Init+0x90>)
 800155c:	2200      	movs	r2, #0
 800155e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001560:	4b1a      	ldr	r3, [pc, #104]	; (80015cc <MX_USART3_UART_Init+0x90>)
 8001562:	220c      	movs	r2, #12
 8001564:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001566:	4b19      	ldr	r3, [pc, #100]	; (80015cc <MX_USART3_UART_Init+0x90>)
 8001568:	2200      	movs	r2, #0
 800156a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800156c:	4b17      	ldr	r3, [pc, #92]	; (80015cc <MX_USART3_UART_Init+0x90>)
 800156e:	2200      	movs	r2, #0
 8001570:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001572:	4b16      	ldr	r3, [pc, #88]	; (80015cc <MX_USART3_UART_Init+0x90>)
 8001574:	2200      	movs	r2, #0
 8001576:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001578:	4b14      	ldr	r3, [pc, #80]	; (80015cc <MX_USART3_UART_Init+0x90>)
 800157a:	2200      	movs	r2, #0
 800157c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800157e:	4b13      	ldr	r3, [pc, #76]	; (80015cc <MX_USART3_UART_Init+0x90>)
 8001580:	2200      	movs	r2, #0
 8001582:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001584:	4811      	ldr	r0, [pc, #68]	; (80015cc <MX_USART3_UART_Init+0x90>)
 8001586:	f004 fae3 	bl	8005b50 <HAL_UART_Init>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001590:	f7ff fdbd 	bl	800110e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001594:	2100      	movs	r1, #0
 8001596:	480d      	ldr	r0, [pc, #52]	; (80015cc <MX_USART3_UART_Init+0x90>)
 8001598:	f006 fd77 	bl	800808a <HAL_UARTEx_SetTxFifoThreshold>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80015a2:	f7ff fdb4 	bl	800110e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015a6:	2100      	movs	r1, #0
 80015a8:	4808      	ldr	r0, [pc, #32]	; (80015cc <MX_USART3_UART_Init+0x90>)
 80015aa:	f006 fdac 	bl	8008106 <HAL_UARTEx_SetRxFifoThreshold>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80015b4:	f7ff fdab 	bl	800110e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80015b8:	4804      	ldr	r0, [pc, #16]	; (80015cc <MX_USART3_UART_Init+0x90>)
 80015ba:	f006 fd2d 	bl	8008018 <HAL_UARTEx_DisableFifoMode>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80015c4:	f7ff fda3 	bl	800110e <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80015c8:	bf00      	nop
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	240002f4 	.word	0x240002f4
 80015d0:	40004800 	.word	0x40004800

080015d4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b0ba      	sub	sp, #232	; 0xe8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015dc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	605a      	str	r2, [r3, #4]
 80015e6:	609a      	str	r2, [r3, #8]
 80015e8:	60da      	str	r2, [r3, #12]
 80015ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015ec:	f107 0318 	add.w	r3, r7, #24
 80015f0:	22bc      	movs	r2, #188	; 0xbc
 80015f2:	2100      	movs	r1, #0
 80015f4:	4618      	mov	r0, r3
 80015f6:	f006 fe3d 	bl	8008274 <memset>
  if(uartHandle->Instance==USART1)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a5b      	ldr	r2, [pc, #364]	; (800176c <HAL_UART_MspInit+0x198>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d15f      	bne.n	80016c4 <HAL_UART_MspInit+0xf0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001604:	2301      	movs	r3, #1
 8001606:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001608:	2300      	movs	r3, #0
 800160a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800160e:	f107 0318 	add.w	r3, r7, #24
 8001612:	4618      	mov	r0, r3
 8001614:	f002 ff34 	bl	8004480 <HAL_RCCEx_PeriphCLKConfig>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800161e:	f7ff fd76 	bl	800110e <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001622:	4b53      	ldr	r3, [pc, #332]	; (8001770 <HAL_UART_MspInit+0x19c>)
 8001624:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001628:	4a51      	ldr	r2, [pc, #324]	; (8001770 <HAL_UART_MspInit+0x19c>)
 800162a:	f043 0310 	orr.w	r3, r3, #16
 800162e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001632:	4b4f      	ldr	r3, [pc, #316]	; (8001770 <HAL_UART_MspInit+0x19c>)
 8001634:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001638:	f003 0310 	and.w	r3, r3, #16
 800163c:	617b      	str	r3, [r7, #20]
 800163e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001640:	4b4b      	ldr	r3, [pc, #300]	; (8001770 <HAL_UART_MspInit+0x19c>)
 8001642:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001646:	4a4a      	ldr	r2, [pc, #296]	; (8001770 <HAL_UART_MspInit+0x19c>)
 8001648:	f043 0302 	orr.w	r3, r3, #2
 800164c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001650:	4b47      	ldr	r3, [pc, #284]	; (8001770 <HAL_UART_MspInit+0x19c>)
 8001652:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001656:	f003 0302 	and.w	r3, r3, #2
 800165a:	613b      	str	r3, [r7, #16]
 800165c:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800165e:	2340      	movs	r3, #64	; 0x40
 8001660:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001664:	2302      	movs	r3, #2
 8001666:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166a:	2300      	movs	r3, #0
 800166c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001670:	2300      	movs	r3, #0
 8001672:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001676:	2307      	movs	r3, #7
 8001678:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800167c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001680:	4619      	mov	r1, r3
 8001682:	483c      	ldr	r0, [pc, #240]	; (8001774 <HAL_UART_MspInit+0x1a0>)
 8001684:	f001 fc90 	bl	8002fa8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001688:	2380      	movs	r3, #128	; 0x80
 800168a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800168e:	2302      	movs	r3, #2
 8001690:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001694:	2301      	movs	r3, #1
 8001696:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800169a:	2300      	movs	r3, #0
 800169c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80016a0:	2307      	movs	r3, #7
 80016a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016a6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80016aa:	4619      	mov	r1, r3
 80016ac:	4831      	ldr	r0, [pc, #196]	; (8001774 <HAL_UART_MspInit+0x1a0>)
 80016ae:	f001 fc7b 	bl	8002fa8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80016b2:	2200      	movs	r2, #0
 80016b4:	2100      	movs	r1, #0
 80016b6:	2025      	movs	r0, #37	; 0x25
 80016b8:	f000 fa3d 	bl	8001b36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80016bc:	2025      	movs	r0, #37	; 0x25
 80016be:	f000 fa54 	bl	8001b6a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80016c2:	e04f      	b.n	8001764 <HAL_UART_MspInit+0x190>
  else if(uartHandle->Instance==USART3)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a2b      	ldr	r2, [pc, #172]	; (8001778 <HAL_UART_MspInit+0x1a4>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d14a      	bne.n	8001764 <HAL_UART_MspInit+0x190>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80016ce:	2302      	movs	r3, #2
 80016d0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80016d2:	2300      	movs	r3, #0
 80016d4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016d8:	f107 0318 	add.w	r3, r7, #24
 80016dc:	4618      	mov	r0, r3
 80016de:	f002 fecf 	bl	8004480 <HAL_RCCEx_PeriphCLKConfig>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <HAL_UART_MspInit+0x118>
      Error_Handler();
 80016e8:	f7ff fd11 	bl	800110e <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80016ec:	4b20      	ldr	r3, [pc, #128]	; (8001770 <HAL_UART_MspInit+0x19c>)
 80016ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80016f2:	4a1f      	ldr	r2, [pc, #124]	; (8001770 <HAL_UART_MspInit+0x19c>)
 80016f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016f8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80016fc:	4b1c      	ldr	r3, [pc, #112]	; (8001770 <HAL_UART_MspInit+0x19c>)
 80016fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001702:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001706:	60fb      	str	r3, [r7, #12]
 8001708:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800170a:	4b19      	ldr	r3, [pc, #100]	; (8001770 <HAL_UART_MspInit+0x19c>)
 800170c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001710:	4a17      	ldr	r2, [pc, #92]	; (8001770 <HAL_UART_MspInit+0x19c>)
 8001712:	f043 0308 	orr.w	r3, r3, #8
 8001716:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800171a:	4b15      	ldr	r3, [pc, #84]	; (8001770 <HAL_UART_MspInit+0x19c>)
 800171c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001720:	f003 0308 	and.w	r3, r3, #8
 8001724:	60bb      	str	r3, [r7, #8]
 8001726:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001728:	f44f 7340 	mov.w	r3, #768	; 0x300
 800172c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001730:	2302      	movs	r3, #2
 8001732:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001736:	2300      	movs	r3, #0
 8001738:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173c:	2300      	movs	r3, #0
 800173e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001742:	2307      	movs	r3, #7
 8001744:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001748:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800174c:	4619      	mov	r1, r3
 800174e:	480b      	ldr	r0, [pc, #44]	; (800177c <HAL_UART_MspInit+0x1a8>)
 8001750:	f001 fc2a 	bl	8002fa8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001754:	2200      	movs	r2, #0
 8001756:	2100      	movs	r1, #0
 8001758:	2027      	movs	r0, #39	; 0x27
 800175a:	f000 f9ec 	bl	8001b36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800175e:	2027      	movs	r0, #39	; 0x27
 8001760:	f000 fa03 	bl	8001b6a <HAL_NVIC_EnableIRQ>
}
 8001764:	bf00      	nop
 8001766:	37e8      	adds	r7, #232	; 0xe8
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	40011000 	.word	0x40011000
 8001770:	58024400 	.word	0x58024400
 8001774:	58020400 	.word	0x58020400
 8001778:	40004800 	.word	0x40004800
 800177c:	58020c00 	.word	0x58020c00

08001780 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001780:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017b8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001784:	f7fe ff86 	bl	8000694 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001788:	480c      	ldr	r0, [pc, #48]	; (80017bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800178a:	490d      	ldr	r1, [pc, #52]	; (80017c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800178c:	4a0d      	ldr	r2, [pc, #52]	; (80017c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800178e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001790:	e002      	b.n	8001798 <LoopCopyDataInit>

08001792 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001792:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001794:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001796:	3304      	adds	r3, #4

08001798 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001798:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800179a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800179c:	d3f9      	bcc.n	8001792 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800179e:	4a0a      	ldr	r2, [pc, #40]	; (80017c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017a0:	4c0a      	ldr	r4, [pc, #40]	; (80017cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80017a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017a4:	e001      	b.n	80017aa <LoopFillZerobss>

080017a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017a8:	3204      	adds	r2, #4

080017aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017ac:	d3fb      	bcc.n	80017a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017ae:	f006 fd3d 	bl	800822c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017b2:	f7ff fa71 	bl	8000c98 <main>
  bx  lr
 80017b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80017b8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80017bc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80017c0:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 80017c4:	08009a30 	.word	0x08009a30
  ldr r2, =_sbss
 80017c8:	24000134 	.word	0x24000134
  ldr r4, =_ebss
 80017cc:	24000398 	.word	0x24000398

080017d0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017d0:	e7fe      	b.n	80017d0 <ADC3_IRQHandler>
	...

080017d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017da:	2003      	movs	r0, #3
 80017dc:	f000 f9a0 	bl	8001b20 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80017e0:	f002 fc78 	bl	80040d4 <HAL_RCC_GetSysClockFreq>
 80017e4:	4602      	mov	r2, r0
 80017e6:	4b15      	ldr	r3, [pc, #84]	; (800183c <HAL_Init+0x68>)
 80017e8:	699b      	ldr	r3, [r3, #24]
 80017ea:	0a1b      	lsrs	r3, r3, #8
 80017ec:	f003 030f 	and.w	r3, r3, #15
 80017f0:	4913      	ldr	r1, [pc, #76]	; (8001840 <HAL_Init+0x6c>)
 80017f2:	5ccb      	ldrb	r3, [r1, r3]
 80017f4:	f003 031f 	and.w	r3, r3, #31
 80017f8:	fa22 f303 	lsr.w	r3, r2, r3
 80017fc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80017fe:	4b0f      	ldr	r3, [pc, #60]	; (800183c <HAL_Init+0x68>)
 8001800:	699b      	ldr	r3, [r3, #24]
 8001802:	f003 030f 	and.w	r3, r3, #15
 8001806:	4a0e      	ldr	r2, [pc, #56]	; (8001840 <HAL_Init+0x6c>)
 8001808:	5cd3      	ldrb	r3, [r2, r3]
 800180a:	f003 031f 	and.w	r3, r3, #31
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	fa22 f303 	lsr.w	r3, r2, r3
 8001814:	4a0b      	ldr	r2, [pc, #44]	; (8001844 <HAL_Init+0x70>)
 8001816:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001818:	4a0b      	ldr	r2, [pc, #44]	; (8001848 <HAL_Init+0x74>)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800181e:	2000      	movs	r0, #0
 8001820:	f000 f814 	bl	800184c <HAL_InitTick>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e002      	b.n	8001834 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800182e:	f7ff fc73 	bl	8001118 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001832:	2300      	movs	r3, #0
}
 8001834:	4618      	mov	r0, r3
 8001836:	3708      	adds	r7, #8
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	58024400 	.word	0x58024400
 8001840:	080098a0 	.word	0x080098a0
 8001844:	24000004 	.word	0x24000004
 8001848:	24000000 	.word	0x24000000

0800184c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001854:	4b15      	ldr	r3, [pc, #84]	; (80018ac <HAL_InitTick+0x60>)
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d101      	bne.n	8001860 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	e021      	b.n	80018a4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001860:	4b13      	ldr	r3, [pc, #76]	; (80018b0 <HAL_InitTick+0x64>)
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	4b11      	ldr	r3, [pc, #68]	; (80018ac <HAL_InitTick+0x60>)
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	4619      	mov	r1, r3
 800186a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800186e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001872:	fbb2 f3f3 	udiv	r3, r2, r3
 8001876:	4618      	mov	r0, r3
 8001878:	f000 f985 	bl	8001b86 <HAL_SYSTICK_Config>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e00e      	b.n	80018a4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2b0f      	cmp	r3, #15
 800188a:	d80a      	bhi.n	80018a2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800188c:	2200      	movs	r2, #0
 800188e:	6879      	ldr	r1, [r7, #4]
 8001890:	f04f 30ff 	mov.w	r0, #4294967295
 8001894:	f000 f94f 	bl	8001b36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001898:	4a06      	ldr	r2, [pc, #24]	; (80018b4 <HAL_InitTick+0x68>)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800189e:	2300      	movs	r3, #0
 80018a0:	e000      	b.n	80018a4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3708      	adds	r7, #8
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	2400000c 	.word	0x2400000c
 80018b0:	24000000 	.word	0x24000000
 80018b4:	24000008 	.word	0x24000008

080018b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018bc:	4b06      	ldr	r3, [pc, #24]	; (80018d8 <HAL_IncTick+0x20>)
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	461a      	mov	r2, r3
 80018c2:	4b06      	ldr	r3, [pc, #24]	; (80018dc <HAL_IncTick+0x24>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4413      	add	r3, r2
 80018c8:	4a04      	ldr	r2, [pc, #16]	; (80018dc <HAL_IncTick+0x24>)
 80018ca:	6013      	str	r3, [r2, #0]
}
 80018cc:	bf00      	nop
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	2400000c 	.word	0x2400000c
 80018dc:	24000384 	.word	0x24000384

080018e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  return uwTick;
 80018e4:	4b03      	ldr	r3, [pc, #12]	; (80018f4 <HAL_GetTick+0x14>)
 80018e6:	681b      	ldr	r3, [r3, #0]
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	24000384 	.word	0x24000384

080018f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001900:	f7ff ffee 	bl	80018e0 <HAL_GetTick>
 8001904:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001910:	d005      	beq.n	800191e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001912:	4b0a      	ldr	r3, [pc, #40]	; (800193c <HAL_Delay+0x44>)
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	461a      	mov	r2, r3
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	4413      	add	r3, r2
 800191c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800191e:	bf00      	nop
 8001920:	f7ff ffde 	bl	80018e0 <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	68fa      	ldr	r2, [r7, #12]
 800192c:	429a      	cmp	r2, r3
 800192e:	d8f7      	bhi.n	8001920 <HAL_Delay+0x28>
  {
  }
}
 8001930:	bf00      	nop
 8001932:	bf00      	nop
 8001934:	3710      	adds	r7, #16
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	2400000c 	.word	0x2400000c

08001940 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001944:	4b03      	ldr	r3, [pc, #12]	; (8001954 <HAL_GetREVID+0x14>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	0c1b      	lsrs	r3, r3, #16
}
 800194a:	4618      	mov	r0, r3
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr
 8001954:	5c001000 	.word	0x5c001000

08001958 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001960:	4b06      	ldr	r3, [pc, #24]	; (800197c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001968:	4904      	ldr	r1, [pc, #16]	; (800197c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4313      	orrs	r3, r2
 800196e:	604b      	str	r3, [r1, #4]
}
 8001970:	bf00      	nop
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr
 800197c:	58000400 	.word	0x58000400

08001980 <__NVIC_SetPriorityGrouping>:
{
 8001980:	b480      	push	{r7}
 8001982:	b085      	sub	sp, #20
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	f003 0307 	and.w	r3, r3, #7
 800198e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001990:	4b0b      	ldr	r3, [pc, #44]	; (80019c0 <__NVIC_SetPriorityGrouping+0x40>)
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001996:	68ba      	ldr	r2, [r7, #8]
 8001998:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800199c:	4013      	ands	r3, r2
 800199e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80019a8:	4b06      	ldr	r3, [pc, #24]	; (80019c4 <__NVIC_SetPriorityGrouping+0x44>)
 80019aa:	4313      	orrs	r3, r2
 80019ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019ae:	4a04      	ldr	r2, [pc, #16]	; (80019c0 <__NVIC_SetPriorityGrouping+0x40>)
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	60d3      	str	r3, [r2, #12]
}
 80019b4:	bf00      	nop
 80019b6:	3714      	adds	r7, #20
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr
 80019c0:	e000ed00 	.word	0xe000ed00
 80019c4:	05fa0000 	.word	0x05fa0000

080019c8 <__NVIC_GetPriorityGrouping>:
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019cc:	4b04      	ldr	r3, [pc, #16]	; (80019e0 <__NVIC_GetPriorityGrouping+0x18>)
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	0a1b      	lsrs	r3, r3, #8
 80019d2:	f003 0307 	and.w	r3, r3, #7
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr
 80019e0:	e000ed00 	.word	0xe000ed00

080019e4 <__NVIC_EnableIRQ>:
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	4603      	mov	r3, r0
 80019ec:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80019ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	db0b      	blt.n	8001a0e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019f6:	88fb      	ldrh	r3, [r7, #6]
 80019f8:	f003 021f 	and.w	r2, r3, #31
 80019fc:	4907      	ldr	r1, [pc, #28]	; (8001a1c <__NVIC_EnableIRQ+0x38>)
 80019fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a02:	095b      	lsrs	r3, r3, #5
 8001a04:	2001      	movs	r0, #1
 8001a06:	fa00 f202 	lsl.w	r2, r0, r2
 8001a0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001a0e:	bf00      	nop
 8001a10:	370c      	adds	r7, #12
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	e000e100 	.word	0xe000e100

08001a20 <__NVIC_SetPriority>:
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	4603      	mov	r3, r0
 8001a28:	6039      	str	r1, [r7, #0]
 8001a2a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001a2c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	db0a      	blt.n	8001a4a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	b2da      	uxtb	r2, r3
 8001a38:	490c      	ldr	r1, [pc, #48]	; (8001a6c <__NVIC_SetPriority+0x4c>)
 8001a3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a3e:	0112      	lsls	r2, r2, #4
 8001a40:	b2d2      	uxtb	r2, r2
 8001a42:	440b      	add	r3, r1
 8001a44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001a48:	e00a      	b.n	8001a60 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	b2da      	uxtb	r2, r3
 8001a4e:	4908      	ldr	r1, [pc, #32]	; (8001a70 <__NVIC_SetPriority+0x50>)
 8001a50:	88fb      	ldrh	r3, [r7, #6]
 8001a52:	f003 030f 	and.w	r3, r3, #15
 8001a56:	3b04      	subs	r3, #4
 8001a58:	0112      	lsls	r2, r2, #4
 8001a5a:	b2d2      	uxtb	r2, r2
 8001a5c:	440b      	add	r3, r1
 8001a5e:	761a      	strb	r2, [r3, #24]
}
 8001a60:	bf00      	nop
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr
 8001a6c:	e000e100 	.word	0xe000e100
 8001a70:	e000ed00 	.word	0xe000ed00

08001a74 <NVIC_EncodePriority>:
{
 8001a74:	b480      	push	{r7}
 8001a76:	b089      	sub	sp, #36	; 0x24
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	60f8      	str	r0, [r7, #12]
 8001a7c:	60b9      	str	r1, [r7, #8]
 8001a7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	f003 0307 	and.w	r3, r3, #7
 8001a86:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	f1c3 0307 	rsb	r3, r3, #7
 8001a8e:	2b04      	cmp	r3, #4
 8001a90:	bf28      	it	cs
 8001a92:	2304      	movcs	r3, #4
 8001a94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	3304      	adds	r3, #4
 8001a9a:	2b06      	cmp	r3, #6
 8001a9c:	d902      	bls.n	8001aa4 <NVIC_EncodePriority+0x30>
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	3b03      	subs	r3, #3
 8001aa2:	e000      	b.n	8001aa6 <NVIC_EncodePriority+0x32>
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8001aac:	69bb      	ldr	r3, [r7, #24]
 8001aae:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab2:	43da      	mvns	r2, r3
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	401a      	ands	r2, r3
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001abc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ac6:	43d9      	mvns	r1, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001acc:	4313      	orrs	r3, r2
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3724      	adds	r7, #36	; 0x24
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
	...

08001adc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	3b01      	subs	r3, #1
 8001ae8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001aec:	d301      	bcc.n	8001af2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aee:	2301      	movs	r3, #1
 8001af0:	e00f      	b.n	8001b12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001af2:	4a0a      	ldr	r2, [pc, #40]	; (8001b1c <SysTick_Config+0x40>)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	3b01      	subs	r3, #1
 8001af8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001afa:	210f      	movs	r1, #15
 8001afc:	f04f 30ff 	mov.w	r0, #4294967295
 8001b00:	f7ff ff8e 	bl	8001a20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b04:	4b05      	ldr	r3, [pc, #20]	; (8001b1c <SysTick_Config+0x40>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b0a:	4b04      	ldr	r3, [pc, #16]	; (8001b1c <SysTick_Config+0x40>)
 8001b0c:	2207      	movs	r2, #7
 8001b0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b10:	2300      	movs	r3, #0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	e000e010 	.word	0xe000e010

08001b20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	f7ff ff29 	bl	8001980 <__NVIC_SetPriorityGrouping>
}
 8001b2e:	bf00      	nop
 8001b30:	3708      	adds	r7, #8
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}

08001b36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b36:	b580      	push	{r7, lr}
 8001b38:	b086      	sub	sp, #24
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	60b9      	str	r1, [r7, #8]
 8001b40:	607a      	str	r2, [r7, #4]
 8001b42:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b44:	f7ff ff40 	bl	80019c8 <__NVIC_GetPriorityGrouping>
 8001b48:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b4a:	687a      	ldr	r2, [r7, #4]
 8001b4c:	68b9      	ldr	r1, [r7, #8]
 8001b4e:	6978      	ldr	r0, [r7, #20]
 8001b50:	f7ff ff90 	bl	8001a74 <NVIC_EncodePriority>
 8001b54:	4602      	mov	r2, r0
 8001b56:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b5a:	4611      	mov	r1, r2
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7ff ff5f 	bl	8001a20 <__NVIC_SetPriority>
}
 8001b62:	bf00      	nop
 8001b64:	3718      	adds	r7, #24
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}

08001b6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b6a:	b580      	push	{r7, lr}
 8001b6c:	b082      	sub	sp, #8
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	4603      	mov	r3, r0
 8001b72:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7ff ff33 	bl	80019e4 <__NVIC_EnableIRQ>
}
 8001b7e:	bf00      	nop
 8001b80:	3708      	adds	r7, #8
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b082      	sub	sp, #8
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f7ff ffa4 	bl	8001adc <SysTick_Config>
 8001b94:	4603      	mov	r3, r0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
	...

08001ba0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001ba4:	f3bf 8f5f 	dmb	sy
}
 8001ba8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001baa:	4b07      	ldr	r3, [pc, #28]	; (8001bc8 <HAL_MPU_Disable+0x28>)
 8001bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bae:	4a06      	ldr	r2, [pc, #24]	; (8001bc8 <HAL_MPU_Disable+0x28>)
 8001bb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bb4:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001bb6:	4b05      	ldr	r3, [pc, #20]	; (8001bcc <HAL_MPU_Disable+0x2c>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	605a      	str	r2, [r3, #4]
}
 8001bbc:	bf00      	nop
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	e000ed00 	.word	0xe000ed00
 8001bcc:	e000ed90 	.word	0xe000ed90

08001bd0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001bd8:	4a0b      	ldr	r2, [pc, #44]	; (8001c08 <HAL_MPU_Enable+0x38>)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f043 0301 	orr.w	r3, r3, #1
 8001be0:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001be2:	4b0a      	ldr	r3, [pc, #40]	; (8001c0c <HAL_MPU_Enable+0x3c>)
 8001be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be6:	4a09      	ldr	r2, [pc, #36]	; (8001c0c <HAL_MPU_Enable+0x3c>)
 8001be8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bec:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001bee:	f3bf 8f4f 	dsb	sy
}
 8001bf2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001bf4:	f3bf 8f6f 	isb	sy
}
 8001bf8:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001bfa:	bf00      	nop
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	e000ed90 	.word	0xe000ed90
 8001c0c:	e000ed00 	.word	0xe000ed00

08001c10 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	785a      	ldrb	r2, [r3, #1]
 8001c1c:	4b1d      	ldr	r3, [pc, #116]	; (8001c94 <HAL_MPU_ConfigRegion+0x84>)
 8001c1e:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d029      	beq.n	8001c7c <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8001c28:	4a1a      	ldr	r2, [pc, #104]	; (8001c94 <HAL_MPU_ConfigRegion+0x84>)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	7b1b      	ldrb	r3, [r3, #12]
 8001c34:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	7adb      	ldrb	r3, [r3, #11]
 8001c3a:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001c3c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	7a9b      	ldrb	r3, [r3, #10]
 8001c42:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001c44:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	7b5b      	ldrb	r3, [r3, #13]
 8001c4a:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001c4c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	7b9b      	ldrb	r3, [r3, #14]
 8001c52:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001c54:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	7bdb      	ldrb	r3, [r3, #15]
 8001c5a:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001c5c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	7a5b      	ldrb	r3, [r3, #9]
 8001c62:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001c64:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	7a1b      	ldrb	r3, [r3, #8]
 8001c6a:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001c6c:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001c6e:	687a      	ldr	r2, [r7, #4]
 8001c70:	7812      	ldrb	r2, [r2, #0]
 8001c72:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001c74:	4a07      	ldr	r2, [pc, #28]	; (8001c94 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001c76:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001c78:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8001c7a:	e005      	b.n	8001c88 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8001c7c:	4b05      	ldr	r3, [pc, #20]	; (8001c94 <HAL_MPU_ConfigRegion+0x84>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8001c82:	4b04      	ldr	r3, [pc, #16]	; (8001c94 <HAL_MPU_ConfigRegion+0x84>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	611a      	str	r2, [r3, #16]
}
 8001c88:	bf00      	nop
 8001c8a:	370c      	adds	r7, #12
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr
 8001c94:	e000ed90 	.word	0xe000ed90

08001c98 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b086      	sub	sp, #24
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001ca0:	f7ff fe1e 	bl	80018e0 <HAL_GetTick>
 8001ca4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d101      	bne.n	8001cb0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	e2dc      	b.n	800226a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	d008      	beq.n	8001cce <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2280      	movs	r2, #128	; 0x80
 8001cc0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e2cd      	b.n	800226a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a76      	ldr	r2, [pc, #472]	; (8001eac <HAL_DMA_Abort+0x214>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d04a      	beq.n	8001d6e <HAL_DMA_Abort+0xd6>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a74      	ldr	r2, [pc, #464]	; (8001eb0 <HAL_DMA_Abort+0x218>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d045      	beq.n	8001d6e <HAL_DMA_Abort+0xd6>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a73      	ldr	r2, [pc, #460]	; (8001eb4 <HAL_DMA_Abort+0x21c>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d040      	beq.n	8001d6e <HAL_DMA_Abort+0xd6>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a71      	ldr	r2, [pc, #452]	; (8001eb8 <HAL_DMA_Abort+0x220>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d03b      	beq.n	8001d6e <HAL_DMA_Abort+0xd6>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a70      	ldr	r2, [pc, #448]	; (8001ebc <HAL_DMA_Abort+0x224>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d036      	beq.n	8001d6e <HAL_DMA_Abort+0xd6>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a6e      	ldr	r2, [pc, #440]	; (8001ec0 <HAL_DMA_Abort+0x228>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d031      	beq.n	8001d6e <HAL_DMA_Abort+0xd6>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a6d      	ldr	r2, [pc, #436]	; (8001ec4 <HAL_DMA_Abort+0x22c>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d02c      	beq.n	8001d6e <HAL_DMA_Abort+0xd6>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a6b      	ldr	r2, [pc, #428]	; (8001ec8 <HAL_DMA_Abort+0x230>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d027      	beq.n	8001d6e <HAL_DMA_Abort+0xd6>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a6a      	ldr	r2, [pc, #424]	; (8001ecc <HAL_DMA_Abort+0x234>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d022      	beq.n	8001d6e <HAL_DMA_Abort+0xd6>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a68      	ldr	r2, [pc, #416]	; (8001ed0 <HAL_DMA_Abort+0x238>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d01d      	beq.n	8001d6e <HAL_DMA_Abort+0xd6>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a67      	ldr	r2, [pc, #412]	; (8001ed4 <HAL_DMA_Abort+0x23c>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d018      	beq.n	8001d6e <HAL_DMA_Abort+0xd6>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a65      	ldr	r2, [pc, #404]	; (8001ed8 <HAL_DMA_Abort+0x240>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d013      	beq.n	8001d6e <HAL_DMA_Abort+0xd6>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a64      	ldr	r2, [pc, #400]	; (8001edc <HAL_DMA_Abort+0x244>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d00e      	beq.n	8001d6e <HAL_DMA_Abort+0xd6>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a62      	ldr	r2, [pc, #392]	; (8001ee0 <HAL_DMA_Abort+0x248>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d009      	beq.n	8001d6e <HAL_DMA_Abort+0xd6>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a61      	ldr	r2, [pc, #388]	; (8001ee4 <HAL_DMA_Abort+0x24c>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d004      	beq.n	8001d6e <HAL_DMA_Abort+0xd6>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a5f      	ldr	r2, [pc, #380]	; (8001ee8 <HAL_DMA_Abort+0x250>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d101      	bne.n	8001d72 <HAL_DMA_Abort+0xda>
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e000      	b.n	8001d74 <HAL_DMA_Abort+0xdc>
 8001d72:	2300      	movs	r3, #0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d013      	beq.n	8001da0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f022 021e 	bic.w	r2, r2, #30
 8001d86:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	695a      	ldr	r2, [r3, #20]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d96:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	617b      	str	r3, [r7, #20]
 8001d9e:	e00a      	b.n	8001db6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f022 020e 	bic.w	r2, r2, #14
 8001dae:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a3c      	ldr	r2, [pc, #240]	; (8001eac <HAL_DMA_Abort+0x214>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d072      	beq.n	8001ea6 <HAL_DMA_Abort+0x20e>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a3a      	ldr	r2, [pc, #232]	; (8001eb0 <HAL_DMA_Abort+0x218>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d06d      	beq.n	8001ea6 <HAL_DMA_Abort+0x20e>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a39      	ldr	r2, [pc, #228]	; (8001eb4 <HAL_DMA_Abort+0x21c>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d068      	beq.n	8001ea6 <HAL_DMA_Abort+0x20e>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a37      	ldr	r2, [pc, #220]	; (8001eb8 <HAL_DMA_Abort+0x220>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d063      	beq.n	8001ea6 <HAL_DMA_Abort+0x20e>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a36      	ldr	r2, [pc, #216]	; (8001ebc <HAL_DMA_Abort+0x224>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d05e      	beq.n	8001ea6 <HAL_DMA_Abort+0x20e>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a34      	ldr	r2, [pc, #208]	; (8001ec0 <HAL_DMA_Abort+0x228>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d059      	beq.n	8001ea6 <HAL_DMA_Abort+0x20e>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a33      	ldr	r2, [pc, #204]	; (8001ec4 <HAL_DMA_Abort+0x22c>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d054      	beq.n	8001ea6 <HAL_DMA_Abort+0x20e>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a31      	ldr	r2, [pc, #196]	; (8001ec8 <HAL_DMA_Abort+0x230>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d04f      	beq.n	8001ea6 <HAL_DMA_Abort+0x20e>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a30      	ldr	r2, [pc, #192]	; (8001ecc <HAL_DMA_Abort+0x234>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d04a      	beq.n	8001ea6 <HAL_DMA_Abort+0x20e>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a2e      	ldr	r2, [pc, #184]	; (8001ed0 <HAL_DMA_Abort+0x238>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d045      	beq.n	8001ea6 <HAL_DMA_Abort+0x20e>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a2d      	ldr	r2, [pc, #180]	; (8001ed4 <HAL_DMA_Abort+0x23c>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d040      	beq.n	8001ea6 <HAL_DMA_Abort+0x20e>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a2b      	ldr	r2, [pc, #172]	; (8001ed8 <HAL_DMA_Abort+0x240>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d03b      	beq.n	8001ea6 <HAL_DMA_Abort+0x20e>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a2a      	ldr	r2, [pc, #168]	; (8001edc <HAL_DMA_Abort+0x244>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d036      	beq.n	8001ea6 <HAL_DMA_Abort+0x20e>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a28      	ldr	r2, [pc, #160]	; (8001ee0 <HAL_DMA_Abort+0x248>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d031      	beq.n	8001ea6 <HAL_DMA_Abort+0x20e>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a27      	ldr	r2, [pc, #156]	; (8001ee4 <HAL_DMA_Abort+0x24c>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d02c      	beq.n	8001ea6 <HAL_DMA_Abort+0x20e>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a25      	ldr	r2, [pc, #148]	; (8001ee8 <HAL_DMA_Abort+0x250>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d027      	beq.n	8001ea6 <HAL_DMA_Abort+0x20e>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a24      	ldr	r2, [pc, #144]	; (8001eec <HAL_DMA_Abort+0x254>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d022      	beq.n	8001ea6 <HAL_DMA_Abort+0x20e>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a22      	ldr	r2, [pc, #136]	; (8001ef0 <HAL_DMA_Abort+0x258>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d01d      	beq.n	8001ea6 <HAL_DMA_Abort+0x20e>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a21      	ldr	r2, [pc, #132]	; (8001ef4 <HAL_DMA_Abort+0x25c>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d018      	beq.n	8001ea6 <HAL_DMA_Abort+0x20e>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a1f      	ldr	r2, [pc, #124]	; (8001ef8 <HAL_DMA_Abort+0x260>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d013      	beq.n	8001ea6 <HAL_DMA_Abort+0x20e>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a1e      	ldr	r2, [pc, #120]	; (8001efc <HAL_DMA_Abort+0x264>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d00e      	beq.n	8001ea6 <HAL_DMA_Abort+0x20e>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a1c      	ldr	r2, [pc, #112]	; (8001f00 <HAL_DMA_Abort+0x268>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d009      	beq.n	8001ea6 <HAL_DMA_Abort+0x20e>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a1b      	ldr	r2, [pc, #108]	; (8001f04 <HAL_DMA_Abort+0x26c>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d004      	beq.n	8001ea6 <HAL_DMA_Abort+0x20e>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a19      	ldr	r2, [pc, #100]	; (8001f08 <HAL_DMA_Abort+0x270>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d132      	bne.n	8001f0c <HAL_DMA_Abort+0x274>
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e031      	b.n	8001f0e <HAL_DMA_Abort+0x276>
 8001eaa:	bf00      	nop
 8001eac:	40020010 	.word	0x40020010
 8001eb0:	40020028 	.word	0x40020028
 8001eb4:	40020040 	.word	0x40020040
 8001eb8:	40020058 	.word	0x40020058
 8001ebc:	40020070 	.word	0x40020070
 8001ec0:	40020088 	.word	0x40020088
 8001ec4:	400200a0 	.word	0x400200a0
 8001ec8:	400200b8 	.word	0x400200b8
 8001ecc:	40020410 	.word	0x40020410
 8001ed0:	40020428 	.word	0x40020428
 8001ed4:	40020440 	.word	0x40020440
 8001ed8:	40020458 	.word	0x40020458
 8001edc:	40020470 	.word	0x40020470
 8001ee0:	40020488 	.word	0x40020488
 8001ee4:	400204a0 	.word	0x400204a0
 8001ee8:	400204b8 	.word	0x400204b8
 8001eec:	58025408 	.word	0x58025408
 8001ef0:	5802541c 	.word	0x5802541c
 8001ef4:	58025430 	.word	0x58025430
 8001ef8:	58025444 	.word	0x58025444
 8001efc:	58025458 	.word	0x58025458
 8001f00:	5802546c 	.word	0x5802546c
 8001f04:	58025480 	.word	0x58025480
 8001f08:	58025494 	.word	0x58025494
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d007      	beq.n	8001f22 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f1c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f20:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a6d      	ldr	r2, [pc, #436]	; (80020dc <HAL_DMA_Abort+0x444>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d04a      	beq.n	8001fc2 <HAL_DMA_Abort+0x32a>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a6b      	ldr	r2, [pc, #428]	; (80020e0 <HAL_DMA_Abort+0x448>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d045      	beq.n	8001fc2 <HAL_DMA_Abort+0x32a>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a6a      	ldr	r2, [pc, #424]	; (80020e4 <HAL_DMA_Abort+0x44c>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d040      	beq.n	8001fc2 <HAL_DMA_Abort+0x32a>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a68      	ldr	r2, [pc, #416]	; (80020e8 <HAL_DMA_Abort+0x450>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d03b      	beq.n	8001fc2 <HAL_DMA_Abort+0x32a>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a67      	ldr	r2, [pc, #412]	; (80020ec <HAL_DMA_Abort+0x454>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d036      	beq.n	8001fc2 <HAL_DMA_Abort+0x32a>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a65      	ldr	r2, [pc, #404]	; (80020f0 <HAL_DMA_Abort+0x458>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d031      	beq.n	8001fc2 <HAL_DMA_Abort+0x32a>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a64      	ldr	r2, [pc, #400]	; (80020f4 <HAL_DMA_Abort+0x45c>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d02c      	beq.n	8001fc2 <HAL_DMA_Abort+0x32a>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a62      	ldr	r2, [pc, #392]	; (80020f8 <HAL_DMA_Abort+0x460>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d027      	beq.n	8001fc2 <HAL_DMA_Abort+0x32a>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a61      	ldr	r2, [pc, #388]	; (80020fc <HAL_DMA_Abort+0x464>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d022      	beq.n	8001fc2 <HAL_DMA_Abort+0x32a>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a5f      	ldr	r2, [pc, #380]	; (8002100 <HAL_DMA_Abort+0x468>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d01d      	beq.n	8001fc2 <HAL_DMA_Abort+0x32a>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a5e      	ldr	r2, [pc, #376]	; (8002104 <HAL_DMA_Abort+0x46c>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d018      	beq.n	8001fc2 <HAL_DMA_Abort+0x32a>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a5c      	ldr	r2, [pc, #368]	; (8002108 <HAL_DMA_Abort+0x470>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d013      	beq.n	8001fc2 <HAL_DMA_Abort+0x32a>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a5b      	ldr	r2, [pc, #364]	; (800210c <HAL_DMA_Abort+0x474>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d00e      	beq.n	8001fc2 <HAL_DMA_Abort+0x32a>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a59      	ldr	r2, [pc, #356]	; (8002110 <HAL_DMA_Abort+0x478>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d009      	beq.n	8001fc2 <HAL_DMA_Abort+0x32a>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a58      	ldr	r2, [pc, #352]	; (8002114 <HAL_DMA_Abort+0x47c>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d004      	beq.n	8001fc2 <HAL_DMA_Abort+0x32a>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a56      	ldr	r2, [pc, #344]	; (8002118 <HAL_DMA_Abort+0x480>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d108      	bne.n	8001fd4 <HAL_DMA_Abort+0x33c>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f022 0201 	bic.w	r2, r2, #1
 8001fd0:	601a      	str	r2, [r3, #0]
 8001fd2:	e007      	b.n	8001fe4 <HAL_DMA_Abort+0x34c>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f022 0201 	bic.w	r2, r2, #1
 8001fe2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001fe4:	e013      	b.n	800200e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001fe6:	f7ff fc7b 	bl	80018e0 <HAL_GetTick>
 8001fea:	4602      	mov	r2, r0
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	2b05      	cmp	r3, #5
 8001ff2:	d90c      	bls.n	800200e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2220      	movs	r2, #32
 8001ff8:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2203      	movs	r2, #3
 8001ffe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2200      	movs	r2, #0
 8002006:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e12d      	b.n	800226a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0301 	and.w	r3, r3, #1
 8002016:	2b00      	cmp	r3, #0
 8002018:	d1e5      	bne.n	8001fe6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a2f      	ldr	r2, [pc, #188]	; (80020dc <HAL_DMA_Abort+0x444>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d04a      	beq.n	80020ba <HAL_DMA_Abort+0x422>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a2d      	ldr	r2, [pc, #180]	; (80020e0 <HAL_DMA_Abort+0x448>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d045      	beq.n	80020ba <HAL_DMA_Abort+0x422>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a2c      	ldr	r2, [pc, #176]	; (80020e4 <HAL_DMA_Abort+0x44c>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d040      	beq.n	80020ba <HAL_DMA_Abort+0x422>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a2a      	ldr	r2, [pc, #168]	; (80020e8 <HAL_DMA_Abort+0x450>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d03b      	beq.n	80020ba <HAL_DMA_Abort+0x422>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a29      	ldr	r2, [pc, #164]	; (80020ec <HAL_DMA_Abort+0x454>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d036      	beq.n	80020ba <HAL_DMA_Abort+0x422>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a27      	ldr	r2, [pc, #156]	; (80020f0 <HAL_DMA_Abort+0x458>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d031      	beq.n	80020ba <HAL_DMA_Abort+0x422>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a26      	ldr	r2, [pc, #152]	; (80020f4 <HAL_DMA_Abort+0x45c>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d02c      	beq.n	80020ba <HAL_DMA_Abort+0x422>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a24      	ldr	r2, [pc, #144]	; (80020f8 <HAL_DMA_Abort+0x460>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d027      	beq.n	80020ba <HAL_DMA_Abort+0x422>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a23      	ldr	r2, [pc, #140]	; (80020fc <HAL_DMA_Abort+0x464>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d022      	beq.n	80020ba <HAL_DMA_Abort+0x422>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a21      	ldr	r2, [pc, #132]	; (8002100 <HAL_DMA_Abort+0x468>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d01d      	beq.n	80020ba <HAL_DMA_Abort+0x422>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a20      	ldr	r2, [pc, #128]	; (8002104 <HAL_DMA_Abort+0x46c>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d018      	beq.n	80020ba <HAL_DMA_Abort+0x422>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a1e      	ldr	r2, [pc, #120]	; (8002108 <HAL_DMA_Abort+0x470>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d013      	beq.n	80020ba <HAL_DMA_Abort+0x422>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a1d      	ldr	r2, [pc, #116]	; (800210c <HAL_DMA_Abort+0x474>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d00e      	beq.n	80020ba <HAL_DMA_Abort+0x422>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a1b      	ldr	r2, [pc, #108]	; (8002110 <HAL_DMA_Abort+0x478>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d009      	beq.n	80020ba <HAL_DMA_Abort+0x422>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a1a      	ldr	r2, [pc, #104]	; (8002114 <HAL_DMA_Abort+0x47c>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d004      	beq.n	80020ba <HAL_DMA_Abort+0x422>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a18      	ldr	r2, [pc, #96]	; (8002118 <HAL_DMA_Abort+0x480>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d101      	bne.n	80020be <HAL_DMA_Abort+0x426>
 80020ba:	2301      	movs	r3, #1
 80020bc:	e000      	b.n	80020c0 <HAL_DMA_Abort+0x428>
 80020be:	2300      	movs	r3, #0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d02b      	beq.n	800211c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020c8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020ce:	f003 031f 	and.w	r3, r3, #31
 80020d2:	223f      	movs	r2, #63	; 0x3f
 80020d4:	409a      	lsls	r2, r3
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	609a      	str	r2, [r3, #8]
 80020da:	e02a      	b.n	8002132 <HAL_DMA_Abort+0x49a>
 80020dc:	40020010 	.word	0x40020010
 80020e0:	40020028 	.word	0x40020028
 80020e4:	40020040 	.word	0x40020040
 80020e8:	40020058 	.word	0x40020058
 80020ec:	40020070 	.word	0x40020070
 80020f0:	40020088 	.word	0x40020088
 80020f4:	400200a0 	.word	0x400200a0
 80020f8:	400200b8 	.word	0x400200b8
 80020fc:	40020410 	.word	0x40020410
 8002100:	40020428 	.word	0x40020428
 8002104:	40020440 	.word	0x40020440
 8002108:	40020458 	.word	0x40020458
 800210c:	40020470 	.word	0x40020470
 8002110:	40020488 	.word	0x40020488
 8002114:	400204a0 	.word	0x400204a0
 8002118:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002120:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002126:	f003 031f 	and.w	r3, r3, #31
 800212a:	2201      	movs	r2, #1
 800212c:	409a      	lsls	r2, r3
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a4f      	ldr	r2, [pc, #316]	; (8002274 <HAL_DMA_Abort+0x5dc>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d072      	beq.n	8002222 <HAL_DMA_Abort+0x58a>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a4d      	ldr	r2, [pc, #308]	; (8002278 <HAL_DMA_Abort+0x5e0>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d06d      	beq.n	8002222 <HAL_DMA_Abort+0x58a>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a4c      	ldr	r2, [pc, #304]	; (800227c <HAL_DMA_Abort+0x5e4>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d068      	beq.n	8002222 <HAL_DMA_Abort+0x58a>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a4a      	ldr	r2, [pc, #296]	; (8002280 <HAL_DMA_Abort+0x5e8>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d063      	beq.n	8002222 <HAL_DMA_Abort+0x58a>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a49      	ldr	r2, [pc, #292]	; (8002284 <HAL_DMA_Abort+0x5ec>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d05e      	beq.n	8002222 <HAL_DMA_Abort+0x58a>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a47      	ldr	r2, [pc, #284]	; (8002288 <HAL_DMA_Abort+0x5f0>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d059      	beq.n	8002222 <HAL_DMA_Abort+0x58a>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a46      	ldr	r2, [pc, #280]	; (800228c <HAL_DMA_Abort+0x5f4>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d054      	beq.n	8002222 <HAL_DMA_Abort+0x58a>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a44      	ldr	r2, [pc, #272]	; (8002290 <HAL_DMA_Abort+0x5f8>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d04f      	beq.n	8002222 <HAL_DMA_Abort+0x58a>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a43      	ldr	r2, [pc, #268]	; (8002294 <HAL_DMA_Abort+0x5fc>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d04a      	beq.n	8002222 <HAL_DMA_Abort+0x58a>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a41      	ldr	r2, [pc, #260]	; (8002298 <HAL_DMA_Abort+0x600>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d045      	beq.n	8002222 <HAL_DMA_Abort+0x58a>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a40      	ldr	r2, [pc, #256]	; (800229c <HAL_DMA_Abort+0x604>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d040      	beq.n	8002222 <HAL_DMA_Abort+0x58a>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a3e      	ldr	r2, [pc, #248]	; (80022a0 <HAL_DMA_Abort+0x608>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d03b      	beq.n	8002222 <HAL_DMA_Abort+0x58a>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a3d      	ldr	r2, [pc, #244]	; (80022a4 <HAL_DMA_Abort+0x60c>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d036      	beq.n	8002222 <HAL_DMA_Abort+0x58a>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a3b      	ldr	r2, [pc, #236]	; (80022a8 <HAL_DMA_Abort+0x610>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d031      	beq.n	8002222 <HAL_DMA_Abort+0x58a>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a3a      	ldr	r2, [pc, #232]	; (80022ac <HAL_DMA_Abort+0x614>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d02c      	beq.n	8002222 <HAL_DMA_Abort+0x58a>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a38      	ldr	r2, [pc, #224]	; (80022b0 <HAL_DMA_Abort+0x618>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d027      	beq.n	8002222 <HAL_DMA_Abort+0x58a>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a37      	ldr	r2, [pc, #220]	; (80022b4 <HAL_DMA_Abort+0x61c>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d022      	beq.n	8002222 <HAL_DMA_Abort+0x58a>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a35      	ldr	r2, [pc, #212]	; (80022b8 <HAL_DMA_Abort+0x620>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d01d      	beq.n	8002222 <HAL_DMA_Abort+0x58a>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a34      	ldr	r2, [pc, #208]	; (80022bc <HAL_DMA_Abort+0x624>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d018      	beq.n	8002222 <HAL_DMA_Abort+0x58a>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a32      	ldr	r2, [pc, #200]	; (80022c0 <HAL_DMA_Abort+0x628>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d013      	beq.n	8002222 <HAL_DMA_Abort+0x58a>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a31      	ldr	r2, [pc, #196]	; (80022c4 <HAL_DMA_Abort+0x62c>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d00e      	beq.n	8002222 <HAL_DMA_Abort+0x58a>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a2f      	ldr	r2, [pc, #188]	; (80022c8 <HAL_DMA_Abort+0x630>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d009      	beq.n	8002222 <HAL_DMA_Abort+0x58a>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a2e      	ldr	r2, [pc, #184]	; (80022cc <HAL_DMA_Abort+0x634>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d004      	beq.n	8002222 <HAL_DMA_Abort+0x58a>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a2c      	ldr	r2, [pc, #176]	; (80022d0 <HAL_DMA_Abort+0x638>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d101      	bne.n	8002226 <HAL_DMA_Abort+0x58e>
 8002222:	2301      	movs	r3, #1
 8002224:	e000      	b.n	8002228 <HAL_DMA_Abort+0x590>
 8002226:	2300      	movs	r3, #0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d015      	beq.n	8002258 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002230:	687a      	ldr	r2, [r7, #4]
 8002232:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002234:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800223a:	2b00      	cmp	r3, #0
 800223c:	d00c      	beq.n	8002258 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002248:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800224c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002256:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2201      	movs	r2, #1
 800225c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2200      	movs	r2, #0
 8002264:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8002268:	2300      	movs	r3, #0
}
 800226a:	4618      	mov	r0, r3
 800226c:	3718      	adds	r7, #24
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	40020010 	.word	0x40020010
 8002278:	40020028 	.word	0x40020028
 800227c:	40020040 	.word	0x40020040
 8002280:	40020058 	.word	0x40020058
 8002284:	40020070 	.word	0x40020070
 8002288:	40020088 	.word	0x40020088
 800228c:	400200a0 	.word	0x400200a0
 8002290:	400200b8 	.word	0x400200b8
 8002294:	40020410 	.word	0x40020410
 8002298:	40020428 	.word	0x40020428
 800229c:	40020440 	.word	0x40020440
 80022a0:	40020458 	.word	0x40020458
 80022a4:	40020470 	.word	0x40020470
 80022a8:	40020488 	.word	0x40020488
 80022ac:	400204a0 	.word	0x400204a0
 80022b0:	400204b8 	.word	0x400204b8
 80022b4:	58025408 	.word	0x58025408
 80022b8:	5802541c 	.word	0x5802541c
 80022bc:	58025430 	.word	0x58025430
 80022c0:	58025444 	.word	0x58025444
 80022c4:	58025458 	.word	0x58025458
 80022c8:	5802546c 	.word	0x5802546c
 80022cc:	58025480 	.word	0x58025480
 80022d0:	58025494 	.word	0x58025494

080022d4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d101      	bne.n	80022e6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e237      	b.n	8002756 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d004      	beq.n	80022fc <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2280      	movs	r2, #128	; 0x80
 80022f6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e22c      	b.n	8002756 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a5c      	ldr	r2, [pc, #368]	; (8002474 <HAL_DMA_Abort_IT+0x1a0>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d04a      	beq.n	800239c <HAL_DMA_Abort_IT+0xc8>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a5b      	ldr	r2, [pc, #364]	; (8002478 <HAL_DMA_Abort_IT+0x1a4>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d045      	beq.n	800239c <HAL_DMA_Abort_IT+0xc8>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a59      	ldr	r2, [pc, #356]	; (800247c <HAL_DMA_Abort_IT+0x1a8>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d040      	beq.n	800239c <HAL_DMA_Abort_IT+0xc8>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a58      	ldr	r2, [pc, #352]	; (8002480 <HAL_DMA_Abort_IT+0x1ac>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d03b      	beq.n	800239c <HAL_DMA_Abort_IT+0xc8>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a56      	ldr	r2, [pc, #344]	; (8002484 <HAL_DMA_Abort_IT+0x1b0>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d036      	beq.n	800239c <HAL_DMA_Abort_IT+0xc8>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a55      	ldr	r2, [pc, #340]	; (8002488 <HAL_DMA_Abort_IT+0x1b4>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d031      	beq.n	800239c <HAL_DMA_Abort_IT+0xc8>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a53      	ldr	r2, [pc, #332]	; (800248c <HAL_DMA_Abort_IT+0x1b8>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d02c      	beq.n	800239c <HAL_DMA_Abort_IT+0xc8>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a52      	ldr	r2, [pc, #328]	; (8002490 <HAL_DMA_Abort_IT+0x1bc>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d027      	beq.n	800239c <HAL_DMA_Abort_IT+0xc8>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a50      	ldr	r2, [pc, #320]	; (8002494 <HAL_DMA_Abort_IT+0x1c0>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d022      	beq.n	800239c <HAL_DMA_Abort_IT+0xc8>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a4f      	ldr	r2, [pc, #316]	; (8002498 <HAL_DMA_Abort_IT+0x1c4>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d01d      	beq.n	800239c <HAL_DMA_Abort_IT+0xc8>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a4d      	ldr	r2, [pc, #308]	; (800249c <HAL_DMA_Abort_IT+0x1c8>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d018      	beq.n	800239c <HAL_DMA_Abort_IT+0xc8>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a4c      	ldr	r2, [pc, #304]	; (80024a0 <HAL_DMA_Abort_IT+0x1cc>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d013      	beq.n	800239c <HAL_DMA_Abort_IT+0xc8>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a4a      	ldr	r2, [pc, #296]	; (80024a4 <HAL_DMA_Abort_IT+0x1d0>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d00e      	beq.n	800239c <HAL_DMA_Abort_IT+0xc8>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a49      	ldr	r2, [pc, #292]	; (80024a8 <HAL_DMA_Abort_IT+0x1d4>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d009      	beq.n	800239c <HAL_DMA_Abort_IT+0xc8>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a47      	ldr	r2, [pc, #284]	; (80024ac <HAL_DMA_Abort_IT+0x1d8>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d004      	beq.n	800239c <HAL_DMA_Abort_IT+0xc8>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a46      	ldr	r2, [pc, #280]	; (80024b0 <HAL_DMA_Abort_IT+0x1dc>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d101      	bne.n	80023a0 <HAL_DMA_Abort_IT+0xcc>
 800239c:	2301      	movs	r3, #1
 800239e:	e000      	b.n	80023a2 <HAL_DMA_Abort_IT+0xce>
 80023a0:	2300      	movs	r3, #0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	f000 8086 	beq.w	80024b4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2204      	movs	r2, #4
 80023ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a2f      	ldr	r2, [pc, #188]	; (8002474 <HAL_DMA_Abort_IT+0x1a0>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d04a      	beq.n	8002450 <HAL_DMA_Abort_IT+0x17c>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a2e      	ldr	r2, [pc, #184]	; (8002478 <HAL_DMA_Abort_IT+0x1a4>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d045      	beq.n	8002450 <HAL_DMA_Abort_IT+0x17c>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a2c      	ldr	r2, [pc, #176]	; (800247c <HAL_DMA_Abort_IT+0x1a8>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d040      	beq.n	8002450 <HAL_DMA_Abort_IT+0x17c>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a2b      	ldr	r2, [pc, #172]	; (8002480 <HAL_DMA_Abort_IT+0x1ac>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d03b      	beq.n	8002450 <HAL_DMA_Abort_IT+0x17c>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a29      	ldr	r2, [pc, #164]	; (8002484 <HAL_DMA_Abort_IT+0x1b0>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d036      	beq.n	8002450 <HAL_DMA_Abort_IT+0x17c>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a28      	ldr	r2, [pc, #160]	; (8002488 <HAL_DMA_Abort_IT+0x1b4>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d031      	beq.n	8002450 <HAL_DMA_Abort_IT+0x17c>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a26      	ldr	r2, [pc, #152]	; (800248c <HAL_DMA_Abort_IT+0x1b8>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d02c      	beq.n	8002450 <HAL_DMA_Abort_IT+0x17c>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a25      	ldr	r2, [pc, #148]	; (8002490 <HAL_DMA_Abort_IT+0x1bc>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d027      	beq.n	8002450 <HAL_DMA_Abort_IT+0x17c>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a23      	ldr	r2, [pc, #140]	; (8002494 <HAL_DMA_Abort_IT+0x1c0>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d022      	beq.n	8002450 <HAL_DMA_Abort_IT+0x17c>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a22      	ldr	r2, [pc, #136]	; (8002498 <HAL_DMA_Abort_IT+0x1c4>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d01d      	beq.n	8002450 <HAL_DMA_Abort_IT+0x17c>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a20      	ldr	r2, [pc, #128]	; (800249c <HAL_DMA_Abort_IT+0x1c8>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d018      	beq.n	8002450 <HAL_DMA_Abort_IT+0x17c>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a1f      	ldr	r2, [pc, #124]	; (80024a0 <HAL_DMA_Abort_IT+0x1cc>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d013      	beq.n	8002450 <HAL_DMA_Abort_IT+0x17c>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a1d      	ldr	r2, [pc, #116]	; (80024a4 <HAL_DMA_Abort_IT+0x1d0>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d00e      	beq.n	8002450 <HAL_DMA_Abort_IT+0x17c>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a1c      	ldr	r2, [pc, #112]	; (80024a8 <HAL_DMA_Abort_IT+0x1d4>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d009      	beq.n	8002450 <HAL_DMA_Abort_IT+0x17c>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a1a      	ldr	r2, [pc, #104]	; (80024ac <HAL_DMA_Abort_IT+0x1d8>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d004      	beq.n	8002450 <HAL_DMA_Abort_IT+0x17c>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a19      	ldr	r2, [pc, #100]	; (80024b0 <HAL_DMA_Abort_IT+0x1dc>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d108      	bne.n	8002462 <HAL_DMA_Abort_IT+0x18e>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f022 0201 	bic.w	r2, r2, #1
 800245e:	601a      	str	r2, [r3, #0]
 8002460:	e178      	b.n	8002754 <HAL_DMA_Abort_IT+0x480>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f022 0201 	bic.w	r2, r2, #1
 8002470:	601a      	str	r2, [r3, #0]
 8002472:	e16f      	b.n	8002754 <HAL_DMA_Abort_IT+0x480>
 8002474:	40020010 	.word	0x40020010
 8002478:	40020028 	.word	0x40020028
 800247c:	40020040 	.word	0x40020040
 8002480:	40020058 	.word	0x40020058
 8002484:	40020070 	.word	0x40020070
 8002488:	40020088 	.word	0x40020088
 800248c:	400200a0 	.word	0x400200a0
 8002490:	400200b8 	.word	0x400200b8
 8002494:	40020410 	.word	0x40020410
 8002498:	40020428 	.word	0x40020428
 800249c:	40020440 	.word	0x40020440
 80024a0:	40020458 	.word	0x40020458
 80024a4:	40020470 	.word	0x40020470
 80024a8:	40020488 	.word	0x40020488
 80024ac:	400204a0 	.word	0x400204a0
 80024b0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f022 020e 	bic.w	r2, r2, #14
 80024c2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a6c      	ldr	r2, [pc, #432]	; (800267c <HAL_DMA_Abort_IT+0x3a8>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d04a      	beq.n	8002564 <HAL_DMA_Abort_IT+0x290>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a6b      	ldr	r2, [pc, #428]	; (8002680 <HAL_DMA_Abort_IT+0x3ac>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d045      	beq.n	8002564 <HAL_DMA_Abort_IT+0x290>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a69      	ldr	r2, [pc, #420]	; (8002684 <HAL_DMA_Abort_IT+0x3b0>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d040      	beq.n	8002564 <HAL_DMA_Abort_IT+0x290>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a68      	ldr	r2, [pc, #416]	; (8002688 <HAL_DMA_Abort_IT+0x3b4>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d03b      	beq.n	8002564 <HAL_DMA_Abort_IT+0x290>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a66      	ldr	r2, [pc, #408]	; (800268c <HAL_DMA_Abort_IT+0x3b8>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d036      	beq.n	8002564 <HAL_DMA_Abort_IT+0x290>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a65      	ldr	r2, [pc, #404]	; (8002690 <HAL_DMA_Abort_IT+0x3bc>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d031      	beq.n	8002564 <HAL_DMA_Abort_IT+0x290>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a63      	ldr	r2, [pc, #396]	; (8002694 <HAL_DMA_Abort_IT+0x3c0>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d02c      	beq.n	8002564 <HAL_DMA_Abort_IT+0x290>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a62      	ldr	r2, [pc, #392]	; (8002698 <HAL_DMA_Abort_IT+0x3c4>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d027      	beq.n	8002564 <HAL_DMA_Abort_IT+0x290>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a60      	ldr	r2, [pc, #384]	; (800269c <HAL_DMA_Abort_IT+0x3c8>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d022      	beq.n	8002564 <HAL_DMA_Abort_IT+0x290>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a5f      	ldr	r2, [pc, #380]	; (80026a0 <HAL_DMA_Abort_IT+0x3cc>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d01d      	beq.n	8002564 <HAL_DMA_Abort_IT+0x290>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a5d      	ldr	r2, [pc, #372]	; (80026a4 <HAL_DMA_Abort_IT+0x3d0>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d018      	beq.n	8002564 <HAL_DMA_Abort_IT+0x290>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a5c      	ldr	r2, [pc, #368]	; (80026a8 <HAL_DMA_Abort_IT+0x3d4>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d013      	beq.n	8002564 <HAL_DMA_Abort_IT+0x290>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a5a      	ldr	r2, [pc, #360]	; (80026ac <HAL_DMA_Abort_IT+0x3d8>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d00e      	beq.n	8002564 <HAL_DMA_Abort_IT+0x290>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a59      	ldr	r2, [pc, #356]	; (80026b0 <HAL_DMA_Abort_IT+0x3dc>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d009      	beq.n	8002564 <HAL_DMA_Abort_IT+0x290>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a57      	ldr	r2, [pc, #348]	; (80026b4 <HAL_DMA_Abort_IT+0x3e0>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d004      	beq.n	8002564 <HAL_DMA_Abort_IT+0x290>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a56      	ldr	r2, [pc, #344]	; (80026b8 <HAL_DMA_Abort_IT+0x3e4>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d108      	bne.n	8002576 <HAL_DMA_Abort_IT+0x2a2>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f022 0201 	bic.w	r2, r2, #1
 8002572:	601a      	str	r2, [r3, #0]
 8002574:	e007      	b.n	8002586 <HAL_DMA_Abort_IT+0x2b2>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f022 0201 	bic.w	r2, r2, #1
 8002584:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a3c      	ldr	r2, [pc, #240]	; (800267c <HAL_DMA_Abort_IT+0x3a8>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d072      	beq.n	8002676 <HAL_DMA_Abort_IT+0x3a2>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a3a      	ldr	r2, [pc, #232]	; (8002680 <HAL_DMA_Abort_IT+0x3ac>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d06d      	beq.n	8002676 <HAL_DMA_Abort_IT+0x3a2>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a39      	ldr	r2, [pc, #228]	; (8002684 <HAL_DMA_Abort_IT+0x3b0>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d068      	beq.n	8002676 <HAL_DMA_Abort_IT+0x3a2>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a37      	ldr	r2, [pc, #220]	; (8002688 <HAL_DMA_Abort_IT+0x3b4>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d063      	beq.n	8002676 <HAL_DMA_Abort_IT+0x3a2>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a36      	ldr	r2, [pc, #216]	; (800268c <HAL_DMA_Abort_IT+0x3b8>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d05e      	beq.n	8002676 <HAL_DMA_Abort_IT+0x3a2>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a34      	ldr	r2, [pc, #208]	; (8002690 <HAL_DMA_Abort_IT+0x3bc>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d059      	beq.n	8002676 <HAL_DMA_Abort_IT+0x3a2>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a33      	ldr	r2, [pc, #204]	; (8002694 <HAL_DMA_Abort_IT+0x3c0>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d054      	beq.n	8002676 <HAL_DMA_Abort_IT+0x3a2>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a31      	ldr	r2, [pc, #196]	; (8002698 <HAL_DMA_Abort_IT+0x3c4>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d04f      	beq.n	8002676 <HAL_DMA_Abort_IT+0x3a2>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a30      	ldr	r2, [pc, #192]	; (800269c <HAL_DMA_Abort_IT+0x3c8>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d04a      	beq.n	8002676 <HAL_DMA_Abort_IT+0x3a2>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a2e      	ldr	r2, [pc, #184]	; (80026a0 <HAL_DMA_Abort_IT+0x3cc>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d045      	beq.n	8002676 <HAL_DMA_Abort_IT+0x3a2>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a2d      	ldr	r2, [pc, #180]	; (80026a4 <HAL_DMA_Abort_IT+0x3d0>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d040      	beq.n	8002676 <HAL_DMA_Abort_IT+0x3a2>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a2b      	ldr	r2, [pc, #172]	; (80026a8 <HAL_DMA_Abort_IT+0x3d4>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d03b      	beq.n	8002676 <HAL_DMA_Abort_IT+0x3a2>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a2a      	ldr	r2, [pc, #168]	; (80026ac <HAL_DMA_Abort_IT+0x3d8>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d036      	beq.n	8002676 <HAL_DMA_Abort_IT+0x3a2>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a28      	ldr	r2, [pc, #160]	; (80026b0 <HAL_DMA_Abort_IT+0x3dc>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d031      	beq.n	8002676 <HAL_DMA_Abort_IT+0x3a2>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a27      	ldr	r2, [pc, #156]	; (80026b4 <HAL_DMA_Abort_IT+0x3e0>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d02c      	beq.n	8002676 <HAL_DMA_Abort_IT+0x3a2>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a25      	ldr	r2, [pc, #148]	; (80026b8 <HAL_DMA_Abort_IT+0x3e4>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d027      	beq.n	8002676 <HAL_DMA_Abort_IT+0x3a2>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a24      	ldr	r2, [pc, #144]	; (80026bc <HAL_DMA_Abort_IT+0x3e8>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d022      	beq.n	8002676 <HAL_DMA_Abort_IT+0x3a2>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a22      	ldr	r2, [pc, #136]	; (80026c0 <HAL_DMA_Abort_IT+0x3ec>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d01d      	beq.n	8002676 <HAL_DMA_Abort_IT+0x3a2>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a21      	ldr	r2, [pc, #132]	; (80026c4 <HAL_DMA_Abort_IT+0x3f0>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d018      	beq.n	8002676 <HAL_DMA_Abort_IT+0x3a2>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a1f      	ldr	r2, [pc, #124]	; (80026c8 <HAL_DMA_Abort_IT+0x3f4>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d013      	beq.n	8002676 <HAL_DMA_Abort_IT+0x3a2>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a1e      	ldr	r2, [pc, #120]	; (80026cc <HAL_DMA_Abort_IT+0x3f8>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d00e      	beq.n	8002676 <HAL_DMA_Abort_IT+0x3a2>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a1c      	ldr	r2, [pc, #112]	; (80026d0 <HAL_DMA_Abort_IT+0x3fc>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d009      	beq.n	8002676 <HAL_DMA_Abort_IT+0x3a2>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a1b      	ldr	r2, [pc, #108]	; (80026d4 <HAL_DMA_Abort_IT+0x400>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d004      	beq.n	8002676 <HAL_DMA_Abort_IT+0x3a2>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a19      	ldr	r2, [pc, #100]	; (80026d8 <HAL_DMA_Abort_IT+0x404>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d132      	bne.n	80026dc <HAL_DMA_Abort_IT+0x408>
 8002676:	2301      	movs	r3, #1
 8002678:	e031      	b.n	80026de <HAL_DMA_Abort_IT+0x40a>
 800267a:	bf00      	nop
 800267c:	40020010 	.word	0x40020010
 8002680:	40020028 	.word	0x40020028
 8002684:	40020040 	.word	0x40020040
 8002688:	40020058 	.word	0x40020058
 800268c:	40020070 	.word	0x40020070
 8002690:	40020088 	.word	0x40020088
 8002694:	400200a0 	.word	0x400200a0
 8002698:	400200b8 	.word	0x400200b8
 800269c:	40020410 	.word	0x40020410
 80026a0:	40020428 	.word	0x40020428
 80026a4:	40020440 	.word	0x40020440
 80026a8:	40020458 	.word	0x40020458
 80026ac:	40020470 	.word	0x40020470
 80026b0:	40020488 	.word	0x40020488
 80026b4:	400204a0 	.word	0x400204a0
 80026b8:	400204b8 	.word	0x400204b8
 80026bc:	58025408 	.word	0x58025408
 80026c0:	5802541c 	.word	0x5802541c
 80026c4:	58025430 	.word	0x58025430
 80026c8:	58025444 	.word	0x58025444
 80026cc:	58025458 	.word	0x58025458
 80026d0:	5802546c 	.word	0x5802546c
 80026d4:	58025480 	.word	0x58025480
 80026d8:	58025494 	.word	0x58025494
 80026dc:	2300      	movs	r3, #0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d028      	beq.n	8002734 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80026f0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026f6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026fc:	f003 031f 	and.w	r3, r3, #31
 8002700:	2201      	movs	r2, #1
 8002702:	409a      	lsls	r2, r3
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002710:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002716:	2b00      	cmp	r3, #0
 8002718:	d00c      	beq.n	8002734 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002724:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002728:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002732:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2201      	movs	r2, #1
 8002738:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2200      	movs	r2, #0
 8002740:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002748:	2b00      	cmp	r3, #0
 800274a:	d003      	beq.n	8002754 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002754:	2300      	movs	r3, #0
}
 8002756:	4618      	mov	r0, r3
 8002758:	3710      	adds	r7, #16
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop

08002760 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d101      	bne.n	8002772 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e0cf      	b.n	8002912 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002778:	2b00      	cmp	r3, #0
 800277a:	d106      	bne.n	800278a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2223      	movs	r2, #35	; 0x23
 8002780:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	f7fe f91f 	bl	80009c8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800278a:	4b64      	ldr	r3, [pc, #400]	; (800291c <HAL_ETH_Init+0x1bc>)
 800278c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002790:	4a62      	ldr	r2, [pc, #392]	; (800291c <HAL_ETH_Init+0x1bc>)
 8002792:	f043 0302 	orr.w	r3, r3, #2
 8002796:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800279a:	4b60      	ldr	r3, [pc, #384]	; (800291c <HAL_ETH_Init+0x1bc>)
 800279c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80027a0:	f003 0302 	and.w	r3, r3, #2
 80027a4:	60bb      	str	r3, [r7, #8]
 80027a6:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	7a1b      	ldrb	r3, [r3, #8]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d103      	bne.n	80027b8 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80027b0:	2000      	movs	r0, #0
 80027b2:	f7ff f8d1 	bl	8001958 <HAL_SYSCFG_ETHInterfaceSelect>
 80027b6:	e003      	b.n	80027c0 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80027b8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80027bc:	f7ff f8cc 	bl	8001958 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80027c0:	4b57      	ldr	r3, [pc, #348]	; (8002920 <HAL_ETH_Init+0x1c0>)
 80027c2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	6812      	ldr	r2, [r2, #0]
 80027d2:	f043 0301 	orr.w	r3, r3, #1
 80027d6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80027da:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80027dc:	f7ff f880 	bl	80018e0 <HAL_GetTick>
 80027e0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80027e2:	e011      	b.n	8002808 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80027e4:	f7ff f87c 	bl	80018e0 <HAL_GetTick>
 80027e8:	4602      	mov	r2, r0
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80027f2:	d909      	bls.n	8002808 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2204      	movs	r2, #4
 80027f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	22e0      	movs	r2, #224	; 0xe0
 8002800:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e084      	b.n	8002912 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0301 	and.w	r3, r3, #1
 8002816:	2b00      	cmp	r3, #0
 8002818:	d1e4      	bne.n	80027e4 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f000 f886 	bl	800292c <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8002820:	f001 fdd2 	bl	80043c8 <HAL_RCC_GetHCLKFreq>
 8002824:	4603      	mov	r3, r0
 8002826:	4a3f      	ldr	r2, [pc, #252]	; (8002924 <HAL_ETH_Init+0x1c4>)
 8002828:	fba2 2303 	umull	r2, r3, r2, r3
 800282c:	0c9a      	lsrs	r2, r3, #18
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	3a01      	subs	r2, #1
 8002834:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f000 fa71 	bl	8002d20 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002846:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800284a:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	6812      	ldr	r2, [r2, #0]
 8002852:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002856:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800285a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	695b      	ldr	r3, [r3, #20]
 8002862:	f003 0303 	and.w	r3, r3, #3
 8002866:	2b00      	cmp	r3, #0
 8002868:	d009      	beq.n	800287e <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2201      	movs	r2, #1
 800286e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	22e0      	movs	r2, #224	; 0xe0
 8002876:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e049      	b.n	8002912 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002886:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800288a:	4b27      	ldr	r3, [pc, #156]	; (8002928 <HAL_ETH_Init+0x1c8>)
 800288c:	4013      	ands	r3, r2
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	6952      	ldr	r2, [r2, #20]
 8002892:	0051      	lsls	r1, r2, #1
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	6812      	ldr	r2, [r2, #0]
 8002898:	430b      	orrs	r3, r1
 800289a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800289e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f000 fad9 	bl	8002e5a <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	f000 fb1f 	bl	8002eec <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	3305      	adds	r3, #5
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	021a      	lsls	r2, r3, #8
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	3304      	adds	r3, #4
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	4619      	mov	r1, r3
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	430a      	orrs	r2, r1
 80028c8:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	3303      	adds	r3, #3
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	061a      	lsls	r2, r3, #24
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	3302      	adds	r3, #2
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	041b      	lsls	r3, r3, #16
 80028e0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	3301      	adds	r3, #1
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80028ec:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80028fa:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80028fc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2200      	movs	r2, #0
 8002904:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2210      	movs	r2, #16
 800290c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002910:	2300      	movs	r3, #0
}
 8002912:	4618      	mov	r0, r3
 8002914:	3710      	adds	r7, #16
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	58024400 	.word	0x58024400
 8002920:	58000400 	.word	0x58000400
 8002924:	431bde83 	.word	0x431bde83
 8002928:	ffff8001 	.word	0xffff8001

0800292c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b084      	sub	sp, #16
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800293c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002944:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002946:	f001 fd3f 	bl	80043c8 <HAL_RCC_GetHCLKFreq>
 800294a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	4a1e      	ldr	r2, [pc, #120]	; (80029c8 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d908      	bls.n	8002966 <HAL_ETH_SetMDIOClockRange+0x3a>
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	4a1d      	ldr	r2, [pc, #116]	; (80029cc <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d804      	bhi.n	8002966 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002962:	60fb      	str	r3, [r7, #12]
 8002964:	e027      	b.n	80029b6 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	4a18      	ldr	r2, [pc, #96]	; (80029cc <HAL_ETH_SetMDIOClockRange+0xa0>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d908      	bls.n	8002980 <HAL_ETH_SetMDIOClockRange+0x54>
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	4a17      	ldr	r2, [pc, #92]	; (80029d0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d204      	bcs.n	8002980 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800297c:	60fb      	str	r3, [r7, #12]
 800297e:	e01a      	b.n	80029b6 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	4a13      	ldr	r2, [pc, #76]	; (80029d0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d303      	bcc.n	8002990 <HAL_ETH_SetMDIOClockRange+0x64>
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	4a12      	ldr	r2, [pc, #72]	; (80029d4 <HAL_ETH_SetMDIOClockRange+0xa8>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d911      	bls.n	80029b4 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	4a10      	ldr	r2, [pc, #64]	; (80029d4 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d908      	bls.n	80029aa <HAL_ETH_SetMDIOClockRange+0x7e>
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	4a0f      	ldr	r2, [pc, #60]	; (80029d8 <HAL_ETH_SetMDIOClockRange+0xac>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d804      	bhi.n	80029aa <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029a6:	60fb      	str	r3, [r7, #12]
 80029a8:	e005      	b.n	80029b6 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029b0:	60fb      	str	r3, [r7, #12]
 80029b2:	e000      	b.n	80029b6 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80029b4:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	68fa      	ldr	r2, [r7, #12]
 80029bc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80029c0:	bf00      	nop
 80029c2:	3710      	adds	r7, #16
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	01312cff 	.word	0x01312cff
 80029cc:	02160ebf 	.word	0x02160ebf
 80029d0:	03938700 	.word	0x03938700
 80029d4:	05f5e0ff 	.word	0x05f5e0ff
 80029d8:	08f0d17f 	.word	0x08f0d17f

080029dc <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80029dc:	b480      	push	{r7}
 80029de:	b085      	sub	sp, #20
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80029ee:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	791b      	ldrb	r3, [r3, #4]
 80029f4:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80029f6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	7b1b      	ldrb	r3, [r3, #12]
 80029fc:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80029fe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	7b5b      	ldrb	r3, [r3, #13]
 8002a04:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002a06:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	7b9b      	ldrb	r3, [r3, #14]
 8002a0c:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002a0e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	7bdb      	ldrb	r3, [r3, #15]
 8002a14:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002a16:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002a18:	683a      	ldr	r2, [r7, #0]
 8002a1a:	7c12      	ldrb	r2, [r2, #16]
 8002a1c:	2a00      	cmp	r2, #0
 8002a1e:	d102      	bne.n	8002a26 <ETH_SetMACConfig+0x4a>
 8002a20:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002a24:	e000      	b.n	8002a28 <ETH_SetMACConfig+0x4c>
 8002a26:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002a28:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002a2a:	683a      	ldr	r2, [r7, #0]
 8002a2c:	7c52      	ldrb	r2, [r2, #17]
 8002a2e:	2a00      	cmp	r2, #0
 8002a30:	d102      	bne.n	8002a38 <ETH_SetMACConfig+0x5c>
 8002a32:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a36:	e000      	b.n	8002a3a <ETH_SetMACConfig+0x5e>
 8002a38:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002a3a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	7c9b      	ldrb	r3, [r3, #18]
 8002a40:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002a42:	431a      	orrs	r2, r3
               macconf->Speed |
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8002a48:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8002a4e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	7f1b      	ldrb	r3, [r3, #28]
 8002a54:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8002a56:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	7f5b      	ldrb	r3, [r3, #29]
 8002a5c:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002a5e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002a60:	683a      	ldr	r2, [r7, #0]
 8002a62:	7f92      	ldrb	r2, [r2, #30]
 8002a64:	2a00      	cmp	r2, #0
 8002a66:	d102      	bne.n	8002a6e <ETH_SetMACConfig+0x92>
 8002a68:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a6c:	e000      	b.n	8002a70 <ETH_SetMACConfig+0x94>
 8002a6e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002a70:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	7fdb      	ldrb	r3, [r3, #31]
 8002a76:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002a78:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002a7a:	683a      	ldr	r2, [r7, #0]
 8002a7c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002a80:	2a00      	cmp	r2, #0
 8002a82:	d102      	bne.n	8002a8a <ETH_SetMACConfig+0xae>
 8002a84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a88:	e000      	b.n	8002a8c <ETH_SetMACConfig+0xb0>
 8002a8a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002a8c:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002a92:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002a9a:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8002a9c:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	4b56      	ldr	r3, [pc, #344]	; (8002c08 <ETH_SetMACConfig+0x22c>)
 8002aae:	4013      	ands	r3, r2
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	6812      	ldr	r2, [r2, #0]
 8002ab4:	68f9      	ldr	r1, [r7, #12]
 8002ab6:	430b      	orrs	r3, r1
 8002ab8:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002abe:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002ac6:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002ac8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002ad0:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002ad2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002ada:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002adc:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8002ade:	683a      	ldr	r2, [r7, #0]
 8002ae0:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8002ae4:	2a00      	cmp	r2, #0
 8002ae6:	d102      	bne.n	8002aee <ETH_SetMACConfig+0x112>
 8002ae8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002aec:	e000      	b.n	8002af0 <ETH_SetMACConfig+0x114>
 8002aee:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002af0:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002af6:	4313      	orrs	r3, r2
 8002af8:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	685a      	ldr	r2, [r3, #4]
 8002b00:	4b42      	ldr	r3, [pc, #264]	; (8002c0c <ETH_SetMACConfig+0x230>)
 8002b02:	4013      	ands	r3, r2
 8002b04:	687a      	ldr	r2, [r7, #4]
 8002b06:	6812      	ldr	r2, [r2, #0]
 8002b08:	68f9      	ldr	r1, [r7, #12]
 8002b0a:	430b      	orrs	r3, r1
 8002b0c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b14:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	68da      	ldr	r2, [r3, #12]
 8002b24:	4b3a      	ldr	r3, [pc, #232]	; (8002c10 <ETH_SetMACConfig+0x234>)
 8002b26:	4013      	ands	r3, r2
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	6812      	ldr	r2, [r2, #0]
 8002b2c:	68f9      	ldr	r1, [r7, #12]
 8002b2e:	430b      	orrs	r3, r1
 8002b30:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002b38:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002b3e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8002b40:	683a      	ldr	r2, [r7, #0]
 8002b42:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002b46:	2a00      	cmp	r2, #0
 8002b48:	d101      	bne.n	8002b4e <ETH_SetMACConfig+0x172>
 8002b4a:	2280      	movs	r2, #128	; 0x80
 8002b4c:	e000      	b.n	8002b50 <ETH_SetMACConfig+0x174>
 8002b4e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8002b50:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b56:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002b62:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8002b66:	4013      	ands	r3, r2
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	6812      	ldr	r2, [r2, #0]
 8002b6c:	68f9      	ldr	r1, [r7, #12]
 8002b6e:	430b      	orrs	r3, r1
 8002b70:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8002b78:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8002b80:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002b82:	4313      	orrs	r3, r2
 8002b84:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b8e:	f023 0103 	bic.w	r1, r3, #3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	68fa      	ldr	r2, [r7, #12]
 8002b98:	430a      	orrs	r2, r1
 8002b9a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8002ba6:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	430a      	orrs	r2, r1
 8002bb4:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002bbc:	683a      	ldr	r2, [r7, #0]
 8002bbe:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8002bc2:	2a00      	cmp	r2, #0
 8002bc4:	d101      	bne.n	8002bca <ETH_SetMACConfig+0x1ee>
 8002bc6:	2240      	movs	r2, #64	; 0x40
 8002bc8:	e000      	b.n	8002bcc <ETH_SetMACConfig+0x1f0>
 8002bca:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002bcc:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8002bd4:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002bd6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8002bde:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8002be0:	4313      	orrs	r3, r2
 8002be2:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002bec:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	68fa      	ldr	r2, [r7, #12]
 8002bf6:	430a      	orrs	r2, r1
 8002bf8:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8002bfc:	bf00      	nop
 8002bfe:	3714      	adds	r7, #20
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr
 8002c08:	00048083 	.word	0x00048083
 8002c0c:	c0f88000 	.word	0xc0f88000
 8002c10:	fffffef0 	.word	0xfffffef0

08002c14 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b085      	sub	sp, #20
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	4b38      	ldr	r3, [pc, #224]	; (8002d0c <ETH_SetDMAConfig+0xf8>)
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	683a      	ldr	r2, [r7, #0]
 8002c2e:	6811      	ldr	r1, [r2, #0]
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	6812      	ldr	r2, [r2, #0]
 8002c34:	430b      	orrs	r3, r1
 8002c36:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002c3a:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	791b      	ldrb	r3, [r3, #4]
 8002c40:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002c46:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	7b1b      	ldrb	r3, [r3, #12]
 8002c4c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c5a:	685a      	ldr	r2, [r3, #4]
 8002c5c:	4b2c      	ldr	r3, [pc, #176]	; (8002d10 <ETH_SetDMAConfig+0xfc>)
 8002c5e:	4013      	ands	r3, r2
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	6812      	ldr	r2, [r2, #0]
 8002c64:	68f9      	ldr	r1, [r7, #12]
 8002c66:	430b      	orrs	r3, r1
 8002c68:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002c6c:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	7b5b      	ldrb	r3, [r3, #13]
 8002c72:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c84:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8002c88:	4b22      	ldr	r3, [pc, #136]	; (8002d14 <ETH_SetDMAConfig+0x100>)
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	6812      	ldr	r2, [r2, #0]
 8002c90:	68f9      	ldr	r1, [r7, #12]
 8002c92:	430b      	orrs	r3, r1
 8002c94:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002c98:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	7d1b      	ldrb	r3, [r3, #20]
 8002ca4:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8002ca6:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	7f5b      	ldrb	r3, [r3, #29]
 8002cac:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cba:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8002cbe:	4b16      	ldr	r3, [pc, #88]	; (8002d18 <ETH_SetDMAConfig+0x104>)
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	6812      	ldr	r2, [r2, #0]
 8002cc6:	68f9      	ldr	r1, [r7, #12]
 8002cc8:	430b      	orrs	r3, r1
 8002cca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002cce:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	7f1b      	ldrb	r3, [r3, #28]
 8002cd6:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ce8:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8002cec:	4b0b      	ldr	r3, [pc, #44]	; (8002d1c <ETH_SetDMAConfig+0x108>)
 8002cee:	4013      	ands	r3, r2
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	6812      	ldr	r2, [r2, #0]
 8002cf4:	68f9      	ldr	r1, [r7, #12]
 8002cf6:	430b      	orrs	r3, r1
 8002cf8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002cfc:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8002d00:	bf00      	nop
 8002d02:	3714      	adds	r7, #20
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr
 8002d0c:	ffff87fd 	.word	0xffff87fd
 8002d10:	ffff2ffe 	.word	0xffff2ffe
 8002d14:	fffec000 	.word	0xfffec000
 8002d18:	ffc0efef 	.word	0xffc0efef
 8002d1c:	7fc0ffff 	.word	0x7fc0ffff

08002d20 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b0a4      	sub	sp, #144	; 0x90
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8002d32:	2300      	movs	r3, #0
 8002d34:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002d44:	2301      	movs	r3, #1
 8002d46:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8002d50:	2300      	movs	r3, #0
 8002d52:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002d56:	2301      	movs	r3, #1
 8002d58:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002d5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d60:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8002d62:	2300      	movs	r3, #0
 8002d64:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8002d72:	2300      	movs	r3, #0
 8002d74:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8002d78:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8002d7c:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002d84:	2300      	movs	r3, #0
 8002d86:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002d94:	2300      	movs	r3, #0
 8002d96:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8002da2:	2300      	movs	r3, #0
 8002da4:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8002da6:	2300      	movs	r3, #0
 8002da8:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002dac:	2300      	movs	r3, #0
 8002dae:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8002db2:	2301      	movs	r3, #1
 8002db4:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002db8:	2320      	movs	r3, #32
 8002dba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8002dca:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8002dce:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002dd0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002dd4:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002ddc:	2302      	movs	r3, #2
 8002dde:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002de2:	2300      	movs	r3, #0
 8002de4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002de8:	2300      	movs	r3, #0
 8002dea:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8002dee:	2300      	movs	r3, #0
 8002df0:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002df4:	2301      	movs	r3, #1
 8002df6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002e04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e08:	4619      	mov	r1, r3
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f7ff fde6 	bl	80029dc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002e10:	2301      	movs	r3, #1
 8002e12:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002e14:	2301      	movs	r3, #1
 8002e16:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8002e22:	2300      	movs	r3, #0
 8002e24:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002e26:	2300      	movs	r3, #0
 8002e28:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002e2a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002e2e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8002e30:	2300      	movs	r3, #0
 8002e32:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002e34:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002e38:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8002e40:	f44f 7306 	mov.w	r3, #536	; 0x218
 8002e44:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002e46:	f107 0308 	add.w	r3, r7, #8
 8002e4a:	4619      	mov	r1, r3
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f7ff fee1 	bl	8002c14 <ETH_SetDMAConfig>
}
 8002e52:	bf00      	nop
 8002e54:	3790      	adds	r7, #144	; 0x90
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}

08002e5a <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002e5a:	b480      	push	{r7}
 8002e5c:	b085      	sub	sp, #20
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002e62:	2300      	movs	r3, #0
 8002e64:	60fb      	str	r3, [r7, #12]
 8002e66:	e01d      	b.n	8002ea4 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	68d9      	ldr	r1, [r3, #12]
 8002e6c:	68fa      	ldr	r2, [r7, #12]
 8002e6e:	4613      	mov	r3, r2
 8002e70:	005b      	lsls	r3, r3, #1
 8002e72:	4413      	add	r3, r2
 8002e74:	00db      	lsls	r3, r3, #3
 8002e76:	440b      	add	r3, r1
 8002e78:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	2200      	movs	r2, #0
 8002e84:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002e92:	68b9      	ldr	r1, [r7, #8]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	68fa      	ldr	r2, [r7, #12]
 8002e98:	3206      	adds	r2, #6
 8002e9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	3301      	adds	r3, #1
 8002ea2:	60fb      	str	r3, [r7, #12]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2b03      	cmp	r3, #3
 8002ea8:	d9de      	bls.n	8002e68 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002eb8:	461a      	mov	r2, r3
 8002eba:	2303      	movs	r3, #3
 8002ebc:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	68da      	ldr	r2, [r3, #12]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ecc:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	68da      	ldr	r2, [r3, #12]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002edc:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8002ee0:	bf00      	nop
 8002ee2:	3714      	adds	r7, #20
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr

08002eec <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b085      	sub	sp, #20
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	60fb      	str	r3, [r7, #12]
 8002ef8:	e023      	b.n	8002f42 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6919      	ldr	r1, [r3, #16]
 8002efe:	68fa      	ldr	r2, [r7, #12]
 8002f00:	4613      	mov	r3, r2
 8002f02:	005b      	lsls	r3, r3, #1
 8002f04:	4413      	add	r3, r2
 8002f06:	00db      	lsls	r3, r3, #3
 8002f08:	440b      	add	r3, r1
 8002f0a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	2200      	movs	r2, #0
 8002f16:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	2200      	movs	r2, #0
 8002f22:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	2200      	movs	r2, #0
 8002f28:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002f30:	68b9      	ldr	r1, [r7, #8]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	68fa      	ldr	r2, [r7, #12]
 8002f36:	3212      	adds	r2, #18
 8002f38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	3301      	adds	r3, #1
 8002f40:	60fb      	str	r3, [r7, #12]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2b03      	cmp	r3, #3
 8002f46:	d9d8      	bls.n	8002efa <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2200      	movs	r2, #0
 8002f58:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2200      	movs	r2, #0
 8002f64:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f6e:	461a      	mov	r2, r3
 8002f70:	2303      	movs	r3, #3
 8002f72:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	691a      	ldr	r2, [r3, #16]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f82:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f96:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8002f9a:	bf00      	nop
 8002f9c:	3714      	adds	r7, #20
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr
	...

08002fa8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b089      	sub	sp, #36	; 0x24
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002fb6:	4b89      	ldr	r3, [pc, #548]	; (80031dc <HAL_GPIO_Init+0x234>)
 8002fb8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002fba:	e194      	b.n	80032e6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	2101      	movs	r1, #1
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8002fc8:	4013      	ands	r3, r2
 8002fca:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	f000 8186 	beq.w	80032e0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f003 0303 	and.w	r3, r3, #3
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d005      	beq.n	8002fec <HAL_GPIO_Init+0x44>
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f003 0303 	and.w	r3, r3, #3
 8002fe8:	2b02      	cmp	r3, #2
 8002fea:	d130      	bne.n	800304e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	005b      	lsls	r3, r3, #1
 8002ff6:	2203      	movs	r2, #3
 8002ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffc:	43db      	mvns	r3, r3
 8002ffe:	69ba      	ldr	r2, [r7, #24]
 8003000:	4013      	ands	r3, r2
 8003002:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	68da      	ldr	r2, [r3, #12]
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	005b      	lsls	r3, r3, #1
 800300c:	fa02 f303 	lsl.w	r3, r2, r3
 8003010:	69ba      	ldr	r2, [r7, #24]
 8003012:	4313      	orrs	r3, r2
 8003014:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	69ba      	ldr	r2, [r7, #24]
 800301a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003022:	2201      	movs	r2, #1
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	fa02 f303 	lsl.w	r3, r2, r3
 800302a:	43db      	mvns	r3, r3
 800302c:	69ba      	ldr	r2, [r7, #24]
 800302e:	4013      	ands	r3, r2
 8003030:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	091b      	lsrs	r3, r3, #4
 8003038:	f003 0201 	and.w	r2, r3, #1
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	fa02 f303 	lsl.w	r3, r2, r3
 8003042:	69ba      	ldr	r2, [r7, #24]
 8003044:	4313      	orrs	r3, r2
 8003046:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	69ba      	ldr	r2, [r7, #24]
 800304c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	f003 0303 	and.w	r3, r3, #3
 8003056:	2b03      	cmp	r3, #3
 8003058:	d017      	beq.n	800308a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	005b      	lsls	r3, r3, #1
 8003064:	2203      	movs	r2, #3
 8003066:	fa02 f303 	lsl.w	r3, r2, r3
 800306a:	43db      	mvns	r3, r3
 800306c:	69ba      	ldr	r2, [r7, #24]
 800306e:	4013      	ands	r3, r2
 8003070:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	689a      	ldr	r2, [r3, #8]
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	005b      	lsls	r3, r3, #1
 800307a:	fa02 f303 	lsl.w	r3, r2, r3
 800307e:	69ba      	ldr	r2, [r7, #24]
 8003080:	4313      	orrs	r3, r2
 8003082:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	69ba      	ldr	r2, [r7, #24]
 8003088:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	f003 0303 	and.w	r3, r3, #3
 8003092:	2b02      	cmp	r3, #2
 8003094:	d123      	bne.n	80030de <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	08da      	lsrs	r2, r3, #3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	3208      	adds	r2, #8
 800309e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80030a4:	69fb      	ldr	r3, [r7, #28]
 80030a6:	f003 0307 	and.w	r3, r3, #7
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	220f      	movs	r2, #15
 80030ae:	fa02 f303 	lsl.w	r3, r2, r3
 80030b2:	43db      	mvns	r3, r3
 80030b4:	69ba      	ldr	r2, [r7, #24]
 80030b6:	4013      	ands	r3, r2
 80030b8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	691a      	ldr	r2, [r3, #16]
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	f003 0307 	and.w	r3, r3, #7
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ca:	69ba      	ldr	r2, [r7, #24]
 80030cc:	4313      	orrs	r3, r2
 80030ce:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	08da      	lsrs	r2, r3, #3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	3208      	adds	r2, #8
 80030d8:	69b9      	ldr	r1, [r7, #24]
 80030da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	005b      	lsls	r3, r3, #1
 80030e8:	2203      	movs	r2, #3
 80030ea:	fa02 f303 	lsl.w	r3, r2, r3
 80030ee:	43db      	mvns	r3, r3
 80030f0:	69ba      	ldr	r2, [r7, #24]
 80030f2:	4013      	ands	r3, r2
 80030f4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	f003 0203 	and.w	r2, r3, #3
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	005b      	lsls	r3, r3, #1
 8003102:	fa02 f303 	lsl.w	r3, r2, r3
 8003106:	69ba      	ldr	r2, [r7, #24]
 8003108:	4313      	orrs	r3, r2
 800310a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	69ba      	ldr	r2, [r7, #24]
 8003110:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800311a:	2b00      	cmp	r3, #0
 800311c:	f000 80e0 	beq.w	80032e0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003120:	4b2f      	ldr	r3, [pc, #188]	; (80031e0 <HAL_GPIO_Init+0x238>)
 8003122:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003126:	4a2e      	ldr	r2, [pc, #184]	; (80031e0 <HAL_GPIO_Init+0x238>)
 8003128:	f043 0302 	orr.w	r3, r3, #2
 800312c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003130:	4b2b      	ldr	r3, [pc, #172]	; (80031e0 <HAL_GPIO_Init+0x238>)
 8003132:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003136:	f003 0302 	and.w	r3, r3, #2
 800313a:	60fb      	str	r3, [r7, #12]
 800313c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800313e:	4a29      	ldr	r2, [pc, #164]	; (80031e4 <HAL_GPIO_Init+0x23c>)
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	089b      	lsrs	r3, r3, #2
 8003144:	3302      	adds	r3, #2
 8003146:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800314a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	f003 0303 	and.w	r3, r3, #3
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	220f      	movs	r2, #15
 8003156:	fa02 f303 	lsl.w	r3, r2, r3
 800315a:	43db      	mvns	r3, r3
 800315c:	69ba      	ldr	r2, [r7, #24]
 800315e:	4013      	ands	r3, r2
 8003160:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a20      	ldr	r2, [pc, #128]	; (80031e8 <HAL_GPIO_Init+0x240>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d052      	beq.n	8003210 <HAL_GPIO_Init+0x268>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4a1f      	ldr	r2, [pc, #124]	; (80031ec <HAL_GPIO_Init+0x244>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d031      	beq.n	80031d6 <HAL_GPIO_Init+0x22e>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4a1e      	ldr	r2, [pc, #120]	; (80031f0 <HAL_GPIO_Init+0x248>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d02b      	beq.n	80031d2 <HAL_GPIO_Init+0x22a>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4a1d      	ldr	r2, [pc, #116]	; (80031f4 <HAL_GPIO_Init+0x24c>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d025      	beq.n	80031ce <HAL_GPIO_Init+0x226>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4a1c      	ldr	r2, [pc, #112]	; (80031f8 <HAL_GPIO_Init+0x250>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d01f      	beq.n	80031ca <HAL_GPIO_Init+0x222>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4a1b      	ldr	r2, [pc, #108]	; (80031fc <HAL_GPIO_Init+0x254>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d019      	beq.n	80031c6 <HAL_GPIO_Init+0x21e>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a1a      	ldr	r2, [pc, #104]	; (8003200 <HAL_GPIO_Init+0x258>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d013      	beq.n	80031c2 <HAL_GPIO_Init+0x21a>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a19      	ldr	r2, [pc, #100]	; (8003204 <HAL_GPIO_Init+0x25c>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d00d      	beq.n	80031be <HAL_GPIO_Init+0x216>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4a18      	ldr	r2, [pc, #96]	; (8003208 <HAL_GPIO_Init+0x260>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d007      	beq.n	80031ba <HAL_GPIO_Init+0x212>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a17      	ldr	r2, [pc, #92]	; (800320c <HAL_GPIO_Init+0x264>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d101      	bne.n	80031b6 <HAL_GPIO_Init+0x20e>
 80031b2:	2309      	movs	r3, #9
 80031b4:	e02d      	b.n	8003212 <HAL_GPIO_Init+0x26a>
 80031b6:	230a      	movs	r3, #10
 80031b8:	e02b      	b.n	8003212 <HAL_GPIO_Init+0x26a>
 80031ba:	2308      	movs	r3, #8
 80031bc:	e029      	b.n	8003212 <HAL_GPIO_Init+0x26a>
 80031be:	2307      	movs	r3, #7
 80031c0:	e027      	b.n	8003212 <HAL_GPIO_Init+0x26a>
 80031c2:	2306      	movs	r3, #6
 80031c4:	e025      	b.n	8003212 <HAL_GPIO_Init+0x26a>
 80031c6:	2305      	movs	r3, #5
 80031c8:	e023      	b.n	8003212 <HAL_GPIO_Init+0x26a>
 80031ca:	2304      	movs	r3, #4
 80031cc:	e021      	b.n	8003212 <HAL_GPIO_Init+0x26a>
 80031ce:	2303      	movs	r3, #3
 80031d0:	e01f      	b.n	8003212 <HAL_GPIO_Init+0x26a>
 80031d2:	2302      	movs	r3, #2
 80031d4:	e01d      	b.n	8003212 <HAL_GPIO_Init+0x26a>
 80031d6:	2301      	movs	r3, #1
 80031d8:	e01b      	b.n	8003212 <HAL_GPIO_Init+0x26a>
 80031da:	bf00      	nop
 80031dc:	58000080 	.word	0x58000080
 80031e0:	58024400 	.word	0x58024400
 80031e4:	58000400 	.word	0x58000400
 80031e8:	58020000 	.word	0x58020000
 80031ec:	58020400 	.word	0x58020400
 80031f0:	58020800 	.word	0x58020800
 80031f4:	58020c00 	.word	0x58020c00
 80031f8:	58021000 	.word	0x58021000
 80031fc:	58021400 	.word	0x58021400
 8003200:	58021800 	.word	0x58021800
 8003204:	58021c00 	.word	0x58021c00
 8003208:	58022000 	.word	0x58022000
 800320c:	58022400 	.word	0x58022400
 8003210:	2300      	movs	r3, #0
 8003212:	69fa      	ldr	r2, [r7, #28]
 8003214:	f002 0203 	and.w	r2, r2, #3
 8003218:	0092      	lsls	r2, r2, #2
 800321a:	4093      	lsls	r3, r2
 800321c:	69ba      	ldr	r2, [r7, #24]
 800321e:	4313      	orrs	r3, r2
 8003220:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003222:	4938      	ldr	r1, [pc, #224]	; (8003304 <HAL_GPIO_Init+0x35c>)
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	089b      	lsrs	r3, r3, #2
 8003228:	3302      	adds	r3, #2
 800322a:	69ba      	ldr	r2, [r7, #24]
 800322c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003230:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	43db      	mvns	r3, r3
 800323c:	69ba      	ldr	r2, [r7, #24]
 800323e:	4013      	ands	r3, r2
 8003240:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d003      	beq.n	8003256 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800324e:	69ba      	ldr	r2, [r7, #24]
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	4313      	orrs	r3, r2
 8003254:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003256:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800325e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	43db      	mvns	r3, r3
 800326a:	69ba      	ldr	r2, [r7, #24]
 800326c:	4013      	ands	r3, r2
 800326e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003278:	2b00      	cmp	r3, #0
 800327a:	d003      	beq.n	8003284 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800327c:	69ba      	ldr	r2, [r7, #24]
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	4313      	orrs	r3, r2
 8003282:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003284:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003288:	69bb      	ldr	r3, [r7, #24]
 800328a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	43db      	mvns	r3, r3
 8003296:	69ba      	ldr	r2, [r7, #24]
 8003298:	4013      	ands	r3, r2
 800329a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d003      	beq.n	80032b0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80032a8:	69ba      	ldr	r2, [r7, #24]
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	69ba      	ldr	r2, [r7, #24]
 80032b4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	43db      	mvns	r3, r3
 80032c0:	69ba      	ldr	r2, [r7, #24]
 80032c2:	4013      	ands	r3, r2
 80032c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d003      	beq.n	80032da <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80032d2:	69ba      	ldr	r2, [r7, #24]
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	69ba      	ldr	r2, [r7, #24]
 80032de:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	3301      	adds	r3, #1
 80032e4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	fa22 f303 	lsr.w	r3, r2, r3
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	f47f ae63 	bne.w	8002fbc <HAL_GPIO_Init+0x14>
  }
}
 80032f6:	bf00      	nop
 80032f8:	bf00      	nop
 80032fa:	3724      	adds	r7, #36	; 0x24
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr
 8003304:	58000400 	.word	0x58000400

08003308 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003308:	b480      	push	{r7}
 800330a:	b083      	sub	sp, #12
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	460b      	mov	r3, r1
 8003312:	807b      	strh	r3, [r7, #2]
 8003314:	4613      	mov	r3, r2
 8003316:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003318:	787b      	ldrb	r3, [r7, #1]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d003      	beq.n	8003326 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800331e:	887a      	ldrh	r2, [r7, #2]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003324:	e003      	b.n	800332e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003326:	887b      	ldrh	r3, [r7, #2]
 8003328:	041a      	lsls	r2, r3, #16
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	619a      	str	r2, [r3, #24]
}
 800332e:	bf00      	nop
 8003330:	370c      	adds	r7, #12
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr

0800333a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800333a:	b480      	push	{r7}
 800333c:	b085      	sub	sp, #20
 800333e:	af00      	add	r7, sp, #0
 8003340:	6078      	str	r0, [r7, #4]
 8003342:	460b      	mov	r3, r1
 8003344:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	695b      	ldr	r3, [r3, #20]
 800334a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800334c:	887a      	ldrh	r2, [r7, #2]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	4013      	ands	r3, r2
 8003352:	041a      	lsls	r2, r3, #16
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	43d9      	mvns	r1, r3
 8003358:	887b      	ldrh	r3, [r7, #2]
 800335a:	400b      	ands	r3, r1
 800335c:	431a      	orrs	r2, r3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	619a      	str	r2, [r3, #24]
}
 8003362:	bf00      	nop
 8003364:	3714      	adds	r7, #20
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr

0800336e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800336e:	b580      	push	{r7, lr}
 8003370:	b082      	sub	sp, #8
 8003372:	af00      	add	r7, sp, #0
 8003374:	4603      	mov	r3, r0
 8003376:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8003378:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800337c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003380:	88fb      	ldrh	r3, [r7, #6]
 8003382:	4013      	ands	r3, r2
 8003384:	2b00      	cmp	r3, #0
 8003386:	d008      	beq.n	800339a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003388:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800338c:	88fb      	ldrh	r3, [r7, #6]
 800338e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003392:	88fb      	ldrh	r3, [r7, #6]
 8003394:	4618      	mov	r0, r3
 8003396:	f7fd fe67 	bl	8001068 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800339a:	bf00      	nop
 800339c:	3708      	adds	r7, #8
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
	...

080033a4 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b083      	sub	sp, #12
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80033ac:	4a08      	ldr	r2, [pc, #32]	; (80033d0 <HAL_HSEM_FastTake+0x2c>)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	3320      	adds	r3, #32
 80033b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033b6:	4a07      	ldr	r2, [pc, #28]	; (80033d4 <HAL_HSEM_FastTake+0x30>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d101      	bne.n	80033c0 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80033bc:	2300      	movs	r3, #0
 80033be:	e000      	b.n	80033c2 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	370c      	adds	r7, #12
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr
 80033ce:	bf00      	nop
 80033d0:	58026400 	.word	0x58026400
 80033d4:	80000300 	.word	0x80000300

080033d8 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80033e2:	4906      	ldr	r1, [pc, #24]	; (80033fc <HAL_HSEM_Release+0x24>)
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80033f0:	bf00      	nop
 80033f2:	370c      	adds	r7, #12
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr
 80033fc:	58026400 	.word	0x58026400

08003400 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8003400:	b480      	push	{r7}
 8003402:	b083      	sub	sp, #12
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8003408:	4b05      	ldr	r3, [pc, #20]	; (8003420 <HAL_HSEM_ActivateNotification+0x20>)
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	4904      	ldr	r1, [pc, #16]	; (8003420 <HAL_HSEM_ActivateNotification+0x20>)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4313      	orrs	r3, r2
 8003412:	600b      	str	r3, [r1, #0]
#endif
}
 8003414:	bf00      	nop
 8003416:	370c      	adds	r7, #12
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr
 8003420:	58026500 	.word	0x58026500

08003424 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b082      	sub	sp, #8
 8003428:	af00      	add	r7, sp, #0
    /*Clear Flags*/
    HSEM->C2ICR = ((uint32_t)statusreg);
  }
#else
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 800342a:	4b0a      	ldr	r3, [pc, #40]	; (8003454 <HAL_HSEM_IRQHandler+0x30>)
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8003430:	4b08      	ldr	r3, [pc, #32]	; (8003454 <HAL_HSEM_IRQHandler+0x30>)
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	43db      	mvns	r3, r3
 8003438:	4906      	ldr	r1, [pc, #24]	; (8003454 <HAL_HSEM_IRQHandler+0x30>)
 800343a:	4013      	ands	r3, r2
 800343c:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 800343e:	4a05      	ldr	r2, [pc, #20]	; (8003454 <HAL_HSEM_IRQHandler+0x30>)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6053      	str	r3, [r2, #4]

#endif
  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	f7fd fff9 	bl	800143c <HAL_HSEM_FreeCallback>
}
 800344a:	bf00      	nop
 800344c:	3708      	adds	r7, #8
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	58026500 	.word	0x58026500

08003458 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b084      	sub	sp, #16
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003460:	4b29      	ldr	r3, [pc, #164]	; (8003508 <HAL_PWREx_ConfigSupply+0xb0>)
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	f003 0307 	and.w	r3, r3, #7
 8003468:	2b06      	cmp	r3, #6
 800346a:	d00a      	beq.n	8003482 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800346c:	4b26      	ldr	r3, [pc, #152]	; (8003508 <HAL_PWREx_ConfigSupply+0xb0>)
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003474:	687a      	ldr	r2, [r7, #4]
 8003476:	429a      	cmp	r2, r3
 8003478:	d001      	beq.n	800347e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e040      	b.n	8003500 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800347e:	2300      	movs	r3, #0
 8003480:	e03e      	b.n	8003500 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003482:	4b21      	ldr	r3, [pc, #132]	; (8003508 <HAL_PWREx_ConfigSupply+0xb0>)
 8003484:	68db      	ldr	r3, [r3, #12]
 8003486:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800348a:	491f      	ldr	r1, [pc, #124]	; (8003508 <HAL_PWREx_ConfigSupply+0xb0>)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	4313      	orrs	r3, r2
 8003490:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003492:	f7fe fa25 	bl	80018e0 <HAL_GetTick>
 8003496:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003498:	e009      	b.n	80034ae <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800349a:	f7fe fa21 	bl	80018e0 <HAL_GetTick>
 800349e:	4602      	mov	r2, r0
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	1ad3      	subs	r3, r2, r3
 80034a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80034a8:	d901      	bls.n	80034ae <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e028      	b.n	8003500 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80034ae:	4b16      	ldr	r3, [pc, #88]	; (8003508 <HAL_PWREx_ConfigSupply+0xb0>)
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034ba:	d1ee      	bne.n	800349a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2b1e      	cmp	r3, #30
 80034c0:	d008      	beq.n	80034d4 <HAL_PWREx_ConfigSupply+0x7c>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2b2e      	cmp	r3, #46	; 0x2e
 80034c6:	d005      	beq.n	80034d4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2b1d      	cmp	r3, #29
 80034cc:	d002      	beq.n	80034d4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2b2d      	cmp	r3, #45	; 0x2d
 80034d2:	d114      	bne.n	80034fe <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80034d4:	f7fe fa04 	bl	80018e0 <HAL_GetTick>
 80034d8:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80034da:	e009      	b.n	80034f0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80034dc:	f7fe fa00 	bl	80018e0 <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80034ea:	d901      	bls.n	80034f0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e007      	b.n	8003500 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80034f0:	4b05      	ldr	r3, [pc, #20]	; (8003508 <HAL_PWREx_ConfigSupply+0xb0>)
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034fc:	d1ee      	bne.n	80034dc <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80034fe:	2300      	movs	r3, #0
}
 8003500:	4618      	mov	r0, r3
 8003502:	3710      	adds	r7, #16
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}
 8003508:	58024800 	.word	0x58024800

0800350c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b08c      	sub	sp, #48	; 0x30
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d102      	bne.n	8003520 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	f000 bc1d 	b.w	8003d5a <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0301 	and.w	r3, r3, #1
 8003528:	2b00      	cmp	r3, #0
 800352a:	f000 8087 	beq.w	800363c <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800352e:	4b99      	ldr	r3, [pc, #612]	; (8003794 <HAL_RCC_OscConfig+0x288>)
 8003530:	691b      	ldr	r3, [r3, #16]
 8003532:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003536:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003538:	4b96      	ldr	r3, [pc, #600]	; (8003794 <HAL_RCC_OscConfig+0x288>)
 800353a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800353c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800353e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003540:	2b10      	cmp	r3, #16
 8003542:	d007      	beq.n	8003554 <HAL_RCC_OscConfig+0x48>
 8003544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003546:	2b18      	cmp	r3, #24
 8003548:	d110      	bne.n	800356c <HAL_RCC_OscConfig+0x60>
 800354a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800354c:	f003 0303 	and.w	r3, r3, #3
 8003550:	2b02      	cmp	r3, #2
 8003552:	d10b      	bne.n	800356c <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003554:	4b8f      	ldr	r3, [pc, #572]	; (8003794 <HAL_RCC_OscConfig+0x288>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800355c:	2b00      	cmp	r3, #0
 800355e:	d06c      	beq.n	800363a <HAL_RCC_OscConfig+0x12e>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d168      	bne.n	800363a <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e3f6      	b.n	8003d5a <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003574:	d106      	bne.n	8003584 <HAL_RCC_OscConfig+0x78>
 8003576:	4b87      	ldr	r3, [pc, #540]	; (8003794 <HAL_RCC_OscConfig+0x288>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a86      	ldr	r2, [pc, #536]	; (8003794 <HAL_RCC_OscConfig+0x288>)
 800357c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003580:	6013      	str	r3, [r2, #0]
 8003582:	e02e      	b.n	80035e2 <HAL_RCC_OscConfig+0xd6>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d10c      	bne.n	80035a6 <HAL_RCC_OscConfig+0x9a>
 800358c:	4b81      	ldr	r3, [pc, #516]	; (8003794 <HAL_RCC_OscConfig+0x288>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a80      	ldr	r2, [pc, #512]	; (8003794 <HAL_RCC_OscConfig+0x288>)
 8003592:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003596:	6013      	str	r3, [r2, #0]
 8003598:	4b7e      	ldr	r3, [pc, #504]	; (8003794 <HAL_RCC_OscConfig+0x288>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a7d      	ldr	r2, [pc, #500]	; (8003794 <HAL_RCC_OscConfig+0x288>)
 800359e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035a2:	6013      	str	r3, [r2, #0]
 80035a4:	e01d      	b.n	80035e2 <HAL_RCC_OscConfig+0xd6>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035ae:	d10c      	bne.n	80035ca <HAL_RCC_OscConfig+0xbe>
 80035b0:	4b78      	ldr	r3, [pc, #480]	; (8003794 <HAL_RCC_OscConfig+0x288>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a77      	ldr	r2, [pc, #476]	; (8003794 <HAL_RCC_OscConfig+0x288>)
 80035b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035ba:	6013      	str	r3, [r2, #0]
 80035bc:	4b75      	ldr	r3, [pc, #468]	; (8003794 <HAL_RCC_OscConfig+0x288>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a74      	ldr	r2, [pc, #464]	; (8003794 <HAL_RCC_OscConfig+0x288>)
 80035c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035c6:	6013      	str	r3, [r2, #0]
 80035c8:	e00b      	b.n	80035e2 <HAL_RCC_OscConfig+0xd6>
 80035ca:	4b72      	ldr	r3, [pc, #456]	; (8003794 <HAL_RCC_OscConfig+0x288>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a71      	ldr	r2, [pc, #452]	; (8003794 <HAL_RCC_OscConfig+0x288>)
 80035d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035d4:	6013      	str	r3, [r2, #0]
 80035d6:	4b6f      	ldr	r3, [pc, #444]	; (8003794 <HAL_RCC_OscConfig+0x288>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a6e      	ldr	r2, [pc, #440]	; (8003794 <HAL_RCC_OscConfig+0x288>)
 80035dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035e0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d013      	beq.n	8003612 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ea:	f7fe f979 	bl	80018e0 <HAL_GetTick>
 80035ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80035f0:	e008      	b.n	8003604 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035f2:	f7fe f975 	bl	80018e0 <HAL_GetTick>
 80035f6:	4602      	mov	r2, r0
 80035f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	2b64      	cmp	r3, #100	; 0x64
 80035fe:	d901      	bls.n	8003604 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8003600:	2303      	movs	r3, #3
 8003602:	e3aa      	b.n	8003d5a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003604:	4b63      	ldr	r3, [pc, #396]	; (8003794 <HAL_RCC_OscConfig+0x288>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800360c:	2b00      	cmp	r3, #0
 800360e:	d0f0      	beq.n	80035f2 <HAL_RCC_OscConfig+0xe6>
 8003610:	e014      	b.n	800363c <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003612:	f7fe f965 	bl	80018e0 <HAL_GetTick>
 8003616:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003618:	e008      	b.n	800362c <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800361a:	f7fe f961 	bl	80018e0 <HAL_GetTick>
 800361e:	4602      	mov	r2, r0
 8003620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	2b64      	cmp	r3, #100	; 0x64
 8003626:	d901      	bls.n	800362c <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8003628:	2303      	movs	r3, #3
 800362a:	e396      	b.n	8003d5a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800362c:	4b59      	ldr	r3, [pc, #356]	; (8003794 <HAL_RCC_OscConfig+0x288>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003634:	2b00      	cmp	r3, #0
 8003636:	d1f0      	bne.n	800361a <HAL_RCC_OscConfig+0x10e>
 8003638:	e000      	b.n	800363c <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800363a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 0302 	and.w	r3, r3, #2
 8003644:	2b00      	cmp	r3, #0
 8003646:	f000 80cb 	beq.w	80037e0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800364a:	4b52      	ldr	r3, [pc, #328]	; (8003794 <HAL_RCC_OscConfig+0x288>)
 800364c:	691b      	ldr	r3, [r3, #16]
 800364e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003652:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003654:	4b4f      	ldr	r3, [pc, #316]	; (8003794 <HAL_RCC_OscConfig+0x288>)
 8003656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003658:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800365a:	6a3b      	ldr	r3, [r7, #32]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d007      	beq.n	8003670 <HAL_RCC_OscConfig+0x164>
 8003660:	6a3b      	ldr	r3, [r7, #32]
 8003662:	2b18      	cmp	r3, #24
 8003664:	d156      	bne.n	8003714 <HAL_RCC_OscConfig+0x208>
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	f003 0303 	and.w	r3, r3, #3
 800366c:	2b00      	cmp	r3, #0
 800366e:	d151      	bne.n	8003714 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003670:	4b48      	ldr	r3, [pc, #288]	; (8003794 <HAL_RCC_OscConfig+0x288>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 0304 	and.w	r3, r3, #4
 8003678:	2b00      	cmp	r3, #0
 800367a:	d005      	beq.n	8003688 <HAL_RCC_OscConfig+0x17c>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d101      	bne.n	8003688 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e368      	b.n	8003d5a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003688:	4b42      	ldr	r3, [pc, #264]	; (8003794 <HAL_RCC_OscConfig+0x288>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f023 0219 	bic.w	r2, r3, #25
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	68db      	ldr	r3, [r3, #12]
 8003694:	493f      	ldr	r1, [pc, #252]	; (8003794 <HAL_RCC_OscConfig+0x288>)
 8003696:	4313      	orrs	r3, r2
 8003698:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800369a:	f7fe f921 	bl	80018e0 <HAL_GetTick>
 800369e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80036a0:	e008      	b.n	80036b4 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036a2:	f7fe f91d 	bl	80018e0 <HAL_GetTick>
 80036a6:	4602      	mov	r2, r0
 80036a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036aa:	1ad3      	subs	r3, r2, r3
 80036ac:	2b02      	cmp	r3, #2
 80036ae:	d901      	bls.n	80036b4 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 80036b0:	2303      	movs	r3, #3
 80036b2:	e352      	b.n	8003d5a <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80036b4:	4b37      	ldr	r3, [pc, #220]	; (8003794 <HAL_RCC_OscConfig+0x288>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 0304 	and.w	r3, r3, #4
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d0f0      	beq.n	80036a2 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036c0:	f7fe f93e 	bl	8001940 <HAL_GetREVID>
 80036c4:	4603      	mov	r3, r0
 80036c6:	f241 0203 	movw	r2, #4099	; 0x1003
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d817      	bhi.n	80036fe <HAL_RCC_OscConfig+0x1f2>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	691b      	ldr	r3, [r3, #16]
 80036d2:	2b40      	cmp	r3, #64	; 0x40
 80036d4:	d108      	bne.n	80036e8 <HAL_RCC_OscConfig+0x1dc>
 80036d6:	4b2f      	ldr	r3, [pc, #188]	; (8003794 <HAL_RCC_OscConfig+0x288>)
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80036de:	4a2d      	ldr	r2, [pc, #180]	; (8003794 <HAL_RCC_OscConfig+0x288>)
 80036e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036e4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036e6:	e07b      	b.n	80037e0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036e8:	4b2a      	ldr	r3, [pc, #168]	; (8003794 <HAL_RCC_OscConfig+0x288>)
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	691b      	ldr	r3, [r3, #16]
 80036f4:	031b      	lsls	r3, r3, #12
 80036f6:	4927      	ldr	r1, [pc, #156]	; (8003794 <HAL_RCC_OscConfig+0x288>)
 80036f8:	4313      	orrs	r3, r2
 80036fa:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036fc:	e070      	b.n	80037e0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036fe:	4b25      	ldr	r3, [pc, #148]	; (8003794 <HAL_RCC_OscConfig+0x288>)
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	691b      	ldr	r3, [r3, #16]
 800370a:	061b      	lsls	r3, r3, #24
 800370c:	4921      	ldr	r1, [pc, #132]	; (8003794 <HAL_RCC_OscConfig+0x288>)
 800370e:	4313      	orrs	r3, r2
 8003710:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003712:	e065      	b.n	80037e0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d048      	beq.n	80037ae <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800371c:	4b1d      	ldr	r3, [pc, #116]	; (8003794 <HAL_RCC_OscConfig+0x288>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f023 0219 	bic.w	r2, r3, #25
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	491a      	ldr	r1, [pc, #104]	; (8003794 <HAL_RCC_OscConfig+0x288>)
 800372a:	4313      	orrs	r3, r2
 800372c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800372e:	f7fe f8d7 	bl	80018e0 <HAL_GetTick>
 8003732:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003734:	e008      	b.n	8003748 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003736:	f7fe f8d3 	bl	80018e0 <HAL_GetTick>
 800373a:	4602      	mov	r2, r0
 800373c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	2b02      	cmp	r3, #2
 8003742:	d901      	bls.n	8003748 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8003744:	2303      	movs	r3, #3
 8003746:	e308      	b.n	8003d5a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003748:	4b12      	ldr	r3, [pc, #72]	; (8003794 <HAL_RCC_OscConfig+0x288>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 0304 	and.w	r3, r3, #4
 8003750:	2b00      	cmp	r3, #0
 8003752:	d0f0      	beq.n	8003736 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003754:	f7fe f8f4 	bl	8001940 <HAL_GetREVID>
 8003758:	4603      	mov	r3, r0
 800375a:	f241 0203 	movw	r2, #4099	; 0x1003
 800375e:	4293      	cmp	r3, r2
 8003760:	d81a      	bhi.n	8003798 <HAL_RCC_OscConfig+0x28c>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	691b      	ldr	r3, [r3, #16]
 8003766:	2b40      	cmp	r3, #64	; 0x40
 8003768:	d108      	bne.n	800377c <HAL_RCC_OscConfig+0x270>
 800376a:	4b0a      	ldr	r3, [pc, #40]	; (8003794 <HAL_RCC_OscConfig+0x288>)
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003772:	4a08      	ldr	r2, [pc, #32]	; (8003794 <HAL_RCC_OscConfig+0x288>)
 8003774:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003778:	6053      	str	r3, [r2, #4]
 800377a:	e031      	b.n	80037e0 <HAL_RCC_OscConfig+0x2d4>
 800377c:	4b05      	ldr	r3, [pc, #20]	; (8003794 <HAL_RCC_OscConfig+0x288>)
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	691b      	ldr	r3, [r3, #16]
 8003788:	031b      	lsls	r3, r3, #12
 800378a:	4902      	ldr	r1, [pc, #8]	; (8003794 <HAL_RCC_OscConfig+0x288>)
 800378c:	4313      	orrs	r3, r2
 800378e:	604b      	str	r3, [r1, #4]
 8003790:	e026      	b.n	80037e0 <HAL_RCC_OscConfig+0x2d4>
 8003792:	bf00      	nop
 8003794:	58024400 	.word	0x58024400
 8003798:	4b9a      	ldr	r3, [pc, #616]	; (8003a04 <HAL_RCC_OscConfig+0x4f8>)
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	691b      	ldr	r3, [r3, #16]
 80037a4:	061b      	lsls	r3, r3, #24
 80037a6:	4997      	ldr	r1, [pc, #604]	; (8003a04 <HAL_RCC_OscConfig+0x4f8>)
 80037a8:	4313      	orrs	r3, r2
 80037aa:	604b      	str	r3, [r1, #4]
 80037ac:	e018      	b.n	80037e0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037ae:	4b95      	ldr	r3, [pc, #596]	; (8003a04 <HAL_RCC_OscConfig+0x4f8>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a94      	ldr	r2, [pc, #592]	; (8003a04 <HAL_RCC_OscConfig+0x4f8>)
 80037b4:	f023 0301 	bic.w	r3, r3, #1
 80037b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ba:	f7fe f891 	bl	80018e0 <HAL_GetTick>
 80037be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80037c0:	e008      	b.n	80037d4 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037c2:	f7fe f88d 	bl	80018e0 <HAL_GetTick>
 80037c6:	4602      	mov	r2, r0
 80037c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ca:	1ad3      	subs	r3, r2, r3
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d901      	bls.n	80037d4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80037d0:	2303      	movs	r3, #3
 80037d2:	e2c2      	b.n	8003d5a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80037d4:	4b8b      	ldr	r3, [pc, #556]	; (8003a04 <HAL_RCC_OscConfig+0x4f8>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0304 	and.w	r3, r3, #4
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d1f0      	bne.n	80037c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0310 	and.w	r3, r3, #16
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	f000 80a9 	beq.w	8003940 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037ee:	4b85      	ldr	r3, [pc, #532]	; (8003a04 <HAL_RCC_OscConfig+0x4f8>)
 80037f0:	691b      	ldr	r3, [r3, #16]
 80037f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80037f6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80037f8:	4b82      	ldr	r3, [pc, #520]	; (8003a04 <HAL_RCC_OscConfig+0x4f8>)
 80037fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037fc:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80037fe:	69bb      	ldr	r3, [r7, #24]
 8003800:	2b08      	cmp	r3, #8
 8003802:	d007      	beq.n	8003814 <HAL_RCC_OscConfig+0x308>
 8003804:	69bb      	ldr	r3, [r7, #24]
 8003806:	2b18      	cmp	r3, #24
 8003808:	d13a      	bne.n	8003880 <HAL_RCC_OscConfig+0x374>
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	f003 0303 	and.w	r3, r3, #3
 8003810:	2b01      	cmp	r3, #1
 8003812:	d135      	bne.n	8003880 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003814:	4b7b      	ldr	r3, [pc, #492]	; (8003a04 <HAL_RCC_OscConfig+0x4f8>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800381c:	2b00      	cmp	r3, #0
 800381e:	d005      	beq.n	800382c <HAL_RCC_OscConfig+0x320>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	69db      	ldr	r3, [r3, #28]
 8003824:	2b80      	cmp	r3, #128	; 0x80
 8003826:	d001      	beq.n	800382c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e296      	b.n	8003d5a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800382c:	f7fe f888 	bl	8001940 <HAL_GetREVID>
 8003830:	4603      	mov	r3, r0
 8003832:	f241 0203 	movw	r2, #4099	; 0x1003
 8003836:	4293      	cmp	r3, r2
 8003838:	d817      	bhi.n	800386a <HAL_RCC_OscConfig+0x35e>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6a1b      	ldr	r3, [r3, #32]
 800383e:	2b20      	cmp	r3, #32
 8003840:	d108      	bne.n	8003854 <HAL_RCC_OscConfig+0x348>
 8003842:	4b70      	ldr	r3, [pc, #448]	; (8003a04 <HAL_RCC_OscConfig+0x4f8>)
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800384a:	4a6e      	ldr	r2, [pc, #440]	; (8003a04 <HAL_RCC_OscConfig+0x4f8>)
 800384c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003850:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003852:	e075      	b.n	8003940 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003854:	4b6b      	ldr	r3, [pc, #428]	; (8003a04 <HAL_RCC_OscConfig+0x4f8>)
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6a1b      	ldr	r3, [r3, #32]
 8003860:	069b      	lsls	r3, r3, #26
 8003862:	4968      	ldr	r1, [pc, #416]	; (8003a04 <HAL_RCC_OscConfig+0x4f8>)
 8003864:	4313      	orrs	r3, r2
 8003866:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003868:	e06a      	b.n	8003940 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800386a:	4b66      	ldr	r3, [pc, #408]	; (8003a04 <HAL_RCC_OscConfig+0x4f8>)
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a1b      	ldr	r3, [r3, #32]
 8003876:	061b      	lsls	r3, r3, #24
 8003878:	4962      	ldr	r1, [pc, #392]	; (8003a04 <HAL_RCC_OscConfig+0x4f8>)
 800387a:	4313      	orrs	r3, r2
 800387c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800387e:	e05f      	b.n	8003940 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	69db      	ldr	r3, [r3, #28]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d042      	beq.n	800390e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003888:	4b5e      	ldr	r3, [pc, #376]	; (8003a04 <HAL_RCC_OscConfig+0x4f8>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a5d      	ldr	r2, [pc, #372]	; (8003a04 <HAL_RCC_OscConfig+0x4f8>)
 800388e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003892:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003894:	f7fe f824 	bl	80018e0 <HAL_GetTick>
 8003898:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800389a:	e008      	b.n	80038ae <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800389c:	f7fe f820 	bl	80018e0 <HAL_GetTick>
 80038a0:	4602      	mov	r2, r0
 80038a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d901      	bls.n	80038ae <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80038aa:	2303      	movs	r3, #3
 80038ac:	e255      	b.n	8003d5a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80038ae:	4b55      	ldr	r3, [pc, #340]	; (8003a04 <HAL_RCC_OscConfig+0x4f8>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d0f0      	beq.n	800389c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80038ba:	f7fe f841 	bl	8001940 <HAL_GetREVID>
 80038be:	4603      	mov	r3, r0
 80038c0:	f241 0203 	movw	r2, #4099	; 0x1003
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d817      	bhi.n	80038f8 <HAL_RCC_OscConfig+0x3ec>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6a1b      	ldr	r3, [r3, #32]
 80038cc:	2b20      	cmp	r3, #32
 80038ce:	d108      	bne.n	80038e2 <HAL_RCC_OscConfig+0x3d6>
 80038d0:	4b4c      	ldr	r3, [pc, #304]	; (8003a04 <HAL_RCC_OscConfig+0x4f8>)
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80038d8:	4a4a      	ldr	r2, [pc, #296]	; (8003a04 <HAL_RCC_OscConfig+0x4f8>)
 80038da:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80038de:	6053      	str	r3, [r2, #4]
 80038e0:	e02e      	b.n	8003940 <HAL_RCC_OscConfig+0x434>
 80038e2:	4b48      	ldr	r3, [pc, #288]	; (8003a04 <HAL_RCC_OscConfig+0x4f8>)
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6a1b      	ldr	r3, [r3, #32]
 80038ee:	069b      	lsls	r3, r3, #26
 80038f0:	4944      	ldr	r1, [pc, #272]	; (8003a04 <HAL_RCC_OscConfig+0x4f8>)
 80038f2:	4313      	orrs	r3, r2
 80038f4:	604b      	str	r3, [r1, #4]
 80038f6:	e023      	b.n	8003940 <HAL_RCC_OscConfig+0x434>
 80038f8:	4b42      	ldr	r3, [pc, #264]	; (8003a04 <HAL_RCC_OscConfig+0x4f8>)
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6a1b      	ldr	r3, [r3, #32]
 8003904:	061b      	lsls	r3, r3, #24
 8003906:	493f      	ldr	r1, [pc, #252]	; (8003a04 <HAL_RCC_OscConfig+0x4f8>)
 8003908:	4313      	orrs	r3, r2
 800390a:	60cb      	str	r3, [r1, #12]
 800390c:	e018      	b.n	8003940 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800390e:	4b3d      	ldr	r3, [pc, #244]	; (8003a04 <HAL_RCC_OscConfig+0x4f8>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a3c      	ldr	r2, [pc, #240]	; (8003a04 <HAL_RCC_OscConfig+0x4f8>)
 8003914:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003918:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800391a:	f7fd ffe1 	bl	80018e0 <HAL_GetTick>
 800391e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003920:	e008      	b.n	8003934 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003922:	f7fd ffdd 	bl	80018e0 <HAL_GetTick>
 8003926:	4602      	mov	r2, r0
 8003928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392a:	1ad3      	subs	r3, r2, r3
 800392c:	2b02      	cmp	r3, #2
 800392e:	d901      	bls.n	8003934 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003930:	2303      	movs	r3, #3
 8003932:	e212      	b.n	8003d5a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003934:	4b33      	ldr	r3, [pc, #204]	; (8003a04 <HAL_RCC_OscConfig+0x4f8>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800393c:	2b00      	cmp	r3, #0
 800393e:	d1f0      	bne.n	8003922 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 0308 	and.w	r3, r3, #8
 8003948:	2b00      	cmp	r3, #0
 800394a:	d036      	beq.n	80039ba <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	695b      	ldr	r3, [r3, #20]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d019      	beq.n	8003988 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003954:	4b2b      	ldr	r3, [pc, #172]	; (8003a04 <HAL_RCC_OscConfig+0x4f8>)
 8003956:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003958:	4a2a      	ldr	r2, [pc, #168]	; (8003a04 <HAL_RCC_OscConfig+0x4f8>)
 800395a:	f043 0301 	orr.w	r3, r3, #1
 800395e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003960:	f7fd ffbe 	bl	80018e0 <HAL_GetTick>
 8003964:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003966:	e008      	b.n	800397a <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003968:	f7fd ffba 	bl	80018e0 <HAL_GetTick>
 800396c:	4602      	mov	r2, r0
 800396e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	2b02      	cmp	r3, #2
 8003974:	d901      	bls.n	800397a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e1ef      	b.n	8003d5a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800397a:	4b22      	ldr	r3, [pc, #136]	; (8003a04 <HAL_RCC_OscConfig+0x4f8>)
 800397c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800397e:	f003 0302 	and.w	r3, r3, #2
 8003982:	2b00      	cmp	r3, #0
 8003984:	d0f0      	beq.n	8003968 <HAL_RCC_OscConfig+0x45c>
 8003986:	e018      	b.n	80039ba <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003988:	4b1e      	ldr	r3, [pc, #120]	; (8003a04 <HAL_RCC_OscConfig+0x4f8>)
 800398a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800398c:	4a1d      	ldr	r2, [pc, #116]	; (8003a04 <HAL_RCC_OscConfig+0x4f8>)
 800398e:	f023 0301 	bic.w	r3, r3, #1
 8003992:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003994:	f7fd ffa4 	bl	80018e0 <HAL_GetTick>
 8003998:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800399a:	e008      	b.n	80039ae <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800399c:	f7fd ffa0 	bl	80018e0 <HAL_GetTick>
 80039a0:	4602      	mov	r2, r0
 80039a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	2b02      	cmp	r3, #2
 80039a8:	d901      	bls.n	80039ae <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80039aa:	2303      	movs	r3, #3
 80039ac:	e1d5      	b.n	8003d5a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80039ae:	4b15      	ldr	r3, [pc, #84]	; (8003a04 <HAL_RCC_OscConfig+0x4f8>)
 80039b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039b2:	f003 0302 	and.w	r3, r3, #2
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d1f0      	bne.n	800399c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0320 	and.w	r3, r3, #32
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d039      	beq.n	8003a3a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	699b      	ldr	r3, [r3, #24]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d01c      	beq.n	8003a08 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80039ce:	4b0d      	ldr	r3, [pc, #52]	; (8003a04 <HAL_RCC_OscConfig+0x4f8>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a0c      	ldr	r2, [pc, #48]	; (8003a04 <HAL_RCC_OscConfig+0x4f8>)
 80039d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80039d8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80039da:	f7fd ff81 	bl	80018e0 <HAL_GetTick>
 80039de:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80039e0:	e008      	b.n	80039f4 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80039e2:	f7fd ff7d 	bl	80018e0 <HAL_GetTick>
 80039e6:	4602      	mov	r2, r0
 80039e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	2b02      	cmp	r3, #2
 80039ee:	d901      	bls.n	80039f4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80039f0:	2303      	movs	r3, #3
 80039f2:	e1b2      	b.n	8003d5a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80039f4:	4b03      	ldr	r3, [pc, #12]	; (8003a04 <HAL_RCC_OscConfig+0x4f8>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d0f0      	beq.n	80039e2 <HAL_RCC_OscConfig+0x4d6>
 8003a00:	e01b      	b.n	8003a3a <HAL_RCC_OscConfig+0x52e>
 8003a02:	bf00      	nop
 8003a04:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003a08:	4b9b      	ldr	r3, [pc, #620]	; (8003c78 <HAL_RCC_OscConfig+0x76c>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a9a      	ldr	r2, [pc, #616]	; (8003c78 <HAL_RCC_OscConfig+0x76c>)
 8003a0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a12:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003a14:	f7fd ff64 	bl	80018e0 <HAL_GetTick>
 8003a18:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003a1a:	e008      	b.n	8003a2e <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003a1c:	f7fd ff60 	bl	80018e0 <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	2b02      	cmp	r3, #2
 8003a28:	d901      	bls.n	8003a2e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	e195      	b.n	8003d5a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003a2e:	4b92      	ldr	r3, [pc, #584]	; (8003c78 <HAL_RCC_OscConfig+0x76c>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d1f0      	bne.n	8003a1c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0304 	and.w	r3, r3, #4
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	f000 8081 	beq.w	8003b4a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003a48:	4b8c      	ldr	r3, [pc, #560]	; (8003c7c <HAL_RCC_OscConfig+0x770>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a8b      	ldr	r2, [pc, #556]	; (8003c7c <HAL_RCC_OscConfig+0x770>)
 8003a4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a52:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a54:	f7fd ff44 	bl	80018e0 <HAL_GetTick>
 8003a58:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a5a:	e008      	b.n	8003a6e <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003a5c:	f7fd ff40 	bl	80018e0 <HAL_GetTick>
 8003a60:	4602      	mov	r2, r0
 8003a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	2b64      	cmp	r3, #100	; 0x64
 8003a68:	d901      	bls.n	8003a6e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	e175      	b.n	8003d5a <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a6e:	4b83      	ldr	r3, [pc, #524]	; (8003c7c <HAL_RCC_OscConfig+0x770>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d0f0      	beq.n	8003a5c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d106      	bne.n	8003a90 <HAL_RCC_OscConfig+0x584>
 8003a82:	4b7d      	ldr	r3, [pc, #500]	; (8003c78 <HAL_RCC_OscConfig+0x76c>)
 8003a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a86:	4a7c      	ldr	r2, [pc, #496]	; (8003c78 <HAL_RCC_OscConfig+0x76c>)
 8003a88:	f043 0301 	orr.w	r3, r3, #1
 8003a8c:	6713      	str	r3, [r2, #112]	; 0x70
 8003a8e:	e02d      	b.n	8003aec <HAL_RCC_OscConfig+0x5e0>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d10c      	bne.n	8003ab2 <HAL_RCC_OscConfig+0x5a6>
 8003a98:	4b77      	ldr	r3, [pc, #476]	; (8003c78 <HAL_RCC_OscConfig+0x76c>)
 8003a9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a9c:	4a76      	ldr	r2, [pc, #472]	; (8003c78 <HAL_RCC_OscConfig+0x76c>)
 8003a9e:	f023 0301 	bic.w	r3, r3, #1
 8003aa2:	6713      	str	r3, [r2, #112]	; 0x70
 8003aa4:	4b74      	ldr	r3, [pc, #464]	; (8003c78 <HAL_RCC_OscConfig+0x76c>)
 8003aa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aa8:	4a73      	ldr	r2, [pc, #460]	; (8003c78 <HAL_RCC_OscConfig+0x76c>)
 8003aaa:	f023 0304 	bic.w	r3, r3, #4
 8003aae:	6713      	str	r3, [r2, #112]	; 0x70
 8003ab0:	e01c      	b.n	8003aec <HAL_RCC_OscConfig+0x5e0>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	2b05      	cmp	r3, #5
 8003ab8:	d10c      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x5c8>
 8003aba:	4b6f      	ldr	r3, [pc, #444]	; (8003c78 <HAL_RCC_OscConfig+0x76c>)
 8003abc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003abe:	4a6e      	ldr	r2, [pc, #440]	; (8003c78 <HAL_RCC_OscConfig+0x76c>)
 8003ac0:	f043 0304 	orr.w	r3, r3, #4
 8003ac4:	6713      	str	r3, [r2, #112]	; 0x70
 8003ac6:	4b6c      	ldr	r3, [pc, #432]	; (8003c78 <HAL_RCC_OscConfig+0x76c>)
 8003ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aca:	4a6b      	ldr	r2, [pc, #428]	; (8003c78 <HAL_RCC_OscConfig+0x76c>)
 8003acc:	f043 0301 	orr.w	r3, r3, #1
 8003ad0:	6713      	str	r3, [r2, #112]	; 0x70
 8003ad2:	e00b      	b.n	8003aec <HAL_RCC_OscConfig+0x5e0>
 8003ad4:	4b68      	ldr	r3, [pc, #416]	; (8003c78 <HAL_RCC_OscConfig+0x76c>)
 8003ad6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ad8:	4a67      	ldr	r2, [pc, #412]	; (8003c78 <HAL_RCC_OscConfig+0x76c>)
 8003ada:	f023 0301 	bic.w	r3, r3, #1
 8003ade:	6713      	str	r3, [r2, #112]	; 0x70
 8003ae0:	4b65      	ldr	r3, [pc, #404]	; (8003c78 <HAL_RCC_OscConfig+0x76c>)
 8003ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ae4:	4a64      	ldr	r2, [pc, #400]	; (8003c78 <HAL_RCC_OscConfig+0x76c>)
 8003ae6:	f023 0304 	bic.w	r3, r3, #4
 8003aea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d015      	beq.n	8003b20 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003af4:	f7fd fef4 	bl	80018e0 <HAL_GetTick>
 8003af8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003afa:	e00a      	b.n	8003b12 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003afc:	f7fd fef0 	bl	80018e0 <HAL_GetTick>
 8003b00:	4602      	mov	r2, r0
 8003b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d901      	bls.n	8003b12 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	e123      	b.n	8003d5a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b12:	4b59      	ldr	r3, [pc, #356]	; (8003c78 <HAL_RCC_OscConfig+0x76c>)
 8003b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b16:	f003 0302 	and.w	r3, r3, #2
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d0ee      	beq.n	8003afc <HAL_RCC_OscConfig+0x5f0>
 8003b1e:	e014      	b.n	8003b4a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b20:	f7fd fede 	bl	80018e0 <HAL_GetTick>
 8003b24:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003b26:	e00a      	b.n	8003b3e <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b28:	f7fd feda 	bl	80018e0 <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d901      	bls.n	8003b3e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e10d      	b.n	8003d5a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003b3e:	4b4e      	ldr	r3, [pc, #312]	; (8003c78 <HAL_RCC_OscConfig+0x76c>)
 8003b40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b42:	f003 0302 	and.w	r3, r3, #2
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d1ee      	bne.n	8003b28 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	f000 8102 	beq.w	8003d58 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003b54:	4b48      	ldr	r3, [pc, #288]	; (8003c78 <HAL_RCC_OscConfig+0x76c>)
 8003b56:	691b      	ldr	r3, [r3, #16]
 8003b58:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b5c:	2b18      	cmp	r3, #24
 8003b5e:	f000 80bd 	beq.w	8003cdc <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b66:	2b02      	cmp	r3, #2
 8003b68:	f040 809e 	bne.w	8003ca8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b6c:	4b42      	ldr	r3, [pc, #264]	; (8003c78 <HAL_RCC_OscConfig+0x76c>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a41      	ldr	r2, [pc, #260]	; (8003c78 <HAL_RCC_OscConfig+0x76c>)
 8003b72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b78:	f7fd feb2 	bl	80018e0 <HAL_GetTick>
 8003b7c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003b7e:	e008      	b.n	8003b92 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b80:	f7fd feae 	bl	80018e0 <HAL_GetTick>
 8003b84:	4602      	mov	r2, r0
 8003b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	2b02      	cmp	r3, #2
 8003b8c:	d901      	bls.n	8003b92 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	e0e3      	b.n	8003d5a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003b92:	4b39      	ldr	r3, [pc, #228]	; (8003c78 <HAL_RCC_OscConfig+0x76c>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d1f0      	bne.n	8003b80 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b9e:	4b36      	ldr	r3, [pc, #216]	; (8003c78 <HAL_RCC_OscConfig+0x76c>)
 8003ba0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ba2:	4b37      	ldr	r3, [pc, #220]	; (8003c80 <HAL_RCC_OscConfig+0x774>)
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	687a      	ldr	r2, [r7, #4]
 8003ba8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003bae:	0112      	lsls	r2, r2, #4
 8003bb0:	430a      	orrs	r2, r1
 8003bb2:	4931      	ldr	r1, [pc, #196]	; (8003c78 <HAL_RCC_OscConfig+0x76c>)
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	628b      	str	r3, [r1, #40]	; 0x28
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bbc:	3b01      	subs	r3, #1
 8003bbe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bc6:	3b01      	subs	r3, #1
 8003bc8:	025b      	lsls	r3, r3, #9
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	431a      	orrs	r2, r3
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd2:	3b01      	subs	r3, #1
 8003bd4:	041b      	lsls	r3, r3, #16
 8003bd6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003bda:	431a      	orrs	r2, r3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003be0:	3b01      	subs	r3, #1
 8003be2:	061b      	lsls	r3, r3, #24
 8003be4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003be8:	4923      	ldr	r1, [pc, #140]	; (8003c78 <HAL_RCC_OscConfig+0x76c>)
 8003bea:	4313      	orrs	r3, r2
 8003bec:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003bee:	4b22      	ldr	r3, [pc, #136]	; (8003c78 <HAL_RCC_OscConfig+0x76c>)
 8003bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf2:	4a21      	ldr	r2, [pc, #132]	; (8003c78 <HAL_RCC_OscConfig+0x76c>)
 8003bf4:	f023 0301 	bic.w	r3, r3, #1
 8003bf8:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003bfa:	4b1f      	ldr	r3, [pc, #124]	; (8003c78 <HAL_RCC_OscConfig+0x76c>)
 8003bfc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bfe:	4b21      	ldr	r3, [pc, #132]	; (8003c84 <HAL_RCC_OscConfig+0x778>)
 8003c00:	4013      	ands	r3, r2
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003c06:	00d2      	lsls	r2, r2, #3
 8003c08:	491b      	ldr	r1, [pc, #108]	; (8003c78 <HAL_RCC_OscConfig+0x76c>)
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003c0e:	4b1a      	ldr	r3, [pc, #104]	; (8003c78 <HAL_RCC_OscConfig+0x76c>)
 8003c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c12:	f023 020c 	bic.w	r2, r3, #12
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1a:	4917      	ldr	r1, [pc, #92]	; (8003c78 <HAL_RCC_OscConfig+0x76c>)
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003c20:	4b15      	ldr	r3, [pc, #84]	; (8003c78 <HAL_RCC_OscConfig+0x76c>)
 8003c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c24:	f023 0202 	bic.w	r2, r3, #2
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c2c:	4912      	ldr	r1, [pc, #72]	; (8003c78 <HAL_RCC_OscConfig+0x76c>)
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003c32:	4b11      	ldr	r3, [pc, #68]	; (8003c78 <HAL_RCC_OscConfig+0x76c>)
 8003c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c36:	4a10      	ldr	r2, [pc, #64]	; (8003c78 <HAL_RCC_OscConfig+0x76c>)
 8003c38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c3c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c3e:	4b0e      	ldr	r3, [pc, #56]	; (8003c78 <HAL_RCC_OscConfig+0x76c>)
 8003c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c42:	4a0d      	ldr	r2, [pc, #52]	; (8003c78 <HAL_RCC_OscConfig+0x76c>)
 8003c44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c48:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003c4a:	4b0b      	ldr	r3, [pc, #44]	; (8003c78 <HAL_RCC_OscConfig+0x76c>)
 8003c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c4e:	4a0a      	ldr	r2, [pc, #40]	; (8003c78 <HAL_RCC_OscConfig+0x76c>)
 8003c50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c54:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003c56:	4b08      	ldr	r3, [pc, #32]	; (8003c78 <HAL_RCC_OscConfig+0x76c>)
 8003c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c5a:	4a07      	ldr	r2, [pc, #28]	; (8003c78 <HAL_RCC_OscConfig+0x76c>)
 8003c5c:	f043 0301 	orr.w	r3, r3, #1
 8003c60:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c62:	4b05      	ldr	r3, [pc, #20]	; (8003c78 <HAL_RCC_OscConfig+0x76c>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a04      	ldr	r2, [pc, #16]	; (8003c78 <HAL_RCC_OscConfig+0x76c>)
 8003c68:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c6e:	f7fd fe37 	bl	80018e0 <HAL_GetTick>
 8003c72:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003c74:	e011      	b.n	8003c9a <HAL_RCC_OscConfig+0x78e>
 8003c76:	bf00      	nop
 8003c78:	58024400 	.word	0x58024400
 8003c7c:	58024800 	.word	0x58024800
 8003c80:	fffffc0c 	.word	0xfffffc0c
 8003c84:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c88:	f7fd fe2a 	bl	80018e0 <HAL_GetTick>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	2b02      	cmp	r3, #2
 8003c94:	d901      	bls.n	8003c9a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003c96:	2303      	movs	r3, #3
 8003c98:	e05f      	b.n	8003d5a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003c9a:	4b32      	ldr	r3, [pc, #200]	; (8003d64 <HAL_RCC_OscConfig+0x858>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d0f0      	beq.n	8003c88 <HAL_RCC_OscConfig+0x77c>
 8003ca6:	e057      	b.n	8003d58 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ca8:	4b2e      	ldr	r3, [pc, #184]	; (8003d64 <HAL_RCC_OscConfig+0x858>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a2d      	ldr	r2, [pc, #180]	; (8003d64 <HAL_RCC_OscConfig+0x858>)
 8003cae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003cb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cb4:	f7fd fe14 	bl	80018e0 <HAL_GetTick>
 8003cb8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003cba:	e008      	b.n	8003cce <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cbc:	f7fd fe10 	bl	80018e0 <HAL_GetTick>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	d901      	bls.n	8003cce <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	e045      	b.n	8003d5a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003cce:	4b25      	ldr	r3, [pc, #148]	; (8003d64 <HAL_RCC_OscConfig+0x858>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d1f0      	bne.n	8003cbc <HAL_RCC_OscConfig+0x7b0>
 8003cda:	e03d      	b.n	8003d58 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003cdc:	4b21      	ldr	r3, [pc, #132]	; (8003d64 <HAL_RCC_OscConfig+0x858>)
 8003cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ce0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003ce2:	4b20      	ldr	r3, [pc, #128]	; (8003d64 <HAL_RCC_OscConfig+0x858>)
 8003ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d031      	beq.n	8003d54 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	f003 0203 	and.w	r2, r3, #3
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	d12a      	bne.n	8003d54 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	091b      	lsrs	r3, r3, #4
 8003d02:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d122      	bne.n	8003d54 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d18:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	d11a      	bne.n	8003d54 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	0a5b      	lsrs	r3, r3, #9
 8003d22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d2a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d111      	bne.n	8003d54 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	0c1b      	lsrs	r3, r3, #16
 8003d34:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d3c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d108      	bne.n	8003d54 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	0e1b      	lsrs	r3, r3, #24
 8003d46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d4e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d001      	beq.n	8003d58 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e000      	b.n	8003d5a <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8003d58:	2300      	movs	r3, #0
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3730      	adds	r7, #48	; 0x30
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	bf00      	nop
 8003d64:	58024400 	.word	0x58024400

08003d68 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b086      	sub	sp, #24
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d101      	bne.n	8003d7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e19c      	b.n	80040b6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d7c:	4b8a      	ldr	r3, [pc, #552]	; (8003fa8 <HAL_RCC_ClockConfig+0x240>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 030f 	and.w	r3, r3, #15
 8003d84:	683a      	ldr	r2, [r7, #0]
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d910      	bls.n	8003dac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d8a:	4b87      	ldr	r3, [pc, #540]	; (8003fa8 <HAL_RCC_ClockConfig+0x240>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f023 020f 	bic.w	r2, r3, #15
 8003d92:	4985      	ldr	r1, [pc, #532]	; (8003fa8 <HAL_RCC_ClockConfig+0x240>)
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d9a:	4b83      	ldr	r3, [pc, #524]	; (8003fa8 <HAL_RCC_ClockConfig+0x240>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 030f 	and.w	r3, r3, #15
 8003da2:	683a      	ldr	r2, [r7, #0]
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d001      	beq.n	8003dac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	e184      	b.n	80040b6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 0304 	and.w	r3, r3, #4
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d010      	beq.n	8003dda <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	691a      	ldr	r2, [r3, #16]
 8003dbc:	4b7b      	ldr	r3, [pc, #492]	; (8003fac <HAL_RCC_ClockConfig+0x244>)
 8003dbe:	699b      	ldr	r3, [r3, #24]
 8003dc0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d908      	bls.n	8003dda <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003dc8:	4b78      	ldr	r3, [pc, #480]	; (8003fac <HAL_RCC_ClockConfig+0x244>)
 8003dca:	699b      	ldr	r3, [r3, #24]
 8003dcc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	691b      	ldr	r3, [r3, #16]
 8003dd4:	4975      	ldr	r1, [pc, #468]	; (8003fac <HAL_RCC_ClockConfig+0x244>)
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 0308 	and.w	r3, r3, #8
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d010      	beq.n	8003e08 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	695a      	ldr	r2, [r3, #20]
 8003dea:	4b70      	ldr	r3, [pc, #448]	; (8003fac <HAL_RCC_ClockConfig+0x244>)
 8003dec:	69db      	ldr	r3, [r3, #28]
 8003dee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d908      	bls.n	8003e08 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003df6:	4b6d      	ldr	r3, [pc, #436]	; (8003fac <HAL_RCC_ClockConfig+0x244>)
 8003df8:	69db      	ldr	r3, [r3, #28]
 8003dfa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	695b      	ldr	r3, [r3, #20]
 8003e02:	496a      	ldr	r1, [pc, #424]	; (8003fac <HAL_RCC_ClockConfig+0x244>)
 8003e04:	4313      	orrs	r3, r2
 8003e06:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 0310 	and.w	r3, r3, #16
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d010      	beq.n	8003e36 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	699a      	ldr	r2, [r3, #24]
 8003e18:	4b64      	ldr	r3, [pc, #400]	; (8003fac <HAL_RCC_ClockConfig+0x244>)
 8003e1a:	69db      	ldr	r3, [r3, #28]
 8003e1c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d908      	bls.n	8003e36 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003e24:	4b61      	ldr	r3, [pc, #388]	; (8003fac <HAL_RCC_ClockConfig+0x244>)
 8003e26:	69db      	ldr	r3, [r3, #28]
 8003e28:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	699b      	ldr	r3, [r3, #24]
 8003e30:	495e      	ldr	r1, [pc, #376]	; (8003fac <HAL_RCC_ClockConfig+0x244>)
 8003e32:	4313      	orrs	r3, r2
 8003e34:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0320 	and.w	r3, r3, #32
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d010      	beq.n	8003e64 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	69da      	ldr	r2, [r3, #28]
 8003e46:	4b59      	ldr	r3, [pc, #356]	; (8003fac <HAL_RCC_ClockConfig+0x244>)
 8003e48:	6a1b      	ldr	r3, [r3, #32]
 8003e4a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d908      	bls.n	8003e64 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003e52:	4b56      	ldr	r3, [pc, #344]	; (8003fac <HAL_RCC_ClockConfig+0x244>)
 8003e54:	6a1b      	ldr	r3, [r3, #32]
 8003e56:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	69db      	ldr	r3, [r3, #28]
 8003e5e:	4953      	ldr	r1, [pc, #332]	; (8003fac <HAL_RCC_ClockConfig+0x244>)
 8003e60:	4313      	orrs	r3, r2
 8003e62:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 0302 	and.w	r3, r3, #2
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d010      	beq.n	8003e92 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	68da      	ldr	r2, [r3, #12]
 8003e74:	4b4d      	ldr	r3, [pc, #308]	; (8003fac <HAL_RCC_ClockConfig+0x244>)
 8003e76:	699b      	ldr	r3, [r3, #24]
 8003e78:	f003 030f 	and.w	r3, r3, #15
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d908      	bls.n	8003e92 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e80:	4b4a      	ldr	r3, [pc, #296]	; (8003fac <HAL_RCC_ClockConfig+0x244>)
 8003e82:	699b      	ldr	r3, [r3, #24]
 8003e84:	f023 020f 	bic.w	r2, r3, #15
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	4947      	ldr	r1, [pc, #284]	; (8003fac <HAL_RCC_ClockConfig+0x244>)
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 0301 	and.w	r3, r3, #1
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d055      	beq.n	8003f4a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003e9e:	4b43      	ldr	r3, [pc, #268]	; (8003fac <HAL_RCC_ClockConfig+0x244>)
 8003ea0:	699b      	ldr	r3, [r3, #24]
 8003ea2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	4940      	ldr	r1, [pc, #256]	; (8003fac <HAL_RCC_ClockConfig+0x244>)
 8003eac:	4313      	orrs	r3, r2
 8003eae:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	2b02      	cmp	r3, #2
 8003eb6:	d107      	bne.n	8003ec8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003eb8:	4b3c      	ldr	r3, [pc, #240]	; (8003fac <HAL_RCC_ClockConfig+0x244>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d121      	bne.n	8003f08 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e0f6      	b.n	80040b6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	2b03      	cmp	r3, #3
 8003ece:	d107      	bne.n	8003ee0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003ed0:	4b36      	ldr	r3, [pc, #216]	; (8003fac <HAL_RCC_ClockConfig+0x244>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d115      	bne.n	8003f08 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	e0ea      	b.n	80040b6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d107      	bne.n	8003ef8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003ee8:	4b30      	ldr	r3, [pc, #192]	; (8003fac <HAL_RCC_ClockConfig+0x244>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d109      	bne.n	8003f08 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e0de      	b.n	80040b6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ef8:	4b2c      	ldr	r3, [pc, #176]	; (8003fac <HAL_RCC_ClockConfig+0x244>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 0304 	and.w	r3, r3, #4
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d101      	bne.n	8003f08 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	e0d6      	b.n	80040b6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003f08:	4b28      	ldr	r3, [pc, #160]	; (8003fac <HAL_RCC_ClockConfig+0x244>)
 8003f0a:	691b      	ldr	r3, [r3, #16]
 8003f0c:	f023 0207 	bic.w	r2, r3, #7
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	4925      	ldr	r1, [pc, #148]	; (8003fac <HAL_RCC_ClockConfig+0x244>)
 8003f16:	4313      	orrs	r3, r2
 8003f18:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f1a:	f7fd fce1 	bl	80018e0 <HAL_GetTick>
 8003f1e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f20:	e00a      	b.n	8003f38 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f22:	f7fd fcdd 	bl	80018e0 <HAL_GetTick>
 8003f26:	4602      	mov	r2, r0
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	1ad3      	subs	r3, r2, r3
 8003f2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d901      	bls.n	8003f38 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003f34:	2303      	movs	r3, #3
 8003f36:	e0be      	b.n	80040b6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f38:	4b1c      	ldr	r3, [pc, #112]	; (8003fac <HAL_RCC_ClockConfig+0x244>)
 8003f3a:	691b      	ldr	r3, [r3, #16]
 8003f3c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	00db      	lsls	r3, r3, #3
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d1eb      	bne.n	8003f22 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 0302 	and.w	r3, r3, #2
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d010      	beq.n	8003f78 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	68da      	ldr	r2, [r3, #12]
 8003f5a:	4b14      	ldr	r3, [pc, #80]	; (8003fac <HAL_RCC_ClockConfig+0x244>)
 8003f5c:	699b      	ldr	r3, [r3, #24]
 8003f5e:	f003 030f 	and.w	r3, r3, #15
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d208      	bcs.n	8003f78 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f66:	4b11      	ldr	r3, [pc, #68]	; (8003fac <HAL_RCC_ClockConfig+0x244>)
 8003f68:	699b      	ldr	r3, [r3, #24]
 8003f6a:	f023 020f 	bic.w	r2, r3, #15
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	490e      	ldr	r1, [pc, #56]	; (8003fac <HAL_RCC_ClockConfig+0x244>)
 8003f74:	4313      	orrs	r3, r2
 8003f76:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f78:	4b0b      	ldr	r3, [pc, #44]	; (8003fa8 <HAL_RCC_ClockConfig+0x240>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 030f 	and.w	r3, r3, #15
 8003f80:	683a      	ldr	r2, [r7, #0]
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d214      	bcs.n	8003fb0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f86:	4b08      	ldr	r3, [pc, #32]	; (8003fa8 <HAL_RCC_ClockConfig+0x240>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f023 020f 	bic.w	r2, r3, #15
 8003f8e:	4906      	ldr	r1, [pc, #24]	; (8003fa8 <HAL_RCC_ClockConfig+0x240>)
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	4313      	orrs	r3, r2
 8003f94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f96:	4b04      	ldr	r3, [pc, #16]	; (8003fa8 <HAL_RCC_ClockConfig+0x240>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 030f 	and.w	r3, r3, #15
 8003f9e:	683a      	ldr	r2, [r7, #0]
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d005      	beq.n	8003fb0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e086      	b.n	80040b6 <HAL_RCC_ClockConfig+0x34e>
 8003fa8:	52002000 	.word	0x52002000
 8003fac:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 0304 	and.w	r3, r3, #4
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d010      	beq.n	8003fde <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	691a      	ldr	r2, [r3, #16]
 8003fc0:	4b3f      	ldr	r3, [pc, #252]	; (80040c0 <HAL_RCC_ClockConfig+0x358>)
 8003fc2:	699b      	ldr	r3, [r3, #24]
 8003fc4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d208      	bcs.n	8003fde <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003fcc:	4b3c      	ldr	r3, [pc, #240]	; (80040c0 <HAL_RCC_ClockConfig+0x358>)
 8003fce:	699b      	ldr	r3, [r3, #24]
 8003fd0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	691b      	ldr	r3, [r3, #16]
 8003fd8:	4939      	ldr	r1, [pc, #228]	; (80040c0 <HAL_RCC_ClockConfig+0x358>)
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 0308 	and.w	r3, r3, #8
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d010      	beq.n	800400c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	695a      	ldr	r2, [r3, #20]
 8003fee:	4b34      	ldr	r3, [pc, #208]	; (80040c0 <HAL_RCC_ClockConfig+0x358>)
 8003ff0:	69db      	ldr	r3, [r3, #28]
 8003ff2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d208      	bcs.n	800400c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003ffa:	4b31      	ldr	r3, [pc, #196]	; (80040c0 <HAL_RCC_ClockConfig+0x358>)
 8003ffc:	69db      	ldr	r3, [r3, #28]
 8003ffe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	695b      	ldr	r3, [r3, #20]
 8004006:	492e      	ldr	r1, [pc, #184]	; (80040c0 <HAL_RCC_ClockConfig+0x358>)
 8004008:	4313      	orrs	r3, r2
 800400a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 0310 	and.w	r3, r3, #16
 8004014:	2b00      	cmp	r3, #0
 8004016:	d010      	beq.n	800403a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	699a      	ldr	r2, [r3, #24]
 800401c:	4b28      	ldr	r3, [pc, #160]	; (80040c0 <HAL_RCC_ClockConfig+0x358>)
 800401e:	69db      	ldr	r3, [r3, #28]
 8004020:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004024:	429a      	cmp	r2, r3
 8004026:	d208      	bcs.n	800403a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004028:	4b25      	ldr	r3, [pc, #148]	; (80040c0 <HAL_RCC_ClockConfig+0x358>)
 800402a:	69db      	ldr	r3, [r3, #28]
 800402c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	699b      	ldr	r3, [r3, #24]
 8004034:	4922      	ldr	r1, [pc, #136]	; (80040c0 <HAL_RCC_ClockConfig+0x358>)
 8004036:	4313      	orrs	r3, r2
 8004038:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 0320 	and.w	r3, r3, #32
 8004042:	2b00      	cmp	r3, #0
 8004044:	d010      	beq.n	8004068 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	69da      	ldr	r2, [r3, #28]
 800404a:	4b1d      	ldr	r3, [pc, #116]	; (80040c0 <HAL_RCC_ClockConfig+0x358>)
 800404c:	6a1b      	ldr	r3, [r3, #32]
 800404e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004052:	429a      	cmp	r2, r3
 8004054:	d208      	bcs.n	8004068 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004056:	4b1a      	ldr	r3, [pc, #104]	; (80040c0 <HAL_RCC_ClockConfig+0x358>)
 8004058:	6a1b      	ldr	r3, [r3, #32]
 800405a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	69db      	ldr	r3, [r3, #28]
 8004062:	4917      	ldr	r1, [pc, #92]	; (80040c0 <HAL_RCC_ClockConfig+0x358>)
 8004064:	4313      	orrs	r3, r2
 8004066:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004068:	f000 f834 	bl	80040d4 <HAL_RCC_GetSysClockFreq>
 800406c:	4602      	mov	r2, r0
 800406e:	4b14      	ldr	r3, [pc, #80]	; (80040c0 <HAL_RCC_ClockConfig+0x358>)
 8004070:	699b      	ldr	r3, [r3, #24]
 8004072:	0a1b      	lsrs	r3, r3, #8
 8004074:	f003 030f 	and.w	r3, r3, #15
 8004078:	4912      	ldr	r1, [pc, #72]	; (80040c4 <HAL_RCC_ClockConfig+0x35c>)
 800407a:	5ccb      	ldrb	r3, [r1, r3]
 800407c:	f003 031f 	and.w	r3, r3, #31
 8004080:	fa22 f303 	lsr.w	r3, r2, r3
 8004084:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004086:	4b0e      	ldr	r3, [pc, #56]	; (80040c0 <HAL_RCC_ClockConfig+0x358>)
 8004088:	699b      	ldr	r3, [r3, #24]
 800408a:	f003 030f 	and.w	r3, r3, #15
 800408e:	4a0d      	ldr	r2, [pc, #52]	; (80040c4 <HAL_RCC_ClockConfig+0x35c>)
 8004090:	5cd3      	ldrb	r3, [r2, r3]
 8004092:	f003 031f 	and.w	r3, r3, #31
 8004096:	693a      	ldr	r2, [r7, #16]
 8004098:	fa22 f303 	lsr.w	r3, r2, r3
 800409c:	4a0a      	ldr	r2, [pc, #40]	; (80040c8 <HAL_RCC_ClockConfig+0x360>)
 800409e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80040a0:	4a0a      	ldr	r2, [pc, #40]	; (80040cc <HAL_RCC_ClockConfig+0x364>)
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80040a6:	4b0a      	ldr	r3, [pc, #40]	; (80040d0 <HAL_RCC_ClockConfig+0x368>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4618      	mov	r0, r3
 80040ac:	f7fd fbce 	bl	800184c <HAL_InitTick>
 80040b0:	4603      	mov	r3, r0
 80040b2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80040b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3718      	adds	r7, #24
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	bf00      	nop
 80040c0:	58024400 	.word	0x58024400
 80040c4:	080098a0 	.word	0x080098a0
 80040c8:	24000004 	.word	0x24000004
 80040cc:	24000000 	.word	0x24000000
 80040d0:	24000008 	.word	0x24000008

080040d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b089      	sub	sp, #36	; 0x24
 80040d8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040da:	4bb3      	ldr	r3, [pc, #716]	; (80043a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040dc:	691b      	ldr	r3, [r3, #16]
 80040de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80040e2:	2b18      	cmp	r3, #24
 80040e4:	f200 8155 	bhi.w	8004392 <HAL_RCC_GetSysClockFreq+0x2be>
 80040e8:	a201      	add	r2, pc, #4	; (adr r2, 80040f0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80040ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ee:	bf00      	nop
 80040f0:	08004155 	.word	0x08004155
 80040f4:	08004393 	.word	0x08004393
 80040f8:	08004393 	.word	0x08004393
 80040fc:	08004393 	.word	0x08004393
 8004100:	08004393 	.word	0x08004393
 8004104:	08004393 	.word	0x08004393
 8004108:	08004393 	.word	0x08004393
 800410c:	08004393 	.word	0x08004393
 8004110:	0800417b 	.word	0x0800417b
 8004114:	08004393 	.word	0x08004393
 8004118:	08004393 	.word	0x08004393
 800411c:	08004393 	.word	0x08004393
 8004120:	08004393 	.word	0x08004393
 8004124:	08004393 	.word	0x08004393
 8004128:	08004393 	.word	0x08004393
 800412c:	08004393 	.word	0x08004393
 8004130:	08004181 	.word	0x08004181
 8004134:	08004393 	.word	0x08004393
 8004138:	08004393 	.word	0x08004393
 800413c:	08004393 	.word	0x08004393
 8004140:	08004393 	.word	0x08004393
 8004144:	08004393 	.word	0x08004393
 8004148:	08004393 	.word	0x08004393
 800414c:	08004393 	.word	0x08004393
 8004150:	08004187 	.word	0x08004187
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004154:	4b94      	ldr	r3, [pc, #592]	; (80043a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 0320 	and.w	r3, r3, #32
 800415c:	2b00      	cmp	r3, #0
 800415e:	d009      	beq.n	8004174 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004160:	4b91      	ldr	r3, [pc, #580]	; (80043a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	08db      	lsrs	r3, r3, #3
 8004166:	f003 0303 	and.w	r3, r3, #3
 800416a:	4a90      	ldr	r2, [pc, #576]	; (80043ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 800416c:	fa22 f303 	lsr.w	r3, r2, r3
 8004170:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8004172:	e111      	b.n	8004398 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004174:	4b8d      	ldr	r3, [pc, #564]	; (80043ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004176:	61bb      	str	r3, [r7, #24]
    break;
 8004178:	e10e      	b.n	8004398 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800417a:	4b8d      	ldr	r3, [pc, #564]	; (80043b0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800417c:	61bb      	str	r3, [r7, #24]
    break;
 800417e:	e10b      	b.n	8004398 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004180:	4b8c      	ldr	r3, [pc, #560]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004182:	61bb      	str	r3, [r7, #24]
    break;
 8004184:	e108      	b.n	8004398 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004186:	4b88      	ldr	r3, [pc, #544]	; (80043a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800418a:	f003 0303 	and.w	r3, r3, #3
 800418e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004190:	4b85      	ldr	r3, [pc, #532]	; (80043a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004194:	091b      	lsrs	r3, r3, #4
 8004196:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800419a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800419c:	4b82      	ldr	r3, [pc, #520]	; (80043a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800419e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a0:	f003 0301 	and.w	r3, r3, #1
 80041a4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80041a6:	4b80      	ldr	r3, [pc, #512]	; (80043a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041aa:	08db      	lsrs	r3, r3, #3
 80041ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80041b0:	68fa      	ldr	r2, [r7, #12]
 80041b2:	fb02 f303 	mul.w	r3, r2, r3
 80041b6:	ee07 3a90 	vmov	s15, r3
 80041ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041be:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	f000 80e1 	beq.w	800438c <HAL_RCC_GetSysClockFreq+0x2b8>
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	2b02      	cmp	r3, #2
 80041ce:	f000 8083 	beq.w	80042d8 <HAL_RCC_GetSysClockFreq+0x204>
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	2b02      	cmp	r3, #2
 80041d6:	f200 80a1 	bhi.w	800431c <HAL_RCC_GetSysClockFreq+0x248>
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d003      	beq.n	80041e8 <HAL_RCC_GetSysClockFreq+0x114>
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d056      	beq.n	8004294 <HAL_RCC_GetSysClockFreq+0x1c0>
 80041e6:	e099      	b.n	800431c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80041e8:	4b6f      	ldr	r3, [pc, #444]	; (80043a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 0320 	and.w	r3, r3, #32
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d02d      	beq.n	8004250 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80041f4:	4b6c      	ldr	r3, [pc, #432]	; (80043a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	08db      	lsrs	r3, r3, #3
 80041fa:	f003 0303 	and.w	r3, r3, #3
 80041fe:	4a6b      	ldr	r2, [pc, #428]	; (80043ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004200:	fa22 f303 	lsr.w	r3, r2, r3
 8004204:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	ee07 3a90 	vmov	s15, r3
 800420c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	ee07 3a90 	vmov	s15, r3
 8004216:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800421a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800421e:	4b62      	ldr	r3, [pc, #392]	; (80043a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004222:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004226:	ee07 3a90 	vmov	s15, r3
 800422a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800422e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004232:	eddf 5a61 	vldr	s11, [pc, #388]	; 80043b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004236:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800423a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800423e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004242:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004246:	ee67 7a27 	vmul.f32	s15, s14, s15
 800424a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800424e:	e087      	b.n	8004360 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	ee07 3a90 	vmov	s15, r3
 8004256:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800425a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80043bc <HAL_RCC_GetSysClockFreq+0x2e8>
 800425e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004262:	4b51      	ldr	r3, [pc, #324]	; (80043a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004266:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800426a:	ee07 3a90 	vmov	s15, r3
 800426e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004272:	ed97 6a02 	vldr	s12, [r7, #8]
 8004276:	eddf 5a50 	vldr	s11, [pc, #320]	; 80043b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800427a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800427e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004282:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004286:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800428a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800428e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004292:	e065      	b.n	8004360 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	ee07 3a90 	vmov	s15, r3
 800429a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800429e:	eddf 6a48 	vldr	s13, [pc, #288]	; 80043c0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80042a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042a6:	4b40      	ldr	r3, [pc, #256]	; (80043a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042ae:	ee07 3a90 	vmov	s15, r3
 80042b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80042ba:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80043b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80042be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80042ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80042d6:	e043      	b.n	8004360 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	ee07 3a90 	vmov	s15, r3
 80042de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042e2:	eddf 6a38 	vldr	s13, [pc, #224]	; 80043c4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80042e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042ea:	4b2f      	ldr	r3, [pc, #188]	; (80043a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042f2:	ee07 3a90 	vmov	s15, r3
 80042f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80042fe:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80043b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004302:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004306:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800430a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800430e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004312:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004316:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800431a:	e021      	b.n	8004360 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	ee07 3a90 	vmov	s15, r3
 8004322:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004326:	eddf 6a26 	vldr	s13, [pc, #152]	; 80043c0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800432a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800432e:	4b1e      	ldr	r3, [pc, #120]	; (80043a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004332:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004336:	ee07 3a90 	vmov	s15, r3
 800433a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800433e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004342:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80043b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004346:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800434a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800434e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004352:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004356:	ee67 7a27 	vmul.f32	s15, s14, s15
 800435a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800435e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004360:	4b11      	ldr	r3, [pc, #68]	; (80043a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004364:	0a5b      	lsrs	r3, r3, #9
 8004366:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800436a:	3301      	adds	r3, #1
 800436c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	ee07 3a90 	vmov	s15, r3
 8004374:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004378:	edd7 6a07 	vldr	s13, [r7, #28]
 800437c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004380:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004384:	ee17 3a90 	vmov	r3, s15
 8004388:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800438a:	e005      	b.n	8004398 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800438c:	2300      	movs	r3, #0
 800438e:	61bb      	str	r3, [r7, #24]
    break;
 8004390:	e002      	b.n	8004398 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8004392:	4b07      	ldr	r3, [pc, #28]	; (80043b0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004394:	61bb      	str	r3, [r7, #24]
    break;
 8004396:	bf00      	nop
  }

  return sysclockfreq;
 8004398:	69bb      	ldr	r3, [r7, #24]
}
 800439a:	4618      	mov	r0, r3
 800439c:	3724      	adds	r7, #36	; 0x24
 800439e:	46bd      	mov	sp, r7
 80043a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a4:	4770      	bx	lr
 80043a6:	bf00      	nop
 80043a8:	58024400 	.word	0x58024400
 80043ac:	03d09000 	.word	0x03d09000
 80043b0:	003d0900 	.word	0x003d0900
 80043b4:	007a1200 	.word	0x007a1200
 80043b8:	46000000 	.word	0x46000000
 80043bc:	4c742400 	.word	0x4c742400
 80043c0:	4a742400 	.word	0x4a742400
 80043c4:	4af42400 	.word	0x4af42400

080043c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b082      	sub	sp, #8
 80043cc:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80043ce:	f7ff fe81 	bl	80040d4 <HAL_RCC_GetSysClockFreq>
 80043d2:	4602      	mov	r2, r0
 80043d4:	4b10      	ldr	r3, [pc, #64]	; (8004418 <HAL_RCC_GetHCLKFreq+0x50>)
 80043d6:	699b      	ldr	r3, [r3, #24]
 80043d8:	0a1b      	lsrs	r3, r3, #8
 80043da:	f003 030f 	and.w	r3, r3, #15
 80043de:	490f      	ldr	r1, [pc, #60]	; (800441c <HAL_RCC_GetHCLKFreq+0x54>)
 80043e0:	5ccb      	ldrb	r3, [r1, r3]
 80043e2:	f003 031f 	and.w	r3, r3, #31
 80043e6:	fa22 f303 	lsr.w	r3, r2, r3
 80043ea:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80043ec:	4b0a      	ldr	r3, [pc, #40]	; (8004418 <HAL_RCC_GetHCLKFreq+0x50>)
 80043ee:	699b      	ldr	r3, [r3, #24]
 80043f0:	f003 030f 	and.w	r3, r3, #15
 80043f4:	4a09      	ldr	r2, [pc, #36]	; (800441c <HAL_RCC_GetHCLKFreq+0x54>)
 80043f6:	5cd3      	ldrb	r3, [r2, r3]
 80043f8:	f003 031f 	and.w	r3, r3, #31
 80043fc:	687a      	ldr	r2, [r7, #4]
 80043fe:	fa22 f303 	lsr.w	r3, r2, r3
 8004402:	4a07      	ldr	r2, [pc, #28]	; (8004420 <HAL_RCC_GetHCLKFreq+0x58>)
 8004404:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004406:	4a07      	ldr	r2, [pc, #28]	; (8004424 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800440c:	4b04      	ldr	r3, [pc, #16]	; (8004420 <HAL_RCC_GetHCLKFreq+0x58>)
 800440e:	681b      	ldr	r3, [r3, #0]
}
 8004410:	4618      	mov	r0, r3
 8004412:	3708      	adds	r7, #8
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}
 8004418:	58024400 	.word	0x58024400
 800441c:	080098a0 	.word	0x080098a0
 8004420:	24000004 	.word	0x24000004
 8004424:	24000000 	.word	0x24000000

08004428 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800442c:	f7ff ffcc 	bl	80043c8 <HAL_RCC_GetHCLKFreq>
 8004430:	4602      	mov	r2, r0
 8004432:	4b06      	ldr	r3, [pc, #24]	; (800444c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004434:	69db      	ldr	r3, [r3, #28]
 8004436:	091b      	lsrs	r3, r3, #4
 8004438:	f003 0307 	and.w	r3, r3, #7
 800443c:	4904      	ldr	r1, [pc, #16]	; (8004450 <HAL_RCC_GetPCLK1Freq+0x28>)
 800443e:	5ccb      	ldrb	r3, [r1, r3]
 8004440:	f003 031f 	and.w	r3, r3, #31
 8004444:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004448:	4618      	mov	r0, r3
 800444a:	bd80      	pop	{r7, pc}
 800444c:	58024400 	.word	0x58024400
 8004450:	080098a0 	.word	0x080098a0

08004454 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004458:	f7ff ffb6 	bl	80043c8 <HAL_RCC_GetHCLKFreq>
 800445c:	4602      	mov	r2, r0
 800445e:	4b06      	ldr	r3, [pc, #24]	; (8004478 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004460:	69db      	ldr	r3, [r3, #28]
 8004462:	0a1b      	lsrs	r3, r3, #8
 8004464:	f003 0307 	and.w	r3, r3, #7
 8004468:	4904      	ldr	r1, [pc, #16]	; (800447c <HAL_RCC_GetPCLK2Freq+0x28>)
 800446a:	5ccb      	ldrb	r3, [r1, r3]
 800446c:	f003 031f 	and.w	r3, r3, #31
 8004470:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004474:	4618      	mov	r0, r3
 8004476:	bd80      	pop	{r7, pc}
 8004478:	58024400 	.word	0x58024400
 800447c:	080098a0 	.word	0x080098a0

08004480 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b086      	sub	sp, #24
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004488:	2300      	movs	r3, #0
 800448a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800448c:	2300      	movs	r3, #0
 800448e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004498:	2b00      	cmp	r3, #0
 800449a:	d03f      	beq.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044a0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80044a4:	d02a      	beq.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80044a6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80044aa:	d824      	bhi.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80044ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80044b0:	d018      	beq.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80044b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80044b6:	d81e      	bhi.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d003      	beq.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80044bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044c0:	d007      	beq.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80044c2:	e018      	b.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044c4:	4ba3      	ldr	r3, [pc, #652]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80044c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c8:	4aa2      	ldr	r2, [pc, #648]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80044ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80044d0:	e015      	b.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	3304      	adds	r3, #4
 80044d6:	2102      	movs	r1, #2
 80044d8:	4618      	mov	r0, r3
 80044da:	f001 f9d5 	bl	8005888 <RCCEx_PLL2_Config>
 80044de:	4603      	mov	r3, r0
 80044e0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80044e2:	e00c      	b.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	3324      	adds	r3, #36	; 0x24
 80044e8:	2102      	movs	r1, #2
 80044ea:	4618      	mov	r0, r3
 80044ec:	f001 fa7e 	bl	80059ec <RCCEx_PLL3_Config>
 80044f0:	4603      	mov	r3, r0
 80044f2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80044f4:	e003      	b.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	75fb      	strb	r3, [r7, #23]
      break;
 80044fa:	e000      	b.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80044fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044fe:	7dfb      	ldrb	r3, [r7, #23]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d109      	bne.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004504:	4b93      	ldr	r3, [pc, #588]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004506:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004508:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004510:	4990      	ldr	r1, [pc, #576]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004512:	4313      	orrs	r3, r2
 8004514:	650b      	str	r3, [r1, #80]	; 0x50
 8004516:	e001      	b.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004518:	7dfb      	ldrb	r3, [r7, #23]
 800451a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004524:	2b00      	cmp	r3, #0
 8004526:	d03d      	beq.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800452c:	2b04      	cmp	r3, #4
 800452e:	d826      	bhi.n	800457e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004530:	a201      	add	r2, pc, #4	; (adr r2, 8004538 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8004532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004536:	bf00      	nop
 8004538:	0800454d 	.word	0x0800454d
 800453c:	0800455b 	.word	0x0800455b
 8004540:	0800456d 	.word	0x0800456d
 8004544:	08004585 	.word	0x08004585
 8004548:	08004585 	.word	0x08004585
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800454c:	4b81      	ldr	r3, [pc, #516]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800454e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004550:	4a80      	ldr	r2, [pc, #512]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004552:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004556:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004558:	e015      	b.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	3304      	adds	r3, #4
 800455e:	2100      	movs	r1, #0
 8004560:	4618      	mov	r0, r3
 8004562:	f001 f991 	bl	8005888 <RCCEx_PLL2_Config>
 8004566:	4603      	mov	r3, r0
 8004568:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800456a:	e00c      	b.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	3324      	adds	r3, #36	; 0x24
 8004570:	2100      	movs	r1, #0
 8004572:	4618      	mov	r0, r3
 8004574:	f001 fa3a 	bl	80059ec <RCCEx_PLL3_Config>
 8004578:	4603      	mov	r3, r0
 800457a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800457c:	e003      	b.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	75fb      	strb	r3, [r7, #23]
      break;
 8004582:	e000      	b.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004584:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004586:	7dfb      	ldrb	r3, [r7, #23]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d109      	bne.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800458c:	4b71      	ldr	r3, [pc, #452]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800458e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004590:	f023 0207 	bic.w	r2, r3, #7
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004598:	496e      	ldr	r1, [pc, #440]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800459a:	4313      	orrs	r3, r2
 800459c:	650b      	str	r3, [r1, #80]	; 0x50
 800459e:	e001      	b.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045a0:	7dfb      	ldrb	r3, [r7, #23]
 80045a2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d042      	beq.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045b8:	d02b      	beq.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80045ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045be:	d825      	bhi.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80045c0:	2bc0      	cmp	r3, #192	; 0xc0
 80045c2:	d028      	beq.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80045c4:	2bc0      	cmp	r3, #192	; 0xc0
 80045c6:	d821      	bhi.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80045c8:	2b80      	cmp	r3, #128	; 0x80
 80045ca:	d016      	beq.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80045cc:	2b80      	cmp	r3, #128	; 0x80
 80045ce:	d81d      	bhi.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d002      	beq.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80045d4:	2b40      	cmp	r3, #64	; 0x40
 80045d6:	d007      	beq.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80045d8:	e018      	b.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045da:	4b5e      	ldr	r3, [pc, #376]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80045dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045de:	4a5d      	ldr	r2, [pc, #372]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80045e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045e4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80045e6:	e017      	b.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	3304      	adds	r3, #4
 80045ec:	2100      	movs	r1, #0
 80045ee:	4618      	mov	r0, r3
 80045f0:	f001 f94a 	bl	8005888 <RCCEx_PLL2_Config>
 80045f4:	4603      	mov	r3, r0
 80045f6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80045f8:	e00e      	b.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	3324      	adds	r3, #36	; 0x24
 80045fe:	2100      	movs	r1, #0
 8004600:	4618      	mov	r0, r3
 8004602:	f001 f9f3 	bl	80059ec <RCCEx_PLL3_Config>
 8004606:	4603      	mov	r3, r0
 8004608:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800460a:	e005      	b.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	75fb      	strb	r3, [r7, #23]
      break;
 8004610:	e002      	b.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004612:	bf00      	nop
 8004614:	e000      	b.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004616:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004618:	7dfb      	ldrb	r3, [r7, #23]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d109      	bne.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800461e:	4b4d      	ldr	r3, [pc, #308]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004620:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004622:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800462a:	494a      	ldr	r1, [pc, #296]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800462c:	4313      	orrs	r3, r2
 800462e:	650b      	str	r3, [r1, #80]	; 0x50
 8004630:	e001      	b.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004632:	7dfb      	ldrb	r3, [r7, #23]
 8004634:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800463e:	2b00      	cmp	r3, #0
 8004640:	d049      	beq.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004648:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800464c:	d030      	beq.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800464e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004652:	d82a      	bhi.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004654:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004658:	d02c      	beq.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800465a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800465e:	d824      	bhi.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004660:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004664:	d018      	beq.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8004666:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800466a:	d81e      	bhi.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800466c:	2b00      	cmp	r3, #0
 800466e:	d003      	beq.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004670:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004674:	d007      	beq.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8004676:	e018      	b.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004678:	4b36      	ldr	r3, [pc, #216]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800467a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800467c:	4a35      	ldr	r2, [pc, #212]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800467e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004682:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004684:	e017      	b.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	3304      	adds	r3, #4
 800468a:	2100      	movs	r1, #0
 800468c:	4618      	mov	r0, r3
 800468e:	f001 f8fb 	bl	8005888 <RCCEx_PLL2_Config>
 8004692:	4603      	mov	r3, r0
 8004694:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004696:	e00e      	b.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	3324      	adds	r3, #36	; 0x24
 800469c:	2100      	movs	r1, #0
 800469e:	4618      	mov	r0, r3
 80046a0:	f001 f9a4 	bl	80059ec <RCCEx_PLL3_Config>
 80046a4:	4603      	mov	r3, r0
 80046a6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80046a8:	e005      	b.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	75fb      	strb	r3, [r7, #23]
      break;
 80046ae:	e002      	b.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80046b0:	bf00      	nop
 80046b2:	e000      	b.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80046b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046b6:	7dfb      	ldrb	r3, [r7, #23]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d10a      	bne.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80046bc:	4b25      	ldr	r3, [pc, #148]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80046be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046c0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80046ca:	4922      	ldr	r1, [pc, #136]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80046cc:	4313      	orrs	r3, r2
 80046ce:	658b      	str	r3, [r1, #88]	; 0x58
 80046d0:	e001      	b.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046d2:	7dfb      	ldrb	r3, [r7, #23]
 80046d4:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d04b      	beq.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80046e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80046ec:	d030      	beq.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80046ee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80046f2:	d82a      	bhi.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80046f4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80046f8:	d02e      	beq.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 80046fa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80046fe:	d824      	bhi.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004700:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004704:	d018      	beq.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8004706:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800470a:	d81e      	bhi.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800470c:	2b00      	cmp	r3, #0
 800470e:	d003      	beq.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004710:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004714:	d007      	beq.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8004716:	e018      	b.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004718:	4b0e      	ldr	r3, [pc, #56]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800471a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800471c:	4a0d      	ldr	r2, [pc, #52]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800471e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004722:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004724:	e019      	b.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	3304      	adds	r3, #4
 800472a:	2100      	movs	r1, #0
 800472c:	4618      	mov	r0, r3
 800472e:	f001 f8ab 	bl	8005888 <RCCEx_PLL2_Config>
 8004732:	4603      	mov	r3, r0
 8004734:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004736:	e010      	b.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	3324      	adds	r3, #36	; 0x24
 800473c:	2100      	movs	r1, #0
 800473e:	4618      	mov	r0, r3
 8004740:	f001 f954 	bl	80059ec <RCCEx_PLL3_Config>
 8004744:	4603      	mov	r3, r0
 8004746:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004748:	e007      	b.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	75fb      	strb	r3, [r7, #23]
      break;
 800474e:	e004      	b.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8004750:	bf00      	nop
 8004752:	e002      	b.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8004754:	58024400 	.word	0x58024400
      break;
 8004758:	bf00      	nop
    }

    if(ret == HAL_OK)
 800475a:	7dfb      	ldrb	r3, [r7, #23]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d10a      	bne.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004760:	4b99      	ldr	r3, [pc, #612]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004762:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004764:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800476e:	4996      	ldr	r1, [pc, #600]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004770:	4313      	orrs	r3, r2
 8004772:	658b      	str	r3, [r1, #88]	; 0x58
 8004774:	e001      	b.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004776:	7dfb      	ldrb	r3, [r7, #23]
 8004778:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004782:	2b00      	cmp	r3, #0
 8004784:	d032      	beq.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800478a:	2b30      	cmp	r3, #48	; 0x30
 800478c:	d01c      	beq.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800478e:	2b30      	cmp	r3, #48	; 0x30
 8004790:	d817      	bhi.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8004792:	2b20      	cmp	r3, #32
 8004794:	d00c      	beq.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8004796:	2b20      	cmp	r3, #32
 8004798:	d813      	bhi.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800479a:	2b00      	cmp	r3, #0
 800479c:	d016      	beq.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800479e:	2b10      	cmp	r3, #16
 80047a0:	d10f      	bne.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047a2:	4b89      	ldr	r3, [pc, #548]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80047a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a6:	4a88      	ldr	r2, [pc, #544]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80047a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047ac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80047ae:	e00e      	b.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	3304      	adds	r3, #4
 80047b4:	2102      	movs	r1, #2
 80047b6:	4618      	mov	r0, r3
 80047b8:	f001 f866 	bl	8005888 <RCCEx_PLL2_Config>
 80047bc:	4603      	mov	r3, r0
 80047be:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80047c0:	e005      	b.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	75fb      	strb	r3, [r7, #23]
      break;
 80047c6:	e002      	b.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80047c8:	bf00      	nop
 80047ca:	e000      	b.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80047cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047ce:	7dfb      	ldrb	r3, [r7, #23]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d109      	bne.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80047d4:	4b7c      	ldr	r3, [pc, #496]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80047d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047d8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047e0:	4979      	ldr	r1, [pc, #484]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80047e2:	4313      	orrs	r3, r2
 80047e4:	64cb      	str	r3, [r1, #76]	; 0x4c
 80047e6:	e001      	b.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047e8:	7dfb      	ldrb	r3, [r7, #23]
 80047ea:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d047      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004800:	d030      	beq.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004802:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004806:	d82a      	bhi.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004808:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800480c:	d02c      	beq.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800480e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004812:	d824      	bhi.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004814:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004818:	d018      	beq.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800481a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800481e:	d81e      	bhi.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004820:	2b00      	cmp	r3, #0
 8004822:	d003      	beq.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8004824:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004828:	d007      	beq.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800482a:	e018      	b.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800482c:	4b66      	ldr	r3, [pc, #408]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800482e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004830:	4a65      	ldr	r2, [pc, #404]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004832:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004836:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004838:	e017      	b.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	3304      	adds	r3, #4
 800483e:	2100      	movs	r1, #0
 8004840:	4618      	mov	r0, r3
 8004842:	f001 f821 	bl	8005888 <RCCEx_PLL2_Config>
 8004846:	4603      	mov	r3, r0
 8004848:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800484a:	e00e      	b.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	3324      	adds	r3, #36	; 0x24
 8004850:	2100      	movs	r1, #0
 8004852:	4618      	mov	r0, r3
 8004854:	f001 f8ca 	bl	80059ec <RCCEx_PLL3_Config>
 8004858:	4603      	mov	r3, r0
 800485a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800485c:	e005      	b.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	75fb      	strb	r3, [r7, #23]
      break;
 8004862:	e002      	b.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8004864:	bf00      	nop
 8004866:	e000      	b.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8004868:	bf00      	nop
    }

    if(ret == HAL_OK)
 800486a:	7dfb      	ldrb	r3, [r7, #23]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d109      	bne.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004870:	4b55      	ldr	r3, [pc, #340]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004872:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004874:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800487c:	4952      	ldr	r1, [pc, #328]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800487e:	4313      	orrs	r3, r2
 8004880:	650b      	str	r3, [r1, #80]	; 0x50
 8004882:	e001      	b.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004884:	7dfb      	ldrb	r3, [r7, #23]
 8004886:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004890:	2b00      	cmp	r3, #0
 8004892:	d049      	beq.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004898:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800489c:	d02e      	beq.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800489e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80048a2:	d828      	bhi.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80048a4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80048a8:	d02a      	beq.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x480>
 80048aa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80048ae:	d822      	bhi.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80048b0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80048b4:	d026      	beq.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x484>
 80048b6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80048ba:	d81c      	bhi.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80048bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80048c0:	d010      	beq.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x464>
 80048c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80048c6:	d816      	bhi.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d01d      	beq.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x488>
 80048cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048d0:	d111      	bne.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	3304      	adds	r3, #4
 80048d6:	2101      	movs	r1, #1
 80048d8:	4618      	mov	r0, r3
 80048da:	f000 ffd5 	bl	8005888 <RCCEx_PLL2_Config>
 80048de:	4603      	mov	r3, r0
 80048e0:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80048e2:	e012      	b.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	3324      	adds	r3, #36	; 0x24
 80048e8:	2101      	movs	r1, #1
 80048ea:	4618      	mov	r0, r3
 80048ec:	f001 f87e 	bl	80059ec <RCCEx_PLL3_Config>
 80048f0:	4603      	mov	r3, r0
 80048f2:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80048f4:	e009      	b.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	75fb      	strb	r3, [r7, #23]
      break;
 80048fa:	e006      	b.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80048fc:	bf00      	nop
 80048fe:	e004      	b.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004900:	bf00      	nop
 8004902:	e002      	b.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004904:	bf00      	nop
 8004906:	e000      	b.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004908:	bf00      	nop
    }

    if(ret == HAL_OK)
 800490a:	7dfb      	ldrb	r3, [r7, #23]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d109      	bne.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004910:	4b2d      	ldr	r3, [pc, #180]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004912:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004914:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800491c:	492a      	ldr	r1, [pc, #168]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800491e:	4313      	orrs	r3, r2
 8004920:	650b      	str	r3, [r1, #80]	; 0x50
 8004922:	e001      	b.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004924:	7dfb      	ldrb	r3, [r7, #23]
 8004926:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004930:	2b00      	cmp	r3, #0
 8004932:	d04d      	beq.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800493a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800493e:	d02e      	beq.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8004940:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004944:	d828      	bhi.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004946:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800494a:	d02a      	beq.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x522>
 800494c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004950:	d822      	bhi.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004952:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004956:	d026      	beq.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8004958:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800495c:	d81c      	bhi.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800495e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004962:	d010      	beq.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8004964:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004968:	d816      	bhi.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800496a:	2b00      	cmp	r3, #0
 800496c:	d01d      	beq.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800496e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004972:	d111      	bne.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	3304      	adds	r3, #4
 8004978:	2101      	movs	r1, #1
 800497a:	4618      	mov	r0, r3
 800497c:	f000 ff84 	bl	8005888 <RCCEx_PLL2_Config>
 8004980:	4603      	mov	r3, r0
 8004982:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004984:	e012      	b.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	3324      	adds	r3, #36	; 0x24
 800498a:	2101      	movs	r1, #1
 800498c:	4618      	mov	r0, r3
 800498e:	f001 f82d 	bl	80059ec <RCCEx_PLL3_Config>
 8004992:	4603      	mov	r3, r0
 8004994:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004996:	e009      	b.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004998:	2301      	movs	r3, #1
 800499a:	75fb      	strb	r3, [r7, #23]
      break;
 800499c:	e006      	b.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800499e:	bf00      	nop
 80049a0:	e004      	b.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80049a2:	bf00      	nop
 80049a4:	e002      	b.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80049a6:	bf00      	nop
 80049a8:	e000      	b.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80049aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049ac:	7dfb      	ldrb	r3, [r7, #23]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d10c      	bne.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80049b2:	4b05      	ldr	r3, [pc, #20]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80049b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049b6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80049c0:	4901      	ldr	r1, [pc, #4]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80049c2:	4313      	orrs	r3, r2
 80049c4:	658b      	str	r3, [r1, #88]	; 0x58
 80049c6:	e003      	b.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x550>
 80049c8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049cc:	7dfb      	ldrb	r3, [r7, #23]
 80049ce:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d02f      	beq.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049e4:	d00e      	beq.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x584>
 80049e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049ea:	d814      	bhi.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x596>
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d015      	beq.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x59c>
 80049f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80049f4:	d10f      	bne.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049f6:	4baf      	ldr	r3, [pc, #700]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80049f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049fa:	4aae      	ldr	r2, [pc, #696]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80049fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a00:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004a02:	e00c      	b.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	3304      	adds	r3, #4
 8004a08:	2101      	movs	r1, #1
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f000 ff3c 	bl	8005888 <RCCEx_PLL2_Config>
 8004a10:	4603      	mov	r3, r0
 8004a12:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004a14:	e003      	b.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	75fb      	strb	r3, [r7, #23]
      break;
 8004a1a:	e000      	b.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8004a1c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a1e:	7dfb      	ldrb	r3, [r7, #23]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d109      	bne.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004a24:	4ba3      	ldr	r3, [pc, #652]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004a26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a28:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a30:	49a0      	ldr	r1, [pc, #640]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004a32:	4313      	orrs	r3, r2
 8004a34:	650b      	str	r3, [r1, #80]	; 0x50
 8004a36:	e001      	b.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a38:	7dfb      	ldrb	r3, [r7, #23]
 8004a3a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d032      	beq.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a4c:	2b03      	cmp	r3, #3
 8004a4e:	d81b      	bhi.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8004a50:	a201      	add	r2, pc, #4	; (adr r2, 8004a58 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8004a52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a56:	bf00      	nop
 8004a58:	08004a8f 	.word	0x08004a8f
 8004a5c:	08004a69 	.word	0x08004a69
 8004a60:	08004a77 	.word	0x08004a77
 8004a64:	08004a8f 	.word	0x08004a8f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a68:	4b92      	ldr	r3, [pc, #584]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a6c:	4a91      	ldr	r2, [pc, #580]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004a6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a72:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004a74:	e00c      	b.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	3304      	adds	r3, #4
 8004a7a:	2102      	movs	r1, #2
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f000 ff03 	bl	8005888 <RCCEx_PLL2_Config>
 8004a82:	4603      	mov	r3, r0
 8004a84:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004a86:	e003      	b.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	75fb      	strb	r3, [r7, #23]
      break;
 8004a8c:	e000      	b.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8004a8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a90:	7dfb      	ldrb	r3, [r7, #23]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d109      	bne.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004a96:	4b87      	ldr	r3, [pc, #540]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a9a:	f023 0203 	bic.w	r2, r3, #3
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aa2:	4984      	ldr	r1, [pc, #528]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004aa8:	e001      	b.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004aaa:	7dfb      	ldrb	r3, [r7, #23]
 8004aac:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	f000 8086 	beq.w	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004abc:	4b7e      	ldr	r3, [pc, #504]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a7d      	ldr	r2, [pc, #500]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004ac2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ac6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004ac8:	f7fc ff0a 	bl	80018e0 <HAL_GetTick>
 8004acc:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ace:	e009      	b.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ad0:	f7fc ff06 	bl	80018e0 <HAL_GetTick>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	1ad3      	subs	r3, r2, r3
 8004ada:	2b64      	cmp	r3, #100	; 0x64
 8004adc:	d902      	bls.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8004ade:	2303      	movs	r3, #3
 8004ae0:	75fb      	strb	r3, [r7, #23]
        break;
 8004ae2:	e005      	b.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ae4:	4b74      	ldr	r3, [pc, #464]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d0ef      	beq.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8004af0:	7dfb      	ldrb	r3, [r7, #23]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d166      	bne.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004af6:	4b6f      	ldr	r3, [pc, #444]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004af8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004b00:	4053      	eors	r3, r2
 8004b02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d013      	beq.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b0a:	4b6a      	ldr	r3, [pc, #424]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b12:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004b14:	4b67      	ldr	r3, [pc, #412]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004b16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b18:	4a66      	ldr	r2, [pc, #408]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004b1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b1e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004b20:	4b64      	ldr	r3, [pc, #400]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004b22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b24:	4a63      	ldr	r2, [pc, #396]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004b26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b2a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004b2c:	4a61      	ldr	r2, [pc, #388]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004b38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b3c:	d115      	bne.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b3e:	f7fc fecf 	bl	80018e0 <HAL_GetTick>
 8004b42:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004b44:	e00b      	b.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b46:	f7fc fecb 	bl	80018e0 <HAL_GetTick>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	1ad3      	subs	r3, r2, r3
 8004b50:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d902      	bls.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8004b58:	2303      	movs	r3, #3
 8004b5a:	75fb      	strb	r3, [r7, #23]
            break;
 8004b5c:	e005      	b.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004b5e:	4b55      	ldr	r3, [pc, #340]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b62:	f003 0302 	and.w	r3, r3, #2
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d0ed      	beq.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8004b6a:	7dfb      	ldrb	r3, [r7, #23]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d126      	bne.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004b76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b7e:	d10d      	bne.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8004b80:	4b4c      	ldr	r3, [pc, #304]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004b82:	691b      	ldr	r3, [r3, #16]
 8004b84:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004b8e:	0919      	lsrs	r1, r3, #4
 8004b90:	4b4a      	ldr	r3, [pc, #296]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8004b92:	400b      	ands	r3, r1
 8004b94:	4947      	ldr	r1, [pc, #284]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004b96:	4313      	orrs	r3, r2
 8004b98:	610b      	str	r3, [r1, #16]
 8004b9a:	e005      	b.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8004b9c:	4b45      	ldr	r3, [pc, #276]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004b9e:	691b      	ldr	r3, [r3, #16]
 8004ba0:	4a44      	ldr	r2, [pc, #272]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004ba2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004ba6:	6113      	str	r3, [r2, #16]
 8004ba8:	4b42      	ldr	r3, [pc, #264]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004baa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004bb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bb6:	493f      	ldr	r1, [pc, #252]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	670b      	str	r3, [r1, #112]	; 0x70
 8004bbc:	e004      	b.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004bbe:	7dfb      	ldrb	r3, [r7, #23]
 8004bc0:	75bb      	strb	r3, [r7, #22]
 8004bc2:	e001      	b.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bc4:	7dfb      	ldrb	r3, [r7, #23]
 8004bc6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 0301 	and.w	r3, r3, #1
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	f000 8085 	beq.w	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004bda:	2b28      	cmp	r3, #40	; 0x28
 8004bdc:	d866      	bhi.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8004bde:	a201      	add	r2, pc, #4	; (adr r2, 8004be4 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8004be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004be4:	08004cc1 	.word	0x08004cc1
 8004be8:	08004cad 	.word	0x08004cad
 8004bec:	08004cad 	.word	0x08004cad
 8004bf0:	08004cad 	.word	0x08004cad
 8004bf4:	08004cad 	.word	0x08004cad
 8004bf8:	08004cad 	.word	0x08004cad
 8004bfc:	08004cad 	.word	0x08004cad
 8004c00:	08004cad 	.word	0x08004cad
 8004c04:	08004c89 	.word	0x08004c89
 8004c08:	08004cad 	.word	0x08004cad
 8004c0c:	08004cad 	.word	0x08004cad
 8004c10:	08004cad 	.word	0x08004cad
 8004c14:	08004cad 	.word	0x08004cad
 8004c18:	08004cad 	.word	0x08004cad
 8004c1c:	08004cad 	.word	0x08004cad
 8004c20:	08004cad 	.word	0x08004cad
 8004c24:	08004c9b 	.word	0x08004c9b
 8004c28:	08004cad 	.word	0x08004cad
 8004c2c:	08004cad 	.word	0x08004cad
 8004c30:	08004cad 	.word	0x08004cad
 8004c34:	08004cad 	.word	0x08004cad
 8004c38:	08004cad 	.word	0x08004cad
 8004c3c:	08004cad 	.word	0x08004cad
 8004c40:	08004cad 	.word	0x08004cad
 8004c44:	08004cc1 	.word	0x08004cc1
 8004c48:	08004cad 	.word	0x08004cad
 8004c4c:	08004cad 	.word	0x08004cad
 8004c50:	08004cad 	.word	0x08004cad
 8004c54:	08004cad 	.word	0x08004cad
 8004c58:	08004cad 	.word	0x08004cad
 8004c5c:	08004cad 	.word	0x08004cad
 8004c60:	08004cad 	.word	0x08004cad
 8004c64:	08004cc1 	.word	0x08004cc1
 8004c68:	08004cad 	.word	0x08004cad
 8004c6c:	08004cad 	.word	0x08004cad
 8004c70:	08004cad 	.word	0x08004cad
 8004c74:	08004cad 	.word	0x08004cad
 8004c78:	08004cad 	.word	0x08004cad
 8004c7c:	08004cad 	.word	0x08004cad
 8004c80:	08004cad 	.word	0x08004cad
 8004c84:	08004cc1 	.word	0x08004cc1
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	3304      	adds	r3, #4
 8004c8c:	2101      	movs	r1, #1
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f000 fdfa 	bl	8005888 <RCCEx_PLL2_Config>
 8004c94:	4603      	mov	r3, r0
 8004c96:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004c98:	e013      	b.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	3324      	adds	r3, #36	; 0x24
 8004c9e:	2101      	movs	r1, #1
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f000 fea3 	bl	80059ec <RCCEx_PLL3_Config>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004caa:	e00a      	b.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004cac:	2301      	movs	r3, #1
 8004cae:	75fb      	strb	r3, [r7, #23]
      break;
 8004cb0:	e007      	b.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004cb2:	bf00      	nop
 8004cb4:	58024400 	.word	0x58024400
 8004cb8:	58024800 	.word	0x58024800
 8004cbc:	00ffffcf 	.word	0x00ffffcf
      break;
 8004cc0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004cc2:	7dfb      	ldrb	r3, [r7, #23]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d109      	bne.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004cc8:	4b96      	ldr	r3, [pc, #600]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004cca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ccc:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004cd4:	4993      	ldr	r1, [pc, #588]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	654b      	str	r3, [r1, #84]	; 0x54
 8004cda:	e001      	b.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cdc:	7dfb      	ldrb	r3, [r7, #23]
 8004cde:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 0302 	and.w	r3, r3, #2
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d038      	beq.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cf0:	2b05      	cmp	r3, #5
 8004cf2:	d821      	bhi.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8004cf4:	a201      	add	r2, pc, #4	; (adr r2, 8004cfc <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8004cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cfa:	bf00      	nop
 8004cfc:	08004d3f 	.word	0x08004d3f
 8004d00:	08004d15 	.word	0x08004d15
 8004d04:	08004d27 	.word	0x08004d27
 8004d08:	08004d3f 	.word	0x08004d3f
 8004d0c:	08004d3f 	.word	0x08004d3f
 8004d10:	08004d3f 	.word	0x08004d3f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	3304      	adds	r3, #4
 8004d18:	2101      	movs	r1, #1
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f000 fdb4 	bl	8005888 <RCCEx_PLL2_Config>
 8004d20:	4603      	mov	r3, r0
 8004d22:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004d24:	e00c      	b.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	3324      	adds	r3, #36	; 0x24
 8004d2a:	2101      	movs	r1, #1
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f000 fe5d 	bl	80059ec <RCCEx_PLL3_Config>
 8004d32:	4603      	mov	r3, r0
 8004d34:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004d36:	e003      	b.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	75fb      	strb	r3, [r7, #23]
      break;
 8004d3c:	e000      	b.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8004d3e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d40:	7dfb      	ldrb	r3, [r7, #23]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d109      	bne.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004d46:	4b77      	ldr	r3, [pc, #476]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004d48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d4a:	f023 0207 	bic.w	r2, r3, #7
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d52:	4974      	ldr	r1, [pc, #464]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004d54:	4313      	orrs	r3, r2
 8004d56:	654b      	str	r3, [r1, #84]	; 0x54
 8004d58:	e001      	b.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d5a:	7dfb      	ldrb	r3, [r7, #23]
 8004d5c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 0304 	and.w	r3, r3, #4
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d03a      	beq.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d70:	2b05      	cmp	r3, #5
 8004d72:	d821      	bhi.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8004d74:	a201      	add	r2, pc, #4	; (adr r2, 8004d7c <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8004d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d7a:	bf00      	nop
 8004d7c:	08004dbf 	.word	0x08004dbf
 8004d80:	08004d95 	.word	0x08004d95
 8004d84:	08004da7 	.word	0x08004da7
 8004d88:	08004dbf 	.word	0x08004dbf
 8004d8c:	08004dbf 	.word	0x08004dbf
 8004d90:	08004dbf 	.word	0x08004dbf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	3304      	adds	r3, #4
 8004d98:	2101      	movs	r1, #1
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f000 fd74 	bl	8005888 <RCCEx_PLL2_Config>
 8004da0:	4603      	mov	r3, r0
 8004da2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004da4:	e00c      	b.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	3324      	adds	r3, #36	; 0x24
 8004daa:	2101      	movs	r1, #1
 8004dac:	4618      	mov	r0, r3
 8004dae:	f000 fe1d 	bl	80059ec <RCCEx_PLL3_Config>
 8004db2:	4603      	mov	r3, r0
 8004db4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004db6:	e003      	b.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004db8:	2301      	movs	r3, #1
 8004dba:	75fb      	strb	r3, [r7, #23]
      break;
 8004dbc:	e000      	b.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8004dbe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004dc0:	7dfb      	ldrb	r3, [r7, #23]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d10a      	bne.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004dc6:	4b57      	ldr	r3, [pc, #348]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dca:	f023 0207 	bic.w	r2, r3, #7
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dd4:	4953      	ldr	r1, [pc, #332]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	658b      	str	r3, [r1, #88]	; 0x58
 8004dda:	e001      	b.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ddc:	7dfb      	ldrb	r3, [r7, #23]
 8004dde:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 0320 	and.w	r3, r3, #32
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d04b      	beq.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004df2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004df6:	d02e      	beq.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8004df8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004dfc:	d828      	bhi.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004dfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e02:	d02a      	beq.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8004e04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e08:	d822      	bhi.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004e0a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004e0e:	d026      	beq.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8004e10:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004e14:	d81c      	bhi.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004e16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e1a:	d010      	beq.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8004e1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e20:	d816      	bhi.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d01d      	beq.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8004e26:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e2a:	d111      	bne.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	3304      	adds	r3, #4
 8004e30:	2100      	movs	r1, #0
 8004e32:	4618      	mov	r0, r3
 8004e34:	f000 fd28 	bl	8005888 <RCCEx_PLL2_Config>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004e3c:	e012      	b.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	3324      	adds	r3, #36	; 0x24
 8004e42:	2102      	movs	r1, #2
 8004e44:	4618      	mov	r0, r3
 8004e46:	f000 fdd1 	bl	80059ec <RCCEx_PLL3_Config>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004e4e:	e009      	b.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e50:	2301      	movs	r3, #1
 8004e52:	75fb      	strb	r3, [r7, #23]
      break;
 8004e54:	e006      	b.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004e56:	bf00      	nop
 8004e58:	e004      	b.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004e5a:	bf00      	nop
 8004e5c:	e002      	b.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004e5e:	bf00      	nop
 8004e60:	e000      	b.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004e62:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e64:	7dfb      	ldrb	r3, [r7, #23]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d10a      	bne.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004e6a:	4b2e      	ldr	r3, [pc, #184]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004e6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e6e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e78:	492a      	ldr	r1, [pc, #168]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	654b      	str	r3, [r1, #84]	; 0x54
 8004e7e:	e001      	b.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e80:	7dfb      	ldrb	r3, [r7, #23]
 8004e82:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d04d      	beq.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004e96:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004e9a:	d02e      	beq.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8004e9c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004ea0:	d828      	bhi.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004ea2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ea6:	d02a      	beq.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8004ea8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004eac:	d822      	bhi.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004eae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004eb2:	d026      	beq.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8004eb4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004eb8:	d81c      	bhi.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004eba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ebe:	d010      	beq.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8004ec0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ec4:	d816      	bhi.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d01d      	beq.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8004eca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ece:	d111      	bne.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	3304      	adds	r3, #4
 8004ed4:	2100      	movs	r1, #0
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f000 fcd6 	bl	8005888 <RCCEx_PLL2_Config>
 8004edc:	4603      	mov	r3, r0
 8004ede:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004ee0:	e012      	b.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	3324      	adds	r3, #36	; 0x24
 8004ee6:	2102      	movs	r1, #2
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f000 fd7f 	bl	80059ec <RCCEx_PLL3_Config>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004ef2:	e009      	b.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	75fb      	strb	r3, [r7, #23]
      break;
 8004ef8:	e006      	b.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004efa:	bf00      	nop
 8004efc:	e004      	b.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004efe:	bf00      	nop
 8004f00:	e002      	b.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004f02:	bf00      	nop
 8004f04:	e000      	b.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004f06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f08:	7dfb      	ldrb	r3, [r7, #23]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d10c      	bne.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004f0e:	4b05      	ldr	r3, [pc, #20]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f12:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004f1c:	4901      	ldr	r1, [pc, #4]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	658b      	str	r3, [r1, #88]	; 0x58
 8004f22:	e003      	b.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8004f24:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f28:	7dfb      	ldrb	r3, [r7, #23]
 8004f2a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d04b      	beq.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f3e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004f42:	d02e      	beq.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8004f44:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004f48:	d828      	bhi.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004f4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f4e:	d02a      	beq.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8004f50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f54:	d822      	bhi.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004f56:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004f5a:	d026      	beq.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8004f5c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004f60:	d81c      	bhi.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004f62:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f66:	d010      	beq.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8004f68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f6c:	d816      	bhi.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d01d      	beq.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8004f72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f76:	d111      	bne.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	3304      	adds	r3, #4
 8004f7c:	2100      	movs	r1, #0
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f000 fc82 	bl	8005888 <RCCEx_PLL2_Config>
 8004f84:	4603      	mov	r3, r0
 8004f86:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004f88:	e012      	b.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	3324      	adds	r3, #36	; 0x24
 8004f8e:	2102      	movs	r1, #2
 8004f90:	4618      	mov	r0, r3
 8004f92:	f000 fd2b 	bl	80059ec <RCCEx_PLL3_Config>
 8004f96:	4603      	mov	r3, r0
 8004f98:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004f9a:	e009      	b.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	75fb      	strb	r3, [r7, #23]
      break;
 8004fa0:	e006      	b.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004fa2:	bf00      	nop
 8004fa4:	e004      	b.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004fa6:	bf00      	nop
 8004fa8:	e002      	b.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004faa:	bf00      	nop
 8004fac:	e000      	b.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004fae:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fb0:	7dfb      	ldrb	r3, [r7, #23]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d10a      	bne.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004fb6:	4b9d      	ldr	r3, [pc, #628]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004fb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004fc4:	4999      	ldr	r1, [pc, #612]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	658b      	str	r3, [r1, #88]	; 0x58
 8004fca:	e001      	b.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fcc:	7dfb      	ldrb	r3, [r7, #23]
 8004fce:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f003 0308 	and.w	r3, r3, #8
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d01a      	beq.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fe2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fe6:	d10a      	bne.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	3324      	adds	r3, #36	; 0x24
 8004fec:	2102      	movs	r1, #2
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f000 fcfc 	bl	80059ec <RCCEx_PLL3_Config>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d001      	beq.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004ffe:	4b8b      	ldr	r3, [pc, #556]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005002:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800500c:	4987      	ldr	r1, [pc, #540]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800500e:	4313      	orrs	r3, r2
 8005010:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f003 0310 	and.w	r3, r3, #16
 800501a:	2b00      	cmp	r3, #0
 800501c:	d01a      	beq.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005024:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005028:	d10a      	bne.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	3324      	adds	r3, #36	; 0x24
 800502e:	2102      	movs	r1, #2
 8005030:	4618      	mov	r0, r3
 8005032:	f000 fcdb 	bl	80059ec <RCCEx_PLL3_Config>
 8005036:	4603      	mov	r3, r0
 8005038:	2b00      	cmp	r3, #0
 800503a:	d001      	beq.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005040:	4b7a      	ldr	r3, [pc, #488]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005042:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005044:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800504e:	4977      	ldr	r1, [pc, #476]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005050:	4313      	orrs	r3, r2
 8005052:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800505c:	2b00      	cmp	r3, #0
 800505e:	d034      	beq.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005066:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800506a:	d01d      	beq.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800506c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005070:	d817      	bhi.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8005072:	2b00      	cmp	r3, #0
 8005074:	d003      	beq.n	800507e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8005076:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800507a:	d009      	beq.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800507c:	e011      	b.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	3304      	adds	r3, #4
 8005082:	2100      	movs	r1, #0
 8005084:	4618      	mov	r0, r3
 8005086:	f000 fbff 	bl	8005888 <RCCEx_PLL2_Config>
 800508a:	4603      	mov	r3, r0
 800508c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800508e:	e00c      	b.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	3324      	adds	r3, #36	; 0x24
 8005094:	2102      	movs	r1, #2
 8005096:	4618      	mov	r0, r3
 8005098:	f000 fca8 	bl	80059ec <RCCEx_PLL3_Config>
 800509c:	4603      	mov	r3, r0
 800509e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80050a0:	e003      	b.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	75fb      	strb	r3, [r7, #23]
      break;
 80050a6:	e000      	b.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 80050a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050aa:	7dfb      	ldrb	r3, [r7, #23]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d10a      	bne.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80050b0:	4b5e      	ldr	r3, [pc, #376]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80050b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80050be:	495b      	ldr	r1, [pc, #364]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80050c0:	4313      	orrs	r3, r2
 80050c2:	658b      	str	r3, [r1, #88]	; 0x58
 80050c4:	e001      	b.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050c6:	7dfb      	ldrb	r3, [r7, #23]
 80050c8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d033      	beq.n	800513e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050dc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80050e0:	d01c      	beq.n	800511c <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 80050e2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80050e6:	d816      	bhi.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 80050e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050ec:	d003      	beq.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80050ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80050f2:	d007      	beq.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 80050f4:	e00f      	b.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050f6:	4b4d      	ldr	r3, [pc, #308]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80050f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050fa:	4a4c      	ldr	r2, [pc, #304]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80050fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005100:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8005102:	e00c      	b.n	800511e <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	3324      	adds	r3, #36	; 0x24
 8005108:	2101      	movs	r1, #1
 800510a:	4618      	mov	r0, r3
 800510c:	f000 fc6e 	bl	80059ec <RCCEx_PLL3_Config>
 8005110:	4603      	mov	r3, r0
 8005112:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8005114:	e003      	b.n	800511e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	75fb      	strb	r3, [r7, #23]
      break;
 800511a:	e000      	b.n	800511e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 800511c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800511e:	7dfb      	ldrb	r3, [r7, #23]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d10a      	bne.n	800513a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005124:	4b41      	ldr	r3, [pc, #260]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005126:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005128:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005132:	493e      	ldr	r1, [pc, #248]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005134:	4313      	orrs	r3, r2
 8005136:	654b      	str	r3, [r1, #84]	; 0x54
 8005138:	e001      	b.n	800513e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800513a:	7dfb      	ldrb	r3, [r7, #23]
 800513c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005146:	2b00      	cmp	r3, #0
 8005148:	d029      	beq.n	800519e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800514e:	2b00      	cmp	r3, #0
 8005150:	d003      	beq.n	800515a <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8005152:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005156:	d007      	beq.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8005158:	e00f      	b.n	800517a <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800515a:	4b34      	ldr	r3, [pc, #208]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800515c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800515e:	4a33      	ldr	r2, [pc, #204]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005160:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005164:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005166:	e00b      	b.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	3304      	adds	r3, #4
 800516c:	2102      	movs	r1, #2
 800516e:	4618      	mov	r0, r3
 8005170:	f000 fb8a 	bl	8005888 <RCCEx_PLL2_Config>
 8005174:	4603      	mov	r3, r0
 8005176:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005178:	e002      	b.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	75fb      	strb	r3, [r7, #23]
      break;
 800517e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005180:	7dfb      	ldrb	r3, [r7, #23]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d109      	bne.n	800519a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005186:	4b29      	ldr	r3, [pc, #164]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800518a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005192:	4926      	ldr	r1, [pc, #152]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005194:	4313      	orrs	r3, r2
 8005196:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005198:	e001      	b.n	800519e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800519a:	7dfb      	ldrb	r3, [r7, #23]
 800519c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d00a      	beq.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	3324      	adds	r3, #36	; 0x24
 80051ae:	2102      	movs	r1, #2
 80051b0:	4618      	mov	r0, r3
 80051b2:	f000 fc1b 	bl	80059ec <RCCEx_PLL3_Config>
 80051b6:	4603      	mov	r3, r0
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d001      	beq.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 80051bc:	2301      	movs	r3, #1
 80051be:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d033      	beq.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051d4:	d017      	beq.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80051d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051da:	d811      	bhi.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80051dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051e0:	d013      	beq.n	800520a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80051e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051e6:	d80b      	bhi.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d010      	beq.n	800520e <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 80051ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051f0:	d106      	bne.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051f2:	4b0e      	ldr	r3, [pc, #56]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80051f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051f6:	4a0d      	ldr	r2, [pc, #52]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80051f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051fc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80051fe:	e007      	b.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005200:	2301      	movs	r3, #1
 8005202:	75fb      	strb	r3, [r7, #23]
      break;
 8005204:	e004      	b.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8005206:	bf00      	nop
 8005208:	e002      	b.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800520a:	bf00      	nop
 800520c:	e000      	b.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800520e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005210:	7dfb      	ldrb	r3, [r7, #23]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d10c      	bne.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005216:	4b05      	ldr	r3, [pc, #20]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800521a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005222:	4902      	ldr	r1, [pc, #8]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005224:	4313      	orrs	r3, r2
 8005226:	654b      	str	r3, [r1, #84]	; 0x54
 8005228:	e004      	b.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800522a:	bf00      	nop
 800522c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005230:	7dfb      	ldrb	r3, [r7, #23]
 8005232:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800523c:	2b00      	cmp	r3, #0
 800523e:	d008      	beq.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005240:	4b31      	ldr	r3, [pc, #196]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005242:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005244:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800524c:	492e      	ldr	r1, [pc, #184]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800524e:	4313      	orrs	r3, r2
 8005250:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800525a:	2b00      	cmp	r3, #0
 800525c:	d009      	beq.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800525e:	4b2a      	ldr	r3, [pc, #168]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005260:	691b      	ldr	r3, [r3, #16]
 8005262:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800526c:	4926      	ldr	r1, [pc, #152]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800526e:	4313      	orrs	r3, r2
 8005270:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800527a:	2b00      	cmp	r3, #0
 800527c:	d008      	beq.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800527e:	4b22      	ldr	r3, [pc, #136]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005280:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005282:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800528a:	491f      	ldr	r1, [pc, #124]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800528c:	4313      	orrs	r3, r2
 800528e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005298:	2b00      	cmp	r3, #0
 800529a:	d00d      	beq.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800529c:	4b1a      	ldr	r3, [pc, #104]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800529e:	691b      	ldr	r3, [r3, #16]
 80052a0:	4a19      	ldr	r2, [pc, #100]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80052a2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80052a6:	6113      	str	r3, [r2, #16]
 80052a8:	4b17      	ldr	r3, [pc, #92]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80052aa:	691a      	ldr	r2, [r3, #16]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80052b2:	4915      	ldr	r1, [pc, #84]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80052b4:	4313      	orrs	r3, r2
 80052b6:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	da08      	bge.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80052c0:	4b11      	ldr	r3, [pc, #68]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80052c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052c4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052cc:	490e      	ldr	r1, [pc, #56]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80052ce:	4313      	orrs	r3, r2
 80052d0:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d009      	beq.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80052de:	4b0a      	ldr	r3, [pc, #40]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80052e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052e2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052ec:	4906      	ldr	r1, [pc, #24]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80052ee:	4313      	orrs	r3, r2
 80052f0:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80052f2:	7dbb      	ldrb	r3, [r7, #22]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d101      	bne.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 80052f8:	2300      	movs	r3, #0
 80052fa:	e000      	b.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 80052fc:	2301      	movs	r3, #1
}
 80052fe:	4618      	mov	r0, r3
 8005300:	3718      	adds	r7, #24
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}
 8005306:	bf00      	nop
 8005308:	58024400 	.word	0x58024400

0800530c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005310:	f7ff f85a 	bl	80043c8 <HAL_RCC_GetHCLKFreq>
 8005314:	4602      	mov	r2, r0
 8005316:	4b06      	ldr	r3, [pc, #24]	; (8005330 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005318:	6a1b      	ldr	r3, [r3, #32]
 800531a:	091b      	lsrs	r3, r3, #4
 800531c:	f003 0307 	and.w	r3, r3, #7
 8005320:	4904      	ldr	r1, [pc, #16]	; (8005334 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005322:	5ccb      	ldrb	r3, [r1, r3]
 8005324:	f003 031f 	and.w	r3, r3, #31
 8005328:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800532c:	4618      	mov	r0, r3
 800532e:	bd80      	pop	{r7, pc}
 8005330:	58024400 	.word	0x58024400
 8005334:	080098a0 	.word	0x080098a0

08005338 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005338:	b480      	push	{r7}
 800533a:	b089      	sub	sp, #36	; 0x24
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005340:	4ba1      	ldr	r3, [pc, #644]	; (80055c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005344:	f003 0303 	and.w	r3, r3, #3
 8005348:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800534a:	4b9f      	ldr	r3, [pc, #636]	; (80055c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800534c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800534e:	0b1b      	lsrs	r3, r3, #12
 8005350:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005354:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005356:	4b9c      	ldr	r3, [pc, #624]	; (80055c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800535a:	091b      	lsrs	r3, r3, #4
 800535c:	f003 0301 	and.w	r3, r3, #1
 8005360:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005362:	4b99      	ldr	r3, [pc, #612]	; (80055c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005364:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005366:	08db      	lsrs	r3, r3, #3
 8005368:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800536c:	693a      	ldr	r2, [r7, #16]
 800536e:	fb02 f303 	mul.w	r3, r2, r3
 8005372:	ee07 3a90 	vmov	s15, r3
 8005376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800537a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	2b00      	cmp	r3, #0
 8005382:	f000 8111 	beq.w	80055a8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005386:	69bb      	ldr	r3, [r7, #24]
 8005388:	2b02      	cmp	r3, #2
 800538a:	f000 8083 	beq.w	8005494 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800538e:	69bb      	ldr	r3, [r7, #24]
 8005390:	2b02      	cmp	r3, #2
 8005392:	f200 80a1 	bhi.w	80054d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005396:	69bb      	ldr	r3, [r7, #24]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d003      	beq.n	80053a4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800539c:	69bb      	ldr	r3, [r7, #24]
 800539e:	2b01      	cmp	r3, #1
 80053a0:	d056      	beq.n	8005450 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80053a2:	e099      	b.n	80054d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80053a4:	4b88      	ldr	r3, [pc, #544]	; (80055c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f003 0320 	and.w	r3, r3, #32
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d02d      	beq.n	800540c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80053b0:	4b85      	ldr	r3, [pc, #532]	; (80055c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	08db      	lsrs	r3, r3, #3
 80053b6:	f003 0303 	and.w	r3, r3, #3
 80053ba:	4a84      	ldr	r2, [pc, #528]	; (80055cc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80053bc:	fa22 f303 	lsr.w	r3, r2, r3
 80053c0:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	ee07 3a90 	vmov	s15, r3
 80053c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	ee07 3a90 	vmov	s15, r3
 80053d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053da:	4b7b      	ldr	r3, [pc, #492]	; (80055c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80053dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053e2:	ee07 3a90 	vmov	s15, r3
 80053e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80053ee:	eddf 5a78 	vldr	s11, [pc, #480]	; 80055d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80053f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005402:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005406:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800540a:	e087      	b.n	800551c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	ee07 3a90 	vmov	s15, r3
 8005412:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005416:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80055d4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800541a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800541e:	4b6a      	ldr	r3, [pc, #424]	; (80055c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005422:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005426:	ee07 3a90 	vmov	s15, r3
 800542a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800542e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005432:	eddf 5a67 	vldr	s11, [pc, #412]	; 80055d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005436:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800543a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800543e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005442:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005446:	ee67 7a27 	vmul.f32	s15, s14, s15
 800544a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800544e:	e065      	b.n	800551c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	ee07 3a90 	vmov	s15, r3
 8005456:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800545a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80055d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800545e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005462:	4b59      	ldr	r3, [pc, #356]	; (80055c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005466:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800546a:	ee07 3a90 	vmov	s15, r3
 800546e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005472:	ed97 6a03 	vldr	s12, [r7, #12]
 8005476:	eddf 5a56 	vldr	s11, [pc, #344]	; 80055d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800547a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800547e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005482:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005486:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800548a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800548e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005492:	e043      	b.n	800551c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	ee07 3a90 	vmov	s15, r3
 800549a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800549e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80055dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80054a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054a6:	4b48      	ldr	r3, [pc, #288]	; (80055c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054ae:	ee07 3a90 	vmov	s15, r3
 80054b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80054ba:	eddf 5a45 	vldr	s11, [pc, #276]	; 80055d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80054be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80054ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80054d6:	e021      	b.n	800551c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	ee07 3a90 	vmov	s15, r3
 80054de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054e2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80055d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80054e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054ea:	4b37      	ldr	r3, [pc, #220]	; (80055c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054f2:	ee07 3a90 	vmov	s15, r3
 80054f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80054fe:	eddf 5a34 	vldr	s11, [pc, #208]	; 80055d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005502:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005506:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800550a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800550e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005512:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005516:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800551a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800551c:	4b2a      	ldr	r3, [pc, #168]	; (80055c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800551e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005520:	0a5b      	lsrs	r3, r3, #9
 8005522:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005526:	ee07 3a90 	vmov	s15, r3
 800552a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800552e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005532:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005536:	edd7 6a07 	vldr	s13, [r7, #28]
 800553a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800553e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005542:	ee17 2a90 	vmov	r2, s15
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800554a:	4b1f      	ldr	r3, [pc, #124]	; (80055c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800554c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800554e:	0c1b      	lsrs	r3, r3, #16
 8005550:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005554:	ee07 3a90 	vmov	s15, r3
 8005558:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800555c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005560:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005564:	edd7 6a07 	vldr	s13, [r7, #28]
 8005568:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800556c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005570:	ee17 2a90 	vmov	r2, s15
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005578:	4b13      	ldr	r3, [pc, #76]	; (80055c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800557a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800557c:	0e1b      	lsrs	r3, r3, #24
 800557e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005582:	ee07 3a90 	vmov	s15, r3
 8005586:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800558a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800558e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005592:	edd7 6a07 	vldr	s13, [r7, #28]
 8005596:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800559a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800559e:	ee17 2a90 	vmov	r2, s15
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80055a6:	e008      	b.n	80055ba <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2200      	movs	r2, #0
 80055ac:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2200      	movs	r2, #0
 80055b2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2200      	movs	r2, #0
 80055b8:	609a      	str	r2, [r3, #8]
}
 80055ba:	bf00      	nop
 80055bc:	3724      	adds	r7, #36	; 0x24
 80055be:	46bd      	mov	sp, r7
 80055c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c4:	4770      	bx	lr
 80055c6:	bf00      	nop
 80055c8:	58024400 	.word	0x58024400
 80055cc:	03d09000 	.word	0x03d09000
 80055d0:	46000000 	.word	0x46000000
 80055d4:	4c742400 	.word	0x4c742400
 80055d8:	4a742400 	.word	0x4a742400
 80055dc:	4af42400 	.word	0x4af42400

080055e0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b089      	sub	sp, #36	; 0x24
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80055e8:	4ba1      	ldr	r3, [pc, #644]	; (8005870 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80055ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ec:	f003 0303 	and.w	r3, r3, #3
 80055f0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80055f2:	4b9f      	ldr	r3, [pc, #636]	; (8005870 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80055f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055f6:	0d1b      	lsrs	r3, r3, #20
 80055f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80055fc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80055fe:	4b9c      	ldr	r3, [pc, #624]	; (8005870 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005602:	0a1b      	lsrs	r3, r3, #8
 8005604:	f003 0301 	and.w	r3, r3, #1
 8005608:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800560a:	4b99      	ldr	r3, [pc, #612]	; (8005870 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800560c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800560e:	08db      	lsrs	r3, r3, #3
 8005610:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005614:	693a      	ldr	r2, [r7, #16]
 8005616:	fb02 f303 	mul.w	r3, r2, r3
 800561a:	ee07 3a90 	vmov	s15, r3
 800561e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005622:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	2b00      	cmp	r3, #0
 800562a:	f000 8111 	beq.w	8005850 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800562e:	69bb      	ldr	r3, [r7, #24]
 8005630:	2b02      	cmp	r3, #2
 8005632:	f000 8083 	beq.w	800573c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005636:	69bb      	ldr	r3, [r7, #24]
 8005638:	2b02      	cmp	r3, #2
 800563a:	f200 80a1 	bhi.w	8005780 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800563e:	69bb      	ldr	r3, [r7, #24]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d003      	beq.n	800564c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005644:	69bb      	ldr	r3, [r7, #24]
 8005646:	2b01      	cmp	r3, #1
 8005648:	d056      	beq.n	80056f8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800564a:	e099      	b.n	8005780 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800564c:	4b88      	ldr	r3, [pc, #544]	; (8005870 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f003 0320 	and.w	r3, r3, #32
 8005654:	2b00      	cmp	r3, #0
 8005656:	d02d      	beq.n	80056b4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005658:	4b85      	ldr	r3, [pc, #532]	; (8005870 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	08db      	lsrs	r3, r3, #3
 800565e:	f003 0303 	and.w	r3, r3, #3
 8005662:	4a84      	ldr	r2, [pc, #528]	; (8005874 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005664:	fa22 f303 	lsr.w	r3, r2, r3
 8005668:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	ee07 3a90 	vmov	s15, r3
 8005670:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	ee07 3a90 	vmov	s15, r3
 800567a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800567e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005682:	4b7b      	ldr	r3, [pc, #492]	; (8005870 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005686:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800568a:	ee07 3a90 	vmov	s15, r3
 800568e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005692:	ed97 6a03 	vldr	s12, [r7, #12]
 8005696:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005878 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800569a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800569e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056ae:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80056b2:	e087      	b.n	80057c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	ee07 3a90 	vmov	s15, r3
 80056ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056be:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800587c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80056c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056c6:	4b6a      	ldr	r3, [pc, #424]	; (8005870 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80056c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056ce:	ee07 3a90 	vmov	s15, r3
 80056d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80056da:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005878 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80056de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80056f6:	e065      	b.n	80057c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	ee07 3a90 	vmov	s15, r3
 80056fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005702:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005880 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005706:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800570a:	4b59      	ldr	r3, [pc, #356]	; (8005870 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800570c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800570e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005712:	ee07 3a90 	vmov	s15, r3
 8005716:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800571a:	ed97 6a03 	vldr	s12, [r7, #12]
 800571e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005878 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005722:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005726:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800572a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800572e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005732:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005736:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800573a:	e043      	b.n	80057c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	ee07 3a90 	vmov	s15, r3
 8005742:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005746:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005884 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800574a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800574e:	4b48      	ldr	r3, [pc, #288]	; (8005870 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005752:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005756:	ee07 3a90 	vmov	s15, r3
 800575a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800575e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005762:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005878 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005766:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800576a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800576e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005772:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005776:	ee67 7a27 	vmul.f32	s15, s14, s15
 800577a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800577e:	e021      	b.n	80057c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	ee07 3a90 	vmov	s15, r3
 8005786:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800578a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005880 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800578e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005792:	4b37      	ldr	r3, [pc, #220]	; (8005870 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005796:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800579a:	ee07 3a90 	vmov	s15, r3
 800579e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80057a6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005878 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80057aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80057c2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80057c4:	4b2a      	ldr	r3, [pc, #168]	; (8005870 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80057c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c8:	0a5b      	lsrs	r3, r3, #9
 80057ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057ce:	ee07 3a90 	vmov	s15, r3
 80057d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80057da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80057de:	edd7 6a07 	vldr	s13, [r7, #28]
 80057e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057ea:	ee17 2a90 	vmov	r2, s15
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80057f2:	4b1f      	ldr	r3, [pc, #124]	; (8005870 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80057f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f6:	0c1b      	lsrs	r3, r3, #16
 80057f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057fc:	ee07 3a90 	vmov	s15, r3
 8005800:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005804:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005808:	ee37 7a87 	vadd.f32	s14, s15, s14
 800580c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005810:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005814:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005818:	ee17 2a90 	vmov	r2, s15
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005820:	4b13      	ldr	r3, [pc, #76]	; (8005870 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005824:	0e1b      	lsrs	r3, r3, #24
 8005826:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800582a:	ee07 3a90 	vmov	s15, r3
 800582e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005832:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005836:	ee37 7a87 	vadd.f32	s14, s15, s14
 800583a:	edd7 6a07 	vldr	s13, [r7, #28]
 800583e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005842:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005846:	ee17 2a90 	vmov	r2, s15
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800584e:	e008      	b.n	8005862 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2200      	movs	r2, #0
 8005854:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2200      	movs	r2, #0
 800585a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2200      	movs	r2, #0
 8005860:	609a      	str	r2, [r3, #8]
}
 8005862:	bf00      	nop
 8005864:	3724      	adds	r7, #36	; 0x24
 8005866:	46bd      	mov	sp, r7
 8005868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586c:	4770      	bx	lr
 800586e:	bf00      	nop
 8005870:	58024400 	.word	0x58024400
 8005874:	03d09000 	.word	0x03d09000
 8005878:	46000000 	.word	0x46000000
 800587c:	4c742400 	.word	0x4c742400
 8005880:	4a742400 	.word	0x4a742400
 8005884:	4af42400 	.word	0x4af42400

08005888 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b084      	sub	sp, #16
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
 8005890:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005892:	2300      	movs	r3, #0
 8005894:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005896:	4b53      	ldr	r3, [pc, #332]	; (80059e4 <RCCEx_PLL2_Config+0x15c>)
 8005898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800589a:	f003 0303 	and.w	r3, r3, #3
 800589e:	2b03      	cmp	r3, #3
 80058a0:	d101      	bne.n	80058a6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80058a2:	2301      	movs	r3, #1
 80058a4:	e099      	b.n	80059da <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80058a6:	4b4f      	ldr	r3, [pc, #316]	; (80059e4 <RCCEx_PLL2_Config+0x15c>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a4e      	ldr	r2, [pc, #312]	; (80059e4 <RCCEx_PLL2_Config+0x15c>)
 80058ac:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80058b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058b2:	f7fc f815 	bl	80018e0 <HAL_GetTick>
 80058b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80058b8:	e008      	b.n	80058cc <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80058ba:	f7fc f811 	bl	80018e0 <HAL_GetTick>
 80058be:	4602      	mov	r2, r0
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	1ad3      	subs	r3, r2, r3
 80058c4:	2b02      	cmp	r3, #2
 80058c6:	d901      	bls.n	80058cc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80058c8:	2303      	movs	r3, #3
 80058ca:	e086      	b.n	80059da <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80058cc:	4b45      	ldr	r3, [pc, #276]	; (80059e4 <RCCEx_PLL2_Config+0x15c>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d1f0      	bne.n	80058ba <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80058d8:	4b42      	ldr	r3, [pc, #264]	; (80059e4 <RCCEx_PLL2_Config+0x15c>)
 80058da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058dc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	031b      	lsls	r3, r3, #12
 80058e6:	493f      	ldr	r1, [pc, #252]	; (80059e4 <RCCEx_PLL2_Config+0x15c>)
 80058e8:	4313      	orrs	r3, r2
 80058ea:	628b      	str	r3, [r1, #40]	; 0x28
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	3b01      	subs	r3, #1
 80058f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	3b01      	subs	r3, #1
 80058fc:	025b      	lsls	r3, r3, #9
 80058fe:	b29b      	uxth	r3, r3
 8005900:	431a      	orrs	r2, r3
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	68db      	ldr	r3, [r3, #12]
 8005906:	3b01      	subs	r3, #1
 8005908:	041b      	lsls	r3, r3, #16
 800590a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800590e:	431a      	orrs	r2, r3
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	691b      	ldr	r3, [r3, #16]
 8005914:	3b01      	subs	r3, #1
 8005916:	061b      	lsls	r3, r3, #24
 8005918:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800591c:	4931      	ldr	r1, [pc, #196]	; (80059e4 <RCCEx_PLL2_Config+0x15c>)
 800591e:	4313      	orrs	r3, r2
 8005920:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005922:	4b30      	ldr	r3, [pc, #192]	; (80059e4 <RCCEx_PLL2_Config+0x15c>)
 8005924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005926:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	695b      	ldr	r3, [r3, #20]
 800592e:	492d      	ldr	r1, [pc, #180]	; (80059e4 <RCCEx_PLL2_Config+0x15c>)
 8005930:	4313      	orrs	r3, r2
 8005932:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005934:	4b2b      	ldr	r3, [pc, #172]	; (80059e4 <RCCEx_PLL2_Config+0x15c>)
 8005936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005938:	f023 0220 	bic.w	r2, r3, #32
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	699b      	ldr	r3, [r3, #24]
 8005940:	4928      	ldr	r1, [pc, #160]	; (80059e4 <RCCEx_PLL2_Config+0x15c>)
 8005942:	4313      	orrs	r3, r2
 8005944:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005946:	4b27      	ldr	r3, [pc, #156]	; (80059e4 <RCCEx_PLL2_Config+0x15c>)
 8005948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800594a:	4a26      	ldr	r2, [pc, #152]	; (80059e4 <RCCEx_PLL2_Config+0x15c>)
 800594c:	f023 0310 	bic.w	r3, r3, #16
 8005950:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005952:	4b24      	ldr	r3, [pc, #144]	; (80059e4 <RCCEx_PLL2_Config+0x15c>)
 8005954:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005956:	4b24      	ldr	r3, [pc, #144]	; (80059e8 <RCCEx_PLL2_Config+0x160>)
 8005958:	4013      	ands	r3, r2
 800595a:	687a      	ldr	r2, [r7, #4]
 800595c:	69d2      	ldr	r2, [r2, #28]
 800595e:	00d2      	lsls	r2, r2, #3
 8005960:	4920      	ldr	r1, [pc, #128]	; (80059e4 <RCCEx_PLL2_Config+0x15c>)
 8005962:	4313      	orrs	r3, r2
 8005964:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005966:	4b1f      	ldr	r3, [pc, #124]	; (80059e4 <RCCEx_PLL2_Config+0x15c>)
 8005968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800596a:	4a1e      	ldr	r2, [pc, #120]	; (80059e4 <RCCEx_PLL2_Config+0x15c>)
 800596c:	f043 0310 	orr.w	r3, r3, #16
 8005970:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d106      	bne.n	8005986 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005978:	4b1a      	ldr	r3, [pc, #104]	; (80059e4 <RCCEx_PLL2_Config+0x15c>)
 800597a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800597c:	4a19      	ldr	r2, [pc, #100]	; (80059e4 <RCCEx_PLL2_Config+0x15c>)
 800597e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005982:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005984:	e00f      	b.n	80059a6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	2b01      	cmp	r3, #1
 800598a:	d106      	bne.n	800599a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800598c:	4b15      	ldr	r3, [pc, #84]	; (80059e4 <RCCEx_PLL2_Config+0x15c>)
 800598e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005990:	4a14      	ldr	r2, [pc, #80]	; (80059e4 <RCCEx_PLL2_Config+0x15c>)
 8005992:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005996:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005998:	e005      	b.n	80059a6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800599a:	4b12      	ldr	r3, [pc, #72]	; (80059e4 <RCCEx_PLL2_Config+0x15c>)
 800599c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800599e:	4a11      	ldr	r2, [pc, #68]	; (80059e4 <RCCEx_PLL2_Config+0x15c>)
 80059a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80059a4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80059a6:	4b0f      	ldr	r3, [pc, #60]	; (80059e4 <RCCEx_PLL2_Config+0x15c>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a0e      	ldr	r2, [pc, #56]	; (80059e4 <RCCEx_PLL2_Config+0x15c>)
 80059ac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80059b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059b2:	f7fb ff95 	bl	80018e0 <HAL_GetTick>
 80059b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80059b8:	e008      	b.n	80059cc <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80059ba:	f7fb ff91 	bl	80018e0 <HAL_GetTick>
 80059be:	4602      	mov	r2, r0
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	1ad3      	subs	r3, r2, r3
 80059c4:	2b02      	cmp	r3, #2
 80059c6:	d901      	bls.n	80059cc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80059c8:	2303      	movs	r3, #3
 80059ca:	e006      	b.n	80059da <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80059cc:	4b05      	ldr	r3, [pc, #20]	; (80059e4 <RCCEx_PLL2_Config+0x15c>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d0f0      	beq.n	80059ba <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80059d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80059da:	4618      	mov	r0, r3
 80059dc:	3710      	adds	r7, #16
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}
 80059e2:	bf00      	nop
 80059e4:	58024400 	.word	0x58024400
 80059e8:	ffff0007 	.word	0xffff0007

080059ec <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b084      	sub	sp, #16
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
 80059f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80059f6:	2300      	movs	r3, #0
 80059f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80059fa:	4b53      	ldr	r3, [pc, #332]	; (8005b48 <RCCEx_PLL3_Config+0x15c>)
 80059fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059fe:	f003 0303 	and.w	r3, r3, #3
 8005a02:	2b03      	cmp	r3, #3
 8005a04:	d101      	bne.n	8005a0a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005a06:	2301      	movs	r3, #1
 8005a08:	e099      	b.n	8005b3e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005a0a:	4b4f      	ldr	r3, [pc, #316]	; (8005b48 <RCCEx_PLL3_Config+0x15c>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a4e      	ldr	r2, [pc, #312]	; (8005b48 <RCCEx_PLL3_Config+0x15c>)
 8005a10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a16:	f7fb ff63 	bl	80018e0 <HAL_GetTick>
 8005a1a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005a1c:	e008      	b.n	8005a30 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005a1e:	f7fb ff5f 	bl	80018e0 <HAL_GetTick>
 8005a22:	4602      	mov	r2, r0
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	1ad3      	subs	r3, r2, r3
 8005a28:	2b02      	cmp	r3, #2
 8005a2a:	d901      	bls.n	8005a30 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005a2c:	2303      	movs	r3, #3
 8005a2e:	e086      	b.n	8005b3e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005a30:	4b45      	ldr	r3, [pc, #276]	; (8005b48 <RCCEx_PLL3_Config+0x15c>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d1f0      	bne.n	8005a1e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005a3c:	4b42      	ldr	r3, [pc, #264]	; (8005b48 <RCCEx_PLL3_Config+0x15c>)
 8005a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a40:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	051b      	lsls	r3, r3, #20
 8005a4a:	493f      	ldr	r1, [pc, #252]	; (8005b48 <RCCEx_PLL3_Config+0x15c>)
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	628b      	str	r3, [r1, #40]	; 0x28
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	3b01      	subs	r3, #1
 8005a56:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	689b      	ldr	r3, [r3, #8]
 8005a5e:	3b01      	subs	r3, #1
 8005a60:	025b      	lsls	r3, r3, #9
 8005a62:	b29b      	uxth	r3, r3
 8005a64:	431a      	orrs	r2, r3
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	68db      	ldr	r3, [r3, #12]
 8005a6a:	3b01      	subs	r3, #1
 8005a6c:	041b      	lsls	r3, r3, #16
 8005a6e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005a72:	431a      	orrs	r2, r3
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	691b      	ldr	r3, [r3, #16]
 8005a78:	3b01      	subs	r3, #1
 8005a7a:	061b      	lsls	r3, r3, #24
 8005a7c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005a80:	4931      	ldr	r1, [pc, #196]	; (8005b48 <RCCEx_PLL3_Config+0x15c>)
 8005a82:	4313      	orrs	r3, r2
 8005a84:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005a86:	4b30      	ldr	r3, [pc, #192]	; (8005b48 <RCCEx_PLL3_Config+0x15c>)
 8005a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a8a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	695b      	ldr	r3, [r3, #20]
 8005a92:	492d      	ldr	r1, [pc, #180]	; (8005b48 <RCCEx_PLL3_Config+0x15c>)
 8005a94:	4313      	orrs	r3, r2
 8005a96:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005a98:	4b2b      	ldr	r3, [pc, #172]	; (8005b48 <RCCEx_PLL3_Config+0x15c>)
 8005a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a9c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	699b      	ldr	r3, [r3, #24]
 8005aa4:	4928      	ldr	r1, [pc, #160]	; (8005b48 <RCCEx_PLL3_Config+0x15c>)
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005aaa:	4b27      	ldr	r3, [pc, #156]	; (8005b48 <RCCEx_PLL3_Config+0x15c>)
 8005aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aae:	4a26      	ldr	r2, [pc, #152]	; (8005b48 <RCCEx_PLL3_Config+0x15c>)
 8005ab0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ab4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005ab6:	4b24      	ldr	r3, [pc, #144]	; (8005b48 <RCCEx_PLL3_Config+0x15c>)
 8005ab8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005aba:	4b24      	ldr	r3, [pc, #144]	; (8005b4c <RCCEx_PLL3_Config+0x160>)
 8005abc:	4013      	ands	r3, r2
 8005abe:	687a      	ldr	r2, [r7, #4]
 8005ac0:	69d2      	ldr	r2, [r2, #28]
 8005ac2:	00d2      	lsls	r2, r2, #3
 8005ac4:	4920      	ldr	r1, [pc, #128]	; (8005b48 <RCCEx_PLL3_Config+0x15c>)
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005aca:	4b1f      	ldr	r3, [pc, #124]	; (8005b48 <RCCEx_PLL3_Config+0x15c>)
 8005acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ace:	4a1e      	ldr	r2, [pc, #120]	; (8005b48 <RCCEx_PLL3_Config+0x15c>)
 8005ad0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ad4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d106      	bne.n	8005aea <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005adc:	4b1a      	ldr	r3, [pc, #104]	; (8005b48 <RCCEx_PLL3_Config+0x15c>)
 8005ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ae0:	4a19      	ldr	r2, [pc, #100]	; (8005b48 <RCCEx_PLL3_Config+0x15c>)
 8005ae2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005ae6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005ae8:	e00f      	b.n	8005b0a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d106      	bne.n	8005afe <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005af0:	4b15      	ldr	r3, [pc, #84]	; (8005b48 <RCCEx_PLL3_Config+0x15c>)
 8005af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005af4:	4a14      	ldr	r2, [pc, #80]	; (8005b48 <RCCEx_PLL3_Config+0x15c>)
 8005af6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005afa:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005afc:	e005      	b.n	8005b0a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005afe:	4b12      	ldr	r3, [pc, #72]	; (8005b48 <RCCEx_PLL3_Config+0x15c>)
 8005b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b02:	4a11      	ldr	r2, [pc, #68]	; (8005b48 <RCCEx_PLL3_Config+0x15c>)
 8005b04:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b08:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005b0a:	4b0f      	ldr	r3, [pc, #60]	; (8005b48 <RCCEx_PLL3_Config+0x15c>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4a0e      	ldr	r2, [pc, #56]	; (8005b48 <RCCEx_PLL3_Config+0x15c>)
 8005b10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b16:	f7fb fee3 	bl	80018e0 <HAL_GetTick>
 8005b1a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005b1c:	e008      	b.n	8005b30 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005b1e:	f7fb fedf 	bl	80018e0 <HAL_GetTick>
 8005b22:	4602      	mov	r2, r0
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	1ad3      	subs	r3, r2, r3
 8005b28:	2b02      	cmp	r3, #2
 8005b2a:	d901      	bls.n	8005b30 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005b2c:	2303      	movs	r3, #3
 8005b2e:	e006      	b.n	8005b3e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005b30:	4b05      	ldr	r3, [pc, #20]	; (8005b48 <RCCEx_PLL3_Config+0x15c>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d0f0      	beq.n	8005b1e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3710      	adds	r7, #16
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}
 8005b46:	bf00      	nop
 8005b48:	58024400 	.word	0x58024400
 8005b4c:	ffff0007 	.word	0xffff0007

08005b50 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b082      	sub	sp, #8
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d101      	bne.n	8005b62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	e042      	b.n	8005be8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d106      	bne.n	8005b7a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f7fb fd2d 	bl	80015d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2224      	movs	r2, #36	; 0x24
 8005b7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	681a      	ldr	r2, [r3, #0]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f022 0201 	bic.w	r2, r2, #1
 8005b90:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f000 fcd6 	bl	8006544 <UART_SetConfig>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	2b01      	cmp	r3, #1
 8005b9c:	d101      	bne.n	8005ba2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	e022      	b.n	8005be8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d002      	beq.n	8005bb0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f001 fa32 	bl	8007014 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	685a      	ldr	r2, [r3, #4]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005bbe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	689a      	ldr	r2, [r3, #8]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005bce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	681a      	ldr	r2, [r3, #0]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f042 0201 	orr.w	r2, r2, #1
 8005bde:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005be0:	6878      	ldr	r0, [r7, #4]
 8005be2:	f001 fab9 	bl	8007158 <UART_CheckIdleState>
 8005be6:	4603      	mov	r3, r0
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3708      	adds	r7, #8
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}

08005bf0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b08a      	sub	sp, #40	; 0x28
 8005bf4:	af02      	add	r7, sp, #8
 8005bf6:	60f8      	str	r0, [r7, #12]
 8005bf8:	60b9      	str	r1, [r7, #8]
 8005bfa:	603b      	str	r3, [r7, #0]
 8005bfc:	4613      	mov	r3, r2
 8005bfe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c06:	2b20      	cmp	r3, #32
 8005c08:	f040 8083 	bne.w	8005d12 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d002      	beq.n	8005c18 <HAL_UART_Transmit+0x28>
 8005c12:	88fb      	ldrh	r3, [r7, #6]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d101      	bne.n	8005c1c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005c18:	2301      	movs	r3, #1
 8005c1a:	e07b      	b.n	8005d14 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005c22:	2b01      	cmp	r3, #1
 8005c24:	d101      	bne.n	8005c2a <HAL_UART_Transmit+0x3a>
 8005c26:	2302      	movs	r3, #2
 8005c28:	e074      	b.n	8005d14 <HAL_UART_Transmit+0x124>
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2201      	movs	r2, #1
 8005c2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2200      	movs	r2, #0
 8005c36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2221      	movs	r2, #33	; 0x21
 8005c3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c42:	f7fb fe4d 	bl	80018e0 <HAL_GetTick>
 8005c46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	88fa      	ldrh	r2, [r7, #6]
 8005c4c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	88fa      	ldrh	r2, [r7, #6]
 8005c54:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	689b      	ldr	r3, [r3, #8]
 8005c5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c60:	d108      	bne.n	8005c74 <HAL_UART_Transmit+0x84>
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	691b      	ldr	r3, [r3, #16]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d104      	bne.n	8005c74 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	61bb      	str	r3, [r7, #24]
 8005c72:	e003      	b.n	8005c7c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c78:	2300      	movs	r3, #0
 8005c7a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8005c84:	e02c      	b.n	8005ce0 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	9300      	str	r3, [sp, #0]
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	2180      	movs	r1, #128	; 0x80
 8005c90:	68f8      	ldr	r0, [r7, #12]
 8005c92:	f001 faac 	bl	80071ee <UART_WaitOnFlagUntilTimeout>
 8005c96:	4603      	mov	r3, r0
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d001      	beq.n	8005ca0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8005c9c:	2303      	movs	r3, #3
 8005c9e:	e039      	b.n	8005d14 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8005ca0:	69fb      	ldr	r3, [r7, #28]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d10b      	bne.n	8005cbe <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005ca6:	69bb      	ldr	r3, [r7, #24]
 8005ca8:	881b      	ldrh	r3, [r3, #0]
 8005caa:	461a      	mov	r2, r3
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005cb4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005cb6:	69bb      	ldr	r3, [r7, #24]
 8005cb8:	3302      	adds	r3, #2
 8005cba:	61bb      	str	r3, [r7, #24]
 8005cbc:	e007      	b.n	8005cce <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005cbe:	69fb      	ldr	r3, [r7, #28]
 8005cc0:	781a      	ldrb	r2, [r3, #0]
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005cc8:	69fb      	ldr	r3, [r7, #28]
 8005cca:	3301      	adds	r3, #1
 8005ccc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005cd4:	b29b      	uxth	r3, r3
 8005cd6:	3b01      	subs	r3, #1
 8005cd8:	b29a      	uxth	r2, r3
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005ce6:	b29b      	uxth	r3, r3
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d1cc      	bne.n	8005c86 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	9300      	str	r3, [sp, #0]
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	2140      	movs	r1, #64	; 0x40
 8005cf6:	68f8      	ldr	r0, [r7, #12]
 8005cf8:	f001 fa79 	bl	80071ee <UART_WaitOnFlagUntilTimeout>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d001      	beq.n	8005d06 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8005d02:	2303      	movs	r3, #3
 8005d04:	e006      	b.n	8005d14 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2220      	movs	r2, #32
 8005d0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	e000      	b.n	8005d14 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8005d12:	2302      	movs	r3, #2
  }
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	3720      	adds	r7, #32
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}

08005d1c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b08a      	sub	sp, #40	; 0x28
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	60f8      	str	r0, [r7, #12]
 8005d24:	60b9      	str	r1, [r7, #8]
 8005d26:	4613      	mov	r3, r2
 8005d28:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d30:	2b20      	cmp	r3, #32
 8005d32:	d142      	bne.n	8005dba <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d002      	beq.n	8005d40 <HAL_UART_Receive_IT+0x24>
 8005d3a:	88fb      	ldrh	r3, [r7, #6]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d101      	bne.n	8005d44 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005d40:	2301      	movs	r3, #1
 8005d42:	e03b      	b.n	8005dbc <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005d4a:	2b01      	cmp	r3, #1
 8005d4c:	d101      	bne.n	8005d52 <HAL_UART_Receive_IT+0x36>
 8005d4e:	2302      	movs	r3, #2
 8005d50:	e034      	b.n	8005dbc <HAL_UART_Receive_IT+0xa0>
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2201      	movs	r2, #1
 8005d56:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a17      	ldr	r2, [pc, #92]	; (8005dc4 <HAL_UART_Receive_IT+0xa8>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d01f      	beq.n	8005daa <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d018      	beq.n	8005daa <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	e853 3f00 	ldrex	r3, [r3]
 8005d84:	613b      	str	r3, [r7, #16]
   return(result);
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005d8c:	627b      	str	r3, [r7, #36]	; 0x24
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	461a      	mov	r2, r3
 8005d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d96:	623b      	str	r3, [r7, #32]
 8005d98:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d9a:	69f9      	ldr	r1, [r7, #28]
 8005d9c:	6a3a      	ldr	r2, [r7, #32]
 8005d9e:	e841 2300 	strex	r3, r2, [r1]
 8005da2:	61bb      	str	r3, [r7, #24]
   return(result);
 8005da4:	69bb      	ldr	r3, [r7, #24]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d1e6      	bne.n	8005d78 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005daa:	88fb      	ldrh	r3, [r7, #6]
 8005dac:	461a      	mov	r2, r3
 8005dae:	68b9      	ldr	r1, [r7, #8]
 8005db0:	68f8      	ldr	r0, [r7, #12]
 8005db2:	f001 fae5 	bl	8007380 <UART_Start_Receive_IT>
 8005db6:	4603      	mov	r3, r0
 8005db8:	e000      	b.n	8005dbc <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005dba:	2302      	movs	r3, #2
  }
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3728      	adds	r7, #40	; 0x28
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}
 8005dc4:	58000c00 	.word	0x58000c00

08005dc8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b0ba      	sub	sp, #232	; 0xe8
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	69db      	ldr	r3, [r3, #28]
 8005dd6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	689b      	ldr	r3, [r3, #8]
 8005dea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005dee:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005df2:	f640 030f 	movw	r3, #2063	; 0x80f
 8005df6:	4013      	ands	r3, r2
 8005df8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005dfc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d11b      	bne.n	8005e3c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005e04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e08:	f003 0320 	and.w	r3, r3, #32
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d015      	beq.n	8005e3c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005e10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e14:	f003 0320 	and.w	r3, r3, #32
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d105      	bne.n	8005e28 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005e1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d009      	beq.n	8005e3c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	f000 835a 	beq.w	80064e6 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	4798      	blx	r3
      }
      return;
 8005e3a:	e354      	b.n	80064e6 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005e3c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	f000 811f 	beq.w	8006084 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005e46:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005e4a:	4b8b      	ldr	r3, [pc, #556]	; (8006078 <HAL_UART_IRQHandler+0x2b0>)
 8005e4c:	4013      	ands	r3, r2
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d106      	bne.n	8005e60 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005e52:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005e56:	4b89      	ldr	r3, [pc, #548]	; (800607c <HAL_UART_IRQHandler+0x2b4>)
 8005e58:	4013      	ands	r3, r2
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	f000 8112 	beq.w	8006084 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005e60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e64:	f003 0301 	and.w	r3, r3, #1
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d011      	beq.n	8005e90 <HAL_UART_IRQHandler+0xc8>
 8005e6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d00b      	beq.n	8005e90 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	2201      	movs	r2, #1
 8005e7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e86:	f043 0201 	orr.w	r2, r3, #1
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e94:	f003 0302 	and.w	r3, r3, #2
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d011      	beq.n	8005ec0 <HAL_UART_IRQHandler+0xf8>
 8005e9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ea0:	f003 0301 	and.w	r3, r3, #1
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d00b      	beq.n	8005ec0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	2202      	movs	r2, #2
 8005eae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005eb6:	f043 0204 	orr.w	r2, r3, #4
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ec0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ec4:	f003 0304 	and.w	r3, r3, #4
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d011      	beq.n	8005ef0 <HAL_UART_IRQHandler+0x128>
 8005ecc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ed0:	f003 0301 	and.w	r3, r3, #1
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d00b      	beq.n	8005ef0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	2204      	movs	r2, #4
 8005ede:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ee6:	f043 0202 	orr.w	r2, r3, #2
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005ef0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ef4:	f003 0308 	and.w	r3, r3, #8
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d017      	beq.n	8005f2c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005efc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f00:	f003 0320 	and.w	r3, r3, #32
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d105      	bne.n	8005f14 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005f08:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005f0c:	4b5a      	ldr	r3, [pc, #360]	; (8006078 <HAL_UART_IRQHandler+0x2b0>)
 8005f0e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d00b      	beq.n	8005f2c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	2208      	movs	r2, #8
 8005f1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f22:	f043 0208 	orr.w	r2, r3, #8
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005f2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d012      	beq.n	8005f5e <HAL_UART_IRQHandler+0x196>
 8005f38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f3c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d00c      	beq.n	8005f5e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f4c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f54:	f043 0220 	orr.w	r2, r3, #32
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	f000 82c0 	beq.w	80064ea <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005f6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f6e:	f003 0320 	and.w	r3, r3, #32
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d013      	beq.n	8005f9e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005f76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f7a:	f003 0320 	and.w	r3, r3, #32
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d105      	bne.n	8005f8e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005f82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d007      	beq.n	8005f9e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d003      	beq.n	8005f9e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005fa4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	689b      	ldr	r3, [r3, #8]
 8005fae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fb2:	2b40      	cmp	r3, #64	; 0x40
 8005fb4:	d005      	beq.n	8005fc2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005fb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005fba:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d04f      	beq.n	8006062 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f001 fb06 	bl	80075d4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	689b      	ldr	r3, [r3, #8]
 8005fce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fd2:	2b40      	cmp	r3, #64	; 0x40
 8005fd4:	d141      	bne.n	800605a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	3308      	adds	r3, #8
 8005fdc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fe0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005fe4:	e853 3f00 	ldrex	r3, [r3]
 8005fe8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005fec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005ff0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ff4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	3308      	adds	r3, #8
 8005ffe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006002:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006006:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800600a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800600e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006012:	e841 2300 	strex	r3, r2, [r1]
 8006016:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800601a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800601e:	2b00      	cmp	r3, #0
 8006020:	d1d9      	bne.n	8005fd6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006026:	2b00      	cmp	r3, #0
 8006028:	d013      	beq.n	8006052 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800602e:	4a14      	ldr	r2, [pc, #80]	; (8006080 <HAL_UART_IRQHandler+0x2b8>)
 8006030:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006036:	4618      	mov	r0, r3
 8006038:	f7fc f94c 	bl	80022d4 <HAL_DMA_Abort_IT>
 800603c:	4603      	mov	r3, r0
 800603e:	2b00      	cmp	r3, #0
 8006040:	d017      	beq.n	8006072 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006046:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006048:	687a      	ldr	r2, [r7, #4]
 800604a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800604c:	4610      	mov	r0, r2
 800604e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006050:	e00f      	b.n	8006072 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f000 fa60 	bl	8006518 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006058:	e00b      	b.n	8006072 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f000 fa5c 	bl	8006518 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006060:	e007      	b.n	8006072 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f000 fa58 	bl	8006518 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2200      	movs	r2, #0
 800606c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8006070:	e23b      	b.n	80064ea <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006072:	bf00      	nop
    return;
 8006074:	e239      	b.n	80064ea <HAL_UART_IRQHandler+0x722>
 8006076:	bf00      	nop
 8006078:	10000001 	.word	0x10000001
 800607c:	04000120 	.word	0x04000120
 8006080:	080076a1 	.word	0x080076a1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006088:	2b01      	cmp	r3, #1
 800608a:	f040 81ce 	bne.w	800642a <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800608e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006092:	f003 0310 	and.w	r3, r3, #16
 8006096:	2b00      	cmp	r3, #0
 8006098:	f000 81c7 	beq.w	800642a <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800609c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060a0:	f003 0310 	and.w	r3, r3, #16
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	f000 81c0 	beq.w	800642a <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	2210      	movs	r2, #16
 80060b0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	689b      	ldr	r3, [r3, #8]
 80060b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060bc:	2b40      	cmp	r3, #64	; 0x40
 80060be:	f040 813b 	bne.w	8006338 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a8b      	ldr	r2, [pc, #556]	; (80062f8 <HAL_UART_IRQHandler+0x530>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d059      	beq.n	8006182 <HAL_UART_IRQHandler+0x3ba>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a89      	ldr	r2, [pc, #548]	; (80062fc <HAL_UART_IRQHandler+0x534>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d053      	beq.n	8006182 <HAL_UART_IRQHandler+0x3ba>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a87      	ldr	r2, [pc, #540]	; (8006300 <HAL_UART_IRQHandler+0x538>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d04d      	beq.n	8006182 <HAL_UART_IRQHandler+0x3ba>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a85      	ldr	r2, [pc, #532]	; (8006304 <HAL_UART_IRQHandler+0x53c>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d047      	beq.n	8006182 <HAL_UART_IRQHandler+0x3ba>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a83      	ldr	r2, [pc, #524]	; (8006308 <HAL_UART_IRQHandler+0x540>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d041      	beq.n	8006182 <HAL_UART_IRQHandler+0x3ba>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a81      	ldr	r2, [pc, #516]	; (800630c <HAL_UART_IRQHandler+0x544>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d03b      	beq.n	8006182 <HAL_UART_IRQHandler+0x3ba>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a7f      	ldr	r2, [pc, #508]	; (8006310 <HAL_UART_IRQHandler+0x548>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d035      	beq.n	8006182 <HAL_UART_IRQHandler+0x3ba>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a7d      	ldr	r2, [pc, #500]	; (8006314 <HAL_UART_IRQHandler+0x54c>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d02f      	beq.n	8006182 <HAL_UART_IRQHandler+0x3ba>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a7b      	ldr	r2, [pc, #492]	; (8006318 <HAL_UART_IRQHandler+0x550>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d029      	beq.n	8006182 <HAL_UART_IRQHandler+0x3ba>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a79      	ldr	r2, [pc, #484]	; (800631c <HAL_UART_IRQHandler+0x554>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d023      	beq.n	8006182 <HAL_UART_IRQHandler+0x3ba>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a77      	ldr	r2, [pc, #476]	; (8006320 <HAL_UART_IRQHandler+0x558>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d01d      	beq.n	8006182 <HAL_UART_IRQHandler+0x3ba>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a75      	ldr	r2, [pc, #468]	; (8006324 <HAL_UART_IRQHandler+0x55c>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d017      	beq.n	8006182 <HAL_UART_IRQHandler+0x3ba>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a73      	ldr	r2, [pc, #460]	; (8006328 <HAL_UART_IRQHandler+0x560>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d011      	beq.n	8006182 <HAL_UART_IRQHandler+0x3ba>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a71      	ldr	r2, [pc, #452]	; (800632c <HAL_UART_IRQHandler+0x564>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d00b      	beq.n	8006182 <HAL_UART_IRQHandler+0x3ba>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a6f      	ldr	r2, [pc, #444]	; (8006330 <HAL_UART_IRQHandler+0x568>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d005      	beq.n	8006182 <HAL_UART_IRQHandler+0x3ba>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a6d      	ldr	r2, [pc, #436]	; (8006334 <HAL_UART_IRQHandler+0x56c>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d105      	bne.n	800618e <HAL_UART_IRQHandler+0x3c6>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	b29b      	uxth	r3, r3
 800618c:	e004      	b.n	8006198 <HAL_UART_IRQHandler+0x3d0>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	b29b      	uxth	r3, r3
 8006198:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800619c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	f000 81a4 	beq.w	80064ee <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80061ac:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80061b0:	429a      	cmp	r2, r3
 80061b2:	f080 819c 	bcs.w	80064ee <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80061bc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80061c4:	69db      	ldr	r3, [r3, #28]
 80061c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061ca:	f000 8086 	beq.w	80062da <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80061da:	e853 3f00 	ldrex	r3, [r3]
 80061de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80061e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80061e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80061ea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	461a      	mov	r2, r3
 80061f4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80061f8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80061fc:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006200:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006204:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006208:	e841 2300 	strex	r3, r2, [r1]
 800620c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006210:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006214:	2b00      	cmp	r3, #0
 8006216:	d1da      	bne.n	80061ce <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	3308      	adds	r3, #8
 800621e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006220:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006222:	e853 3f00 	ldrex	r3, [r3]
 8006226:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006228:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800622a:	f023 0301 	bic.w	r3, r3, #1
 800622e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	3308      	adds	r3, #8
 8006238:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800623c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006240:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006242:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006244:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006248:	e841 2300 	strex	r3, r2, [r1]
 800624c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800624e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006250:	2b00      	cmp	r3, #0
 8006252:	d1e1      	bne.n	8006218 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	3308      	adds	r3, #8
 800625a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800625c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800625e:	e853 3f00 	ldrex	r3, [r3]
 8006262:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006264:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006266:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800626a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	3308      	adds	r3, #8
 8006274:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006278:	66fa      	str	r2, [r7, #108]	; 0x6c
 800627a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800627c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800627e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006280:	e841 2300 	strex	r3, r2, [r1]
 8006284:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006286:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006288:	2b00      	cmp	r3, #0
 800628a:	d1e3      	bne.n	8006254 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2220      	movs	r2, #32
 8006290:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2200      	movs	r2, #0
 8006298:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062a2:	e853 3f00 	ldrex	r3, [r3]
 80062a6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80062a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062aa:	f023 0310 	bic.w	r3, r3, #16
 80062ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	461a      	mov	r2, r3
 80062b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80062bc:	65bb      	str	r3, [r7, #88]	; 0x58
 80062be:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062c0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80062c2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80062c4:	e841 2300 	strex	r3, r2, [r1]
 80062c8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80062ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d1e4      	bne.n	800629a <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80062d4:	4618      	mov	r0, r3
 80062d6:	f7fb fcdf 	bl	8001c98 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80062e6:	b29b      	uxth	r3, r3
 80062e8:	1ad3      	subs	r3, r2, r3
 80062ea:	b29b      	uxth	r3, r3
 80062ec:	4619      	mov	r1, r3
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f000 f91c 	bl	800652c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80062f4:	e0fb      	b.n	80064ee <HAL_UART_IRQHandler+0x726>
 80062f6:	bf00      	nop
 80062f8:	40020010 	.word	0x40020010
 80062fc:	40020028 	.word	0x40020028
 8006300:	40020040 	.word	0x40020040
 8006304:	40020058 	.word	0x40020058
 8006308:	40020070 	.word	0x40020070
 800630c:	40020088 	.word	0x40020088
 8006310:	400200a0 	.word	0x400200a0
 8006314:	400200b8 	.word	0x400200b8
 8006318:	40020410 	.word	0x40020410
 800631c:	40020428 	.word	0x40020428
 8006320:	40020440 	.word	0x40020440
 8006324:	40020458 	.word	0x40020458
 8006328:	40020470 	.word	0x40020470
 800632c:	40020488 	.word	0x40020488
 8006330:	400204a0 	.word	0x400204a0
 8006334:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006344:	b29b      	uxth	r3, r3
 8006346:	1ad3      	subs	r3, r2, r3
 8006348:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006352:	b29b      	uxth	r3, r3
 8006354:	2b00      	cmp	r3, #0
 8006356:	f000 80cc 	beq.w	80064f2 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800635a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800635e:	2b00      	cmp	r3, #0
 8006360:	f000 80c7 	beq.w	80064f2 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800636a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800636c:	e853 3f00 	ldrex	r3, [r3]
 8006370:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006374:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006378:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	461a      	mov	r2, r3
 8006382:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006386:	647b      	str	r3, [r7, #68]	; 0x44
 8006388:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800638a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800638c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800638e:	e841 2300 	strex	r3, r2, [r1]
 8006392:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006394:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006396:	2b00      	cmp	r3, #0
 8006398:	d1e4      	bne.n	8006364 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	3308      	adds	r3, #8
 80063a0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a4:	e853 3f00 	ldrex	r3, [r3]
 80063a8:	623b      	str	r3, [r7, #32]
   return(result);
 80063aa:	6a3a      	ldr	r2, [r7, #32]
 80063ac:	4b54      	ldr	r3, [pc, #336]	; (8006500 <HAL_UART_IRQHandler+0x738>)
 80063ae:	4013      	ands	r3, r2
 80063b0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	3308      	adds	r3, #8
 80063ba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80063be:	633a      	str	r2, [r7, #48]	; 0x30
 80063c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80063c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063c6:	e841 2300 	strex	r3, r2, [r1]
 80063ca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80063cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d1e3      	bne.n	800639a <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2220      	movs	r2, #32
 80063d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2200      	movs	r2, #0
 80063de:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2200      	movs	r2, #0
 80063e4:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	e853 3f00 	ldrex	r3, [r3]
 80063f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f023 0310 	bic.w	r3, r3, #16
 80063fa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	461a      	mov	r2, r3
 8006404:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006408:	61fb      	str	r3, [r7, #28]
 800640a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800640c:	69b9      	ldr	r1, [r7, #24]
 800640e:	69fa      	ldr	r2, [r7, #28]
 8006410:	e841 2300 	strex	r3, r2, [r1]
 8006414:	617b      	str	r3, [r7, #20]
   return(result);
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d1e4      	bne.n	80063e6 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800641c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006420:	4619      	mov	r1, r3
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f000 f882 	bl	800652c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006428:	e063      	b.n	80064f2 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800642a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800642e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006432:	2b00      	cmp	r3, #0
 8006434:	d00e      	beq.n	8006454 <HAL_UART_IRQHandler+0x68c>
 8006436:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800643a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800643e:	2b00      	cmp	r3, #0
 8006440:	d008      	beq.n	8006454 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800644a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f001 fdc5 	bl	8007fdc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006452:	e051      	b.n	80064f8 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006454:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006458:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800645c:	2b00      	cmp	r3, #0
 800645e:	d014      	beq.n	800648a <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006460:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006464:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006468:	2b00      	cmp	r3, #0
 800646a:	d105      	bne.n	8006478 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800646c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006470:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006474:	2b00      	cmp	r3, #0
 8006476:	d008      	beq.n	800648a <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800647c:	2b00      	cmp	r3, #0
 800647e:	d03a      	beq.n	80064f6 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	4798      	blx	r3
    }
    return;
 8006488:	e035      	b.n	80064f6 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800648a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800648e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006492:	2b00      	cmp	r3, #0
 8006494:	d009      	beq.n	80064aa <HAL_UART_IRQHandler+0x6e2>
 8006496:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800649a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d003      	beq.n	80064aa <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f001 f912 	bl	80076cc <UART_EndTransmit_IT>
    return;
 80064a8:	e026      	b.n	80064f8 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80064aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d009      	beq.n	80064ca <HAL_UART_IRQHandler+0x702>
 80064b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064ba:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d003      	beq.n	80064ca <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f001 fd9e 	bl	8008004 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80064c8:	e016      	b.n	80064f8 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80064ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d010      	beq.n	80064f8 <HAL_UART_IRQHandler+0x730>
 80064d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064da:	2b00      	cmp	r3, #0
 80064dc:	da0c      	bge.n	80064f8 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f001 fd86 	bl	8007ff0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80064e4:	e008      	b.n	80064f8 <HAL_UART_IRQHandler+0x730>
      return;
 80064e6:	bf00      	nop
 80064e8:	e006      	b.n	80064f8 <HAL_UART_IRQHandler+0x730>
    return;
 80064ea:	bf00      	nop
 80064ec:	e004      	b.n	80064f8 <HAL_UART_IRQHandler+0x730>
      return;
 80064ee:	bf00      	nop
 80064f0:	e002      	b.n	80064f8 <HAL_UART_IRQHandler+0x730>
      return;
 80064f2:	bf00      	nop
 80064f4:	e000      	b.n	80064f8 <HAL_UART_IRQHandler+0x730>
    return;
 80064f6:	bf00      	nop
  }
}
 80064f8:	37e8      	adds	r7, #232	; 0xe8
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}
 80064fe:	bf00      	nop
 8006500:	effffffe 	.word	0xeffffffe

08006504 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006504:	b480      	push	{r7}
 8006506:	b083      	sub	sp, #12
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800650c:	bf00      	nop
 800650e:	370c      	adds	r7, #12
 8006510:	46bd      	mov	sp, r7
 8006512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006516:	4770      	bx	lr

08006518 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006518:	b480      	push	{r7}
 800651a:	b083      	sub	sp, #12
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006520:	bf00      	nop
 8006522:	370c      	adds	r7, #12
 8006524:	46bd      	mov	sp, r7
 8006526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652a:	4770      	bx	lr

0800652c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800652c:	b480      	push	{r7}
 800652e:	b083      	sub	sp, #12
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
 8006534:	460b      	mov	r3, r1
 8006536:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006538:	bf00      	nop
 800653a:	370c      	adds	r7, #12
 800653c:	46bd      	mov	sp, r7
 800653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006542:	4770      	bx	lr

08006544 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006544:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006548:	b092      	sub	sp, #72	; 0x48
 800654a:	af00      	add	r7, sp, #0
 800654c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800654e:	2300      	movs	r3, #0
 8006550:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	689a      	ldr	r2, [r3, #8]
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	691b      	ldr	r3, [r3, #16]
 800655c:	431a      	orrs	r2, r3
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	695b      	ldr	r3, [r3, #20]
 8006562:	431a      	orrs	r2, r3
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	69db      	ldr	r3, [r3, #28]
 8006568:	4313      	orrs	r3, r2
 800656a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800656c:	697b      	ldr	r3, [r7, #20]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	681a      	ldr	r2, [r3, #0]
 8006572:	4bbe      	ldr	r3, [pc, #760]	; (800686c <UART_SetConfig+0x328>)
 8006574:	4013      	ands	r3, r2
 8006576:	697a      	ldr	r2, [r7, #20]
 8006578:	6812      	ldr	r2, [r2, #0]
 800657a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800657c:	430b      	orrs	r3, r1
 800657e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	68da      	ldr	r2, [r3, #12]
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	430a      	orrs	r2, r1
 8006594:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	699b      	ldr	r3, [r3, #24]
 800659a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4ab3      	ldr	r2, [pc, #716]	; (8006870 <UART_SetConfig+0x32c>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d004      	beq.n	80065b0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	6a1b      	ldr	r3, [r3, #32]
 80065aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80065ac:	4313      	orrs	r3, r2
 80065ae:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	689a      	ldr	r2, [r3, #8]
 80065b6:	4baf      	ldr	r3, [pc, #700]	; (8006874 <UART_SetConfig+0x330>)
 80065b8:	4013      	ands	r3, r2
 80065ba:	697a      	ldr	r2, [r7, #20]
 80065bc:	6812      	ldr	r2, [r2, #0]
 80065be:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80065c0:	430b      	orrs	r3, r1
 80065c2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ca:	f023 010f 	bic.w	r1, r3, #15
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	430a      	orrs	r2, r1
 80065d8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4aa6      	ldr	r2, [pc, #664]	; (8006878 <UART_SetConfig+0x334>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d177      	bne.n	80066d4 <UART_SetConfig+0x190>
 80065e4:	4ba5      	ldr	r3, [pc, #660]	; (800687c <UART_SetConfig+0x338>)
 80065e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80065ec:	2b28      	cmp	r3, #40	; 0x28
 80065ee:	d86d      	bhi.n	80066cc <UART_SetConfig+0x188>
 80065f0:	a201      	add	r2, pc, #4	; (adr r2, 80065f8 <UART_SetConfig+0xb4>)
 80065f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065f6:	bf00      	nop
 80065f8:	0800669d 	.word	0x0800669d
 80065fc:	080066cd 	.word	0x080066cd
 8006600:	080066cd 	.word	0x080066cd
 8006604:	080066cd 	.word	0x080066cd
 8006608:	080066cd 	.word	0x080066cd
 800660c:	080066cd 	.word	0x080066cd
 8006610:	080066cd 	.word	0x080066cd
 8006614:	080066cd 	.word	0x080066cd
 8006618:	080066a5 	.word	0x080066a5
 800661c:	080066cd 	.word	0x080066cd
 8006620:	080066cd 	.word	0x080066cd
 8006624:	080066cd 	.word	0x080066cd
 8006628:	080066cd 	.word	0x080066cd
 800662c:	080066cd 	.word	0x080066cd
 8006630:	080066cd 	.word	0x080066cd
 8006634:	080066cd 	.word	0x080066cd
 8006638:	080066ad 	.word	0x080066ad
 800663c:	080066cd 	.word	0x080066cd
 8006640:	080066cd 	.word	0x080066cd
 8006644:	080066cd 	.word	0x080066cd
 8006648:	080066cd 	.word	0x080066cd
 800664c:	080066cd 	.word	0x080066cd
 8006650:	080066cd 	.word	0x080066cd
 8006654:	080066cd 	.word	0x080066cd
 8006658:	080066b5 	.word	0x080066b5
 800665c:	080066cd 	.word	0x080066cd
 8006660:	080066cd 	.word	0x080066cd
 8006664:	080066cd 	.word	0x080066cd
 8006668:	080066cd 	.word	0x080066cd
 800666c:	080066cd 	.word	0x080066cd
 8006670:	080066cd 	.word	0x080066cd
 8006674:	080066cd 	.word	0x080066cd
 8006678:	080066bd 	.word	0x080066bd
 800667c:	080066cd 	.word	0x080066cd
 8006680:	080066cd 	.word	0x080066cd
 8006684:	080066cd 	.word	0x080066cd
 8006688:	080066cd 	.word	0x080066cd
 800668c:	080066cd 	.word	0x080066cd
 8006690:	080066cd 	.word	0x080066cd
 8006694:	080066cd 	.word	0x080066cd
 8006698:	080066c5 	.word	0x080066c5
 800669c:	2301      	movs	r3, #1
 800669e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066a2:	e222      	b.n	8006aea <UART_SetConfig+0x5a6>
 80066a4:	2304      	movs	r3, #4
 80066a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066aa:	e21e      	b.n	8006aea <UART_SetConfig+0x5a6>
 80066ac:	2308      	movs	r3, #8
 80066ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066b2:	e21a      	b.n	8006aea <UART_SetConfig+0x5a6>
 80066b4:	2310      	movs	r3, #16
 80066b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066ba:	e216      	b.n	8006aea <UART_SetConfig+0x5a6>
 80066bc:	2320      	movs	r3, #32
 80066be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066c2:	e212      	b.n	8006aea <UART_SetConfig+0x5a6>
 80066c4:	2340      	movs	r3, #64	; 0x40
 80066c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066ca:	e20e      	b.n	8006aea <UART_SetConfig+0x5a6>
 80066cc:	2380      	movs	r3, #128	; 0x80
 80066ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066d2:	e20a      	b.n	8006aea <UART_SetConfig+0x5a6>
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a69      	ldr	r2, [pc, #420]	; (8006880 <UART_SetConfig+0x33c>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d130      	bne.n	8006740 <UART_SetConfig+0x1fc>
 80066de:	4b67      	ldr	r3, [pc, #412]	; (800687c <UART_SetConfig+0x338>)
 80066e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066e2:	f003 0307 	and.w	r3, r3, #7
 80066e6:	2b05      	cmp	r3, #5
 80066e8:	d826      	bhi.n	8006738 <UART_SetConfig+0x1f4>
 80066ea:	a201      	add	r2, pc, #4	; (adr r2, 80066f0 <UART_SetConfig+0x1ac>)
 80066ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066f0:	08006709 	.word	0x08006709
 80066f4:	08006711 	.word	0x08006711
 80066f8:	08006719 	.word	0x08006719
 80066fc:	08006721 	.word	0x08006721
 8006700:	08006729 	.word	0x08006729
 8006704:	08006731 	.word	0x08006731
 8006708:	2300      	movs	r3, #0
 800670a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800670e:	e1ec      	b.n	8006aea <UART_SetConfig+0x5a6>
 8006710:	2304      	movs	r3, #4
 8006712:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006716:	e1e8      	b.n	8006aea <UART_SetConfig+0x5a6>
 8006718:	2308      	movs	r3, #8
 800671a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800671e:	e1e4      	b.n	8006aea <UART_SetConfig+0x5a6>
 8006720:	2310      	movs	r3, #16
 8006722:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006726:	e1e0      	b.n	8006aea <UART_SetConfig+0x5a6>
 8006728:	2320      	movs	r3, #32
 800672a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800672e:	e1dc      	b.n	8006aea <UART_SetConfig+0x5a6>
 8006730:	2340      	movs	r3, #64	; 0x40
 8006732:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006736:	e1d8      	b.n	8006aea <UART_SetConfig+0x5a6>
 8006738:	2380      	movs	r3, #128	; 0x80
 800673a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800673e:	e1d4      	b.n	8006aea <UART_SetConfig+0x5a6>
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4a4f      	ldr	r2, [pc, #316]	; (8006884 <UART_SetConfig+0x340>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d130      	bne.n	80067ac <UART_SetConfig+0x268>
 800674a:	4b4c      	ldr	r3, [pc, #304]	; (800687c <UART_SetConfig+0x338>)
 800674c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800674e:	f003 0307 	and.w	r3, r3, #7
 8006752:	2b05      	cmp	r3, #5
 8006754:	d826      	bhi.n	80067a4 <UART_SetConfig+0x260>
 8006756:	a201      	add	r2, pc, #4	; (adr r2, 800675c <UART_SetConfig+0x218>)
 8006758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800675c:	08006775 	.word	0x08006775
 8006760:	0800677d 	.word	0x0800677d
 8006764:	08006785 	.word	0x08006785
 8006768:	0800678d 	.word	0x0800678d
 800676c:	08006795 	.word	0x08006795
 8006770:	0800679d 	.word	0x0800679d
 8006774:	2300      	movs	r3, #0
 8006776:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800677a:	e1b6      	b.n	8006aea <UART_SetConfig+0x5a6>
 800677c:	2304      	movs	r3, #4
 800677e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006782:	e1b2      	b.n	8006aea <UART_SetConfig+0x5a6>
 8006784:	2308      	movs	r3, #8
 8006786:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800678a:	e1ae      	b.n	8006aea <UART_SetConfig+0x5a6>
 800678c:	2310      	movs	r3, #16
 800678e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006792:	e1aa      	b.n	8006aea <UART_SetConfig+0x5a6>
 8006794:	2320      	movs	r3, #32
 8006796:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800679a:	e1a6      	b.n	8006aea <UART_SetConfig+0x5a6>
 800679c:	2340      	movs	r3, #64	; 0x40
 800679e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067a2:	e1a2      	b.n	8006aea <UART_SetConfig+0x5a6>
 80067a4:	2380      	movs	r3, #128	; 0x80
 80067a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067aa:	e19e      	b.n	8006aea <UART_SetConfig+0x5a6>
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a35      	ldr	r2, [pc, #212]	; (8006888 <UART_SetConfig+0x344>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d130      	bne.n	8006818 <UART_SetConfig+0x2d4>
 80067b6:	4b31      	ldr	r3, [pc, #196]	; (800687c <UART_SetConfig+0x338>)
 80067b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067ba:	f003 0307 	and.w	r3, r3, #7
 80067be:	2b05      	cmp	r3, #5
 80067c0:	d826      	bhi.n	8006810 <UART_SetConfig+0x2cc>
 80067c2:	a201      	add	r2, pc, #4	; (adr r2, 80067c8 <UART_SetConfig+0x284>)
 80067c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067c8:	080067e1 	.word	0x080067e1
 80067cc:	080067e9 	.word	0x080067e9
 80067d0:	080067f1 	.word	0x080067f1
 80067d4:	080067f9 	.word	0x080067f9
 80067d8:	08006801 	.word	0x08006801
 80067dc:	08006809 	.word	0x08006809
 80067e0:	2300      	movs	r3, #0
 80067e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067e6:	e180      	b.n	8006aea <UART_SetConfig+0x5a6>
 80067e8:	2304      	movs	r3, #4
 80067ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067ee:	e17c      	b.n	8006aea <UART_SetConfig+0x5a6>
 80067f0:	2308      	movs	r3, #8
 80067f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067f6:	e178      	b.n	8006aea <UART_SetConfig+0x5a6>
 80067f8:	2310      	movs	r3, #16
 80067fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067fe:	e174      	b.n	8006aea <UART_SetConfig+0x5a6>
 8006800:	2320      	movs	r3, #32
 8006802:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006806:	e170      	b.n	8006aea <UART_SetConfig+0x5a6>
 8006808:	2340      	movs	r3, #64	; 0x40
 800680a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800680e:	e16c      	b.n	8006aea <UART_SetConfig+0x5a6>
 8006810:	2380      	movs	r3, #128	; 0x80
 8006812:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006816:	e168      	b.n	8006aea <UART_SetConfig+0x5a6>
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a1b      	ldr	r2, [pc, #108]	; (800688c <UART_SetConfig+0x348>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d142      	bne.n	80068a8 <UART_SetConfig+0x364>
 8006822:	4b16      	ldr	r3, [pc, #88]	; (800687c <UART_SetConfig+0x338>)
 8006824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006826:	f003 0307 	and.w	r3, r3, #7
 800682a:	2b05      	cmp	r3, #5
 800682c:	d838      	bhi.n	80068a0 <UART_SetConfig+0x35c>
 800682e:	a201      	add	r2, pc, #4	; (adr r2, 8006834 <UART_SetConfig+0x2f0>)
 8006830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006834:	0800684d 	.word	0x0800684d
 8006838:	08006855 	.word	0x08006855
 800683c:	0800685d 	.word	0x0800685d
 8006840:	08006865 	.word	0x08006865
 8006844:	08006891 	.word	0x08006891
 8006848:	08006899 	.word	0x08006899
 800684c:	2300      	movs	r3, #0
 800684e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006852:	e14a      	b.n	8006aea <UART_SetConfig+0x5a6>
 8006854:	2304      	movs	r3, #4
 8006856:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800685a:	e146      	b.n	8006aea <UART_SetConfig+0x5a6>
 800685c:	2308      	movs	r3, #8
 800685e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006862:	e142      	b.n	8006aea <UART_SetConfig+0x5a6>
 8006864:	2310      	movs	r3, #16
 8006866:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800686a:	e13e      	b.n	8006aea <UART_SetConfig+0x5a6>
 800686c:	cfff69f3 	.word	0xcfff69f3
 8006870:	58000c00 	.word	0x58000c00
 8006874:	11fff4ff 	.word	0x11fff4ff
 8006878:	40011000 	.word	0x40011000
 800687c:	58024400 	.word	0x58024400
 8006880:	40004400 	.word	0x40004400
 8006884:	40004800 	.word	0x40004800
 8006888:	40004c00 	.word	0x40004c00
 800688c:	40005000 	.word	0x40005000
 8006890:	2320      	movs	r3, #32
 8006892:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006896:	e128      	b.n	8006aea <UART_SetConfig+0x5a6>
 8006898:	2340      	movs	r3, #64	; 0x40
 800689a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800689e:	e124      	b.n	8006aea <UART_SetConfig+0x5a6>
 80068a0:	2380      	movs	r3, #128	; 0x80
 80068a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068a6:	e120      	b.n	8006aea <UART_SetConfig+0x5a6>
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4acb      	ldr	r2, [pc, #812]	; (8006bdc <UART_SetConfig+0x698>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d176      	bne.n	80069a0 <UART_SetConfig+0x45c>
 80068b2:	4bcb      	ldr	r3, [pc, #812]	; (8006be0 <UART_SetConfig+0x69c>)
 80068b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80068ba:	2b28      	cmp	r3, #40	; 0x28
 80068bc:	d86c      	bhi.n	8006998 <UART_SetConfig+0x454>
 80068be:	a201      	add	r2, pc, #4	; (adr r2, 80068c4 <UART_SetConfig+0x380>)
 80068c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068c4:	08006969 	.word	0x08006969
 80068c8:	08006999 	.word	0x08006999
 80068cc:	08006999 	.word	0x08006999
 80068d0:	08006999 	.word	0x08006999
 80068d4:	08006999 	.word	0x08006999
 80068d8:	08006999 	.word	0x08006999
 80068dc:	08006999 	.word	0x08006999
 80068e0:	08006999 	.word	0x08006999
 80068e4:	08006971 	.word	0x08006971
 80068e8:	08006999 	.word	0x08006999
 80068ec:	08006999 	.word	0x08006999
 80068f0:	08006999 	.word	0x08006999
 80068f4:	08006999 	.word	0x08006999
 80068f8:	08006999 	.word	0x08006999
 80068fc:	08006999 	.word	0x08006999
 8006900:	08006999 	.word	0x08006999
 8006904:	08006979 	.word	0x08006979
 8006908:	08006999 	.word	0x08006999
 800690c:	08006999 	.word	0x08006999
 8006910:	08006999 	.word	0x08006999
 8006914:	08006999 	.word	0x08006999
 8006918:	08006999 	.word	0x08006999
 800691c:	08006999 	.word	0x08006999
 8006920:	08006999 	.word	0x08006999
 8006924:	08006981 	.word	0x08006981
 8006928:	08006999 	.word	0x08006999
 800692c:	08006999 	.word	0x08006999
 8006930:	08006999 	.word	0x08006999
 8006934:	08006999 	.word	0x08006999
 8006938:	08006999 	.word	0x08006999
 800693c:	08006999 	.word	0x08006999
 8006940:	08006999 	.word	0x08006999
 8006944:	08006989 	.word	0x08006989
 8006948:	08006999 	.word	0x08006999
 800694c:	08006999 	.word	0x08006999
 8006950:	08006999 	.word	0x08006999
 8006954:	08006999 	.word	0x08006999
 8006958:	08006999 	.word	0x08006999
 800695c:	08006999 	.word	0x08006999
 8006960:	08006999 	.word	0x08006999
 8006964:	08006991 	.word	0x08006991
 8006968:	2301      	movs	r3, #1
 800696a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800696e:	e0bc      	b.n	8006aea <UART_SetConfig+0x5a6>
 8006970:	2304      	movs	r3, #4
 8006972:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006976:	e0b8      	b.n	8006aea <UART_SetConfig+0x5a6>
 8006978:	2308      	movs	r3, #8
 800697a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800697e:	e0b4      	b.n	8006aea <UART_SetConfig+0x5a6>
 8006980:	2310      	movs	r3, #16
 8006982:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006986:	e0b0      	b.n	8006aea <UART_SetConfig+0x5a6>
 8006988:	2320      	movs	r3, #32
 800698a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800698e:	e0ac      	b.n	8006aea <UART_SetConfig+0x5a6>
 8006990:	2340      	movs	r3, #64	; 0x40
 8006992:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006996:	e0a8      	b.n	8006aea <UART_SetConfig+0x5a6>
 8006998:	2380      	movs	r3, #128	; 0x80
 800699a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800699e:	e0a4      	b.n	8006aea <UART_SetConfig+0x5a6>
 80069a0:	697b      	ldr	r3, [r7, #20]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a8f      	ldr	r2, [pc, #572]	; (8006be4 <UART_SetConfig+0x6a0>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d130      	bne.n	8006a0c <UART_SetConfig+0x4c8>
 80069aa:	4b8d      	ldr	r3, [pc, #564]	; (8006be0 <UART_SetConfig+0x69c>)
 80069ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069ae:	f003 0307 	and.w	r3, r3, #7
 80069b2:	2b05      	cmp	r3, #5
 80069b4:	d826      	bhi.n	8006a04 <UART_SetConfig+0x4c0>
 80069b6:	a201      	add	r2, pc, #4	; (adr r2, 80069bc <UART_SetConfig+0x478>)
 80069b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069bc:	080069d5 	.word	0x080069d5
 80069c0:	080069dd 	.word	0x080069dd
 80069c4:	080069e5 	.word	0x080069e5
 80069c8:	080069ed 	.word	0x080069ed
 80069cc:	080069f5 	.word	0x080069f5
 80069d0:	080069fd 	.word	0x080069fd
 80069d4:	2300      	movs	r3, #0
 80069d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069da:	e086      	b.n	8006aea <UART_SetConfig+0x5a6>
 80069dc:	2304      	movs	r3, #4
 80069de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069e2:	e082      	b.n	8006aea <UART_SetConfig+0x5a6>
 80069e4:	2308      	movs	r3, #8
 80069e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069ea:	e07e      	b.n	8006aea <UART_SetConfig+0x5a6>
 80069ec:	2310      	movs	r3, #16
 80069ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069f2:	e07a      	b.n	8006aea <UART_SetConfig+0x5a6>
 80069f4:	2320      	movs	r3, #32
 80069f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069fa:	e076      	b.n	8006aea <UART_SetConfig+0x5a6>
 80069fc:	2340      	movs	r3, #64	; 0x40
 80069fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a02:	e072      	b.n	8006aea <UART_SetConfig+0x5a6>
 8006a04:	2380      	movs	r3, #128	; 0x80
 8006a06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a0a:	e06e      	b.n	8006aea <UART_SetConfig+0x5a6>
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a75      	ldr	r2, [pc, #468]	; (8006be8 <UART_SetConfig+0x6a4>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d130      	bne.n	8006a78 <UART_SetConfig+0x534>
 8006a16:	4b72      	ldr	r3, [pc, #456]	; (8006be0 <UART_SetConfig+0x69c>)
 8006a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a1a:	f003 0307 	and.w	r3, r3, #7
 8006a1e:	2b05      	cmp	r3, #5
 8006a20:	d826      	bhi.n	8006a70 <UART_SetConfig+0x52c>
 8006a22:	a201      	add	r2, pc, #4	; (adr r2, 8006a28 <UART_SetConfig+0x4e4>)
 8006a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a28:	08006a41 	.word	0x08006a41
 8006a2c:	08006a49 	.word	0x08006a49
 8006a30:	08006a51 	.word	0x08006a51
 8006a34:	08006a59 	.word	0x08006a59
 8006a38:	08006a61 	.word	0x08006a61
 8006a3c:	08006a69 	.word	0x08006a69
 8006a40:	2300      	movs	r3, #0
 8006a42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a46:	e050      	b.n	8006aea <UART_SetConfig+0x5a6>
 8006a48:	2304      	movs	r3, #4
 8006a4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a4e:	e04c      	b.n	8006aea <UART_SetConfig+0x5a6>
 8006a50:	2308      	movs	r3, #8
 8006a52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a56:	e048      	b.n	8006aea <UART_SetConfig+0x5a6>
 8006a58:	2310      	movs	r3, #16
 8006a5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a5e:	e044      	b.n	8006aea <UART_SetConfig+0x5a6>
 8006a60:	2320      	movs	r3, #32
 8006a62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a66:	e040      	b.n	8006aea <UART_SetConfig+0x5a6>
 8006a68:	2340      	movs	r3, #64	; 0x40
 8006a6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a6e:	e03c      	b.n	8006aea <UART_SetConfig+0x5a6>
 8006a70:	2380      	movs	r3, #128	; 0x80
 8006a72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a76:	e038      	b.n	8006aea <UART_SetConfig+0x5a6>
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a5b      	ldr	r2, [pc, #364]	; (8006bec <UART_SetConfig+0x6a8>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d130      	bne.n	8006ae4 <UART_SetConfig+0x5a0>
 8006a82:	4b57      	ldr	r3, [pc, #348]	; (8006be0 <UART_SetConfig+0x69c>)
 8006a84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a86:	f003 0307 	and.w	r3, r3, #7
 8006a8a:	2b05      	cmp	r3, #5
 8006a8c:	d826      	bhi.n	8006adc <UART_SetConfig+0x598>
 8006a8e:	a201      	add	r2, pc, #4	; (adr r2, 8006a94 <UART_SetConfig+0x550>)
 8006a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a94:	08006aad 	.word	0x08006aad
 8006a98:	08006ab5 	.word	0x08006ab5
 8006a9c:	08006abd 	.word	0x08006abd
 8006aa0:	08006ac5 	.word	0x08006ac5
 8006aa4:	08006acd 	.word	0x08006acd
 8006aa8:	08006ad5 	.word	0x08006ad5
 8006aac:	2302      	movs	r3, #2
 8006aae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ab2:	e01a      	b.n	8006aea <UART_SetConfig+0x5a6>
 8006ab4:	2304      	movs	r3, #4
 8006ab6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006aba:	e016      	b.n	8006aea <UART_SetConfig+0x5a6>
 8006abc:	2308      	movs	r3, #8
 8006abe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ac2:	e012      	b.n	8006aea <UART_SetConfig+0x5a6>
 8006ac4:	2310      	movs	r3, #16
 8006ac6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006aca:	e00e      	b.n	8006aea <UART_SetConfig+0x5a6>
 8006acc:	2320      	movs	r3, #32
 8006ace:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ad2:	e00a      	b.n	8006aea <UART_SetConfig+0x5a6>
 8006ad4:	2340      	movs	r3, #64	; 0x40
 8006ad6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ada:	e006      	b.n	8006aea <UART_SetConfig+0x5a6>
 8006adc:	2380      	movs	r3, #128	; 0x80
 8006ade:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ae2:	e002      	b.n	8006aea <UART_SetConfig+0x5a6>
 8006ae4:	2380      	movs	r3, #128	; 0x80
 8006ae6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4a3f      	ldr	r2, [pc, #252]	; (8006bec <UART_SetConfig+0x6a8>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	f040 80f8 	bne.w	8006ce6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006af6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006afa:	2b20      	cmp	r3, #32
 8006afc:	dc46      	bgt.n	8006b8c <UART_SetConfig+0x648>
 8006afe:	2b02      	cmp	r3, #2
 8006b00:	f2c0 8082 	blt.w	8006c08 <UART_SetConfig+0x6c4>
 8006b04:	3b02      	subs	r3, #2
 8006b06:	2b1e      	cmp	r3, #30
 8006b08:	d87e      	bhi.n	8006c08 <UART_SetConfig+0x6c4>
 8006b0a:	a201      	add	r2, pc, #4	; (adr r2, 8006b10 <UART_SetConfig+0x5cc>)
 8006b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b10:	08006b93 	.word	0x08006b93
 8006b14:	08006c09 	.word	0x08006c09
 8006b18:	08006b9b 	.word	0x08006b9b
 8006b1c:	08006c09 	.word	0x08006c09
 8006b20:	08006c09 	.word	0x08006c09
 8006b24:	08006c09 	.word	0x08006c09
 8006b28:	08006bab 	.word	0x08006bab
 8006b2c:	08006c09 	.word	0x08006c09
 8006b30:	08006c09 	.word	0x08006c09
 8006b34:	08006c09 	.word	0x08006c09
 8006b38:	08006c09 	.word	0x08006c09
 8006b3c:	08006c09 	.word	0x08006c09
 8006b40:	08006c09 	.word	0x08006c09
 8006b44:	08006c09 	.word	0x08006c09
 8006b48:	08006bbb 	.word	0x08006bbb
 8006b4c:	08006c09 	.word	0x08006c09
 8006b50:	08006c09 	.word	0x08006c09
 8006b54:	08006c09 	.word	0x08006c09
 8006b58:	08006c09 	.word	0x08006c09
 8006b5c:	08006c09 	.word	0x08006c09
 8006b60:	08006c09 	.word	0x08006c09
 8006b64:	08006c09 	.word	0x08006c09
 8006b68:	08006c09 	.word	0x08006c09
 8006b6c:	08006c09 	.word	0x08006c09
 8006b70:	08006c09 	.word	0x08006c09
 8006b74:	08006c09 	.word	0x08006c09
 8006b78:	08006c09 	.word	0x08006c09
 8006b7c:	08006c09 	.word	0x08006c09
 8006b80:	08006c09 	.word	0x08006c09
 8006b84:	08006c09 	.word	0x08006c09
 8006b88:	08006bfb 	.word	0x08006bfb
 8006b8c:	2b40      	cmp	r3, #64	; 0x40
 8006b8e:	d037      	beq.n	8006c00 <UART_SetConfig+0x6bc>
 8006b90:	e03a      	b.n	8006c08 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006b92:	f7fe fbbb 	bl	800530c <HAL_RCCEx_GetD3PCLK1Freq>
 8006b96:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006b98:	e03c      	b.n	8006c14 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	f7fe fbca 	bl	8005338 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ba8:	e034      	b.n	8006c14 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006baa:	f107 0318 	add.w	r3, r7, #24
 8006bae:	4618      	mov	r0, r3
 8006bb0:	f7fe fd16 	bl	80055e0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006bb4:	69fb      	ldr	r3, [r7, #28]
 8006bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006bb8:	e02c      	b.n	8006c14 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006bba:	4b09      	ldr	r3, [pc, #36]	; (8006be0 <UART_SetConfig+0x69c>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f003 0320 	and.w	r3, r3, #32
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d016      	beq.n	8006bf4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006bc6:	4b06      	ldr	r3, [pc, #24]	; (8006be0 <UART_SetConfig+0x69c>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	08db      	lsrs	r3, r3, #3
 8006bcc:	f003 0303 	and.w	r3, r3, #3
 8006bd0:	4a07      	ldr	r2, [pc, #28]	; (8006bf0 <UART_SetConfig+0x6ac>)
 8006bd2:	fa22 f303 	lsr.w	r3, r2, r3
 8006bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006bd8:	e01c      	b.n	8006c14 <UART_SetConfig+0x6d0>
 8006bda:	bf00      	nop
 8006bdc:	40011400 	.word	0x40011400
 8006be0:	58024400 	.word	0x58024400
 8006be4:	40007800 	.word	0x40007800
 8006be8:	40007c00 	.word	0x40007c00
 8006bec:	58000c00 	.word	0x58000c00
 8006bf0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8006bf4:	4b9d      	ldr	r3, [pc, #628]	; (8006e6c <UART_SetConfig+0x928>)
 8006bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006bf8:	e00c      	b.n	8006c14 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006bfa:	4b9d      	ldr	r3, [pc, #628]	; (8006e70 <UART_SetConfig+0x92c>)
 8006bfc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006bfe:	e009      	b.n	8006c14 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c00:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c04:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c06:	e005      	b.n	8006c14 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8006c08:	2300      	movs	r3, #0
 8006c0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006c12:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006c14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	f000 81de 	beq.w	8006fd8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c20:	4a94      	ldr	r2, [pc, #592]	; (8006e74 <UART_SetConfig+0x930>)
 8006c22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c26:	461a      	mov	r2, r3
 8006c28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c2a:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c2e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006c30:	697b      	ldr	r3, [r7, #20]
 8006c32:	685a      	ldr	r2, [r3, #4]
 8006c34:	4613      	mov	r3, r2
 8006c36:	005b      	lsls	r3, r3, #1
 8006c38:	4413      	add	r3, r2
 8006c3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c3c:	429a      	cmp	r2, r3
 8006c3e:	d305      	bcc.n	8006c4c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006c40:	697b      	ldr	r3, [r7, #20]
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006c46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c48:	429a      	cmp	r2, r3
 8006c4a:	d903      	bls.n	8006c54 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006c52:	e1c1      	b.n	8006fd8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c56:	2200      	movs	r2, #0
 8006c58:	60bb      	str	r3, [r7, #8]
 8006c5a:	60fa      	str	r2, [r7, #12]
 8006c5c:	697b      	ldr	r3, [r7, #20]
 8006c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c60:	4a84      	ldr	r2, [pc, #528]	; (8006e74 <UART_SetConfig+0x930>)
 8006c62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c66:	b29b      	uxth	r3, r3
 8006c68:	2200      	movs	r2, #0
 8006c6a:	603b      	str	r3, [r7, #0]
 8006c6c:	607a      	str	r2, [r7, #4]
 8006c6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c72:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006c76:	f7f9 fb8b 	bl	8000390 <__aeabi_uldivmod>
 8006c7a:	4602      	mov	r2, r0
 8006c7c:	460b      	mov	r3, r1
 8006c7e:	4610      	mov	r0, r2
 8006c80:	4619      	mov	r1, r3
 8006c82:	f04f 0200 	mov.w	r2, #0
 8006c86:	f04f 0300 	mov.w	r3, #0
 8006c8a:	020b      	lsls	r3, r1, #8
 8006c8c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006c90:	0202      	lsls	r2, r0, #8
 8006c92:	6979      	ldr	r1, [r7, #20]
 8006c94:	6849      	ldr	r1, [r1, #4]
 8006c96:	0849      	lsrs	r1, r1, #1
 8006c98:	2000      	movs	r0, #0
 8006c9a:	460c      	mov	r4, r1
 8006c9c:	4605      	mov	r5, r0
 8006c9e:	eb12 0804 	adds.w	r8, r2, r4
 8006ca2:	eb43 0905 	adc.w	r9, r3, r5
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	685b      	ldr	r3, [r3, #4]
 8006caa:	2200      	movs	r2, #0
 8006cac:	469a      	mov	sl, r3
 8006cae:	4693      	mov	fp, r2
 8006cb0:	4652      	mov	r2, sl
 8006cb2:	465b      	mov	r3, fp
 8006cb4:	4640      	mov	r0, r8
 8006cb6:	4649      	mov	r1, r9
 8006cb8:	f7f9 fb6a 	bl	8000390 <__aeabi_uldivmod>
 8006cbc:	4602      	mov	r2, r0
 8006cbe:	460b      	mov	r3, r1
 8006cc0:	4613      	mov	r3, r2
 8006cc2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cc6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006cca:	d308      	bcc.n	8006cde <UART_SetConfig+0x79a>
 8006ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006cd2:	d204      	bcs.n	8006cde <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006cda:	60da      	str	r2, [r3, #12]
 8006cdc:	e17c      	b.n	8006fd8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8006cde:	2301      	movs	r3, #1
 8006ce0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006ce4:	e178      	b.n	8006fd8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ce6:	697b      	ldr	r3, [r7, #20]
 8006ce8:	69db      	ldr	r3, [r3, #28]
 8006cea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006cee:	f040 80c5 	bne.w	8006e7c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8006cf2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006cf6:	2b20      	cmp	r3, #32
 8006cf8:	dc48      	bgt.n	8006d8c <UART_SetConfig+0x848>
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	db7b      	blt.n	8006df6 <UART_SetConfig+0x8b2>
 8006cfe:	2b20      	cmp	r3, #32
 8006d00:	d879      	bhi.n	8006df6 <UART_SetConfig+0x8b2>
 8006d02:	a201      	add	r2, pc, #4	; (adr r2, 8006d08 <UART_SetConfig+0x7c4>)
 8006d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d08:	08006d93 	.word	0x08006d93
 8006d0c:	08006d9b 	.word	0x08006d9b
 8006d10:	08006df7 	.word	0x08006df7
 8006d14:	08006df7 	.word	0x08006df7
 8006d18:	08006da3 	.word	0x08006da3
 8006d1c:	08006df7 	.word	0x08006df7
 8006d20:	08006df7 	.word	0x08006df7
 8006d24:	08006df7 	.word	0x08006df7
 8006d28:	08006db3 	.word	0x08006db3
 8006d2c:	08006df7 	.word	0x08006df7
 8006d30:	08006df7 	.word	0x08006df7
 8006d34:	08006df7 	.word	0x08006df7
 8006d38:	08006df7 	.word	0x08006df7
 8006d3c:	08006df7 	.word	0x08006df7
 8006d40:	08006df7 	.word	0x08006df7
 8006d44:	08006df7 	.word	0x08006df7
 8006d48:	08006dc3 	.word	0x08006dc3
 8006d4c:	08006df7 	.word	0x08006df7
 8006d50:	08006df7 	.word	0x08006df7
 8006d54:	08006df7 	.word	0x08006df7
 8006d58:	08006df7 	.word	0x08006df7
 8006d5c:	08006df7 	.word	0x08006df7
 8006d60:	08006df7 	.word	0x08006df7
 8006d64:	08006df7 	.word	0x08006df7
 8006d68:	08006df7 	.word	0x08006df7
 8006d6c:	08006df7 	.word	0x08006df7
 8006d70:	08006df7 	.word	0x08006df7
 8006d74:	08006df7 	.word	0x08006df7
 8006d78:	08006df7 	.word	0x08006df7
 8006d7c:	08006df7 	.word	0x08006df7
 8006d80:	08006df7 	.word	0x08006df7
 8006d84:	08006df7 	.word	0x08006df7
 8006d88:	08006de9 	.word	0x08006de9
 8006d8c:	2b40      	cmp	r3, #64	; 0x40
 8006d8e:	d02e      	beq.n	8006dee <UART_SetConfig+0x8aa>
 8006d90:	e031      	b.n	8006df6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d92:	f7fd fb49 	bl	8004428 <HAL_RCC_GetPCLK1Freq>
 8006d96:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006d98:	e033      	b.n	8006e02 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d9a:	f7fd fb5b 	bl	8004454 <HAL_RCC_GetPCLK2Freq>
 8006d9e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006da0:	e02f      	b.n	8006e02 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006da2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006da6:	4618      	mov	r0, r3
 8006da8:	f7fe fac6 	bl	8005338 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006db0:	e027      	b.n	8006e02 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006db2:	f107 0318 	add.w	r3, r7, #24
 8006db6:	4618      	mov	r0, r3
 8006db8:	f7fe fc12 	bl	80055e0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006dbc:	69fb      	ldr	r3, [r7, #28]
 8006dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006dc0:	e01f      	b.n	8006e02 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006dc2:	4b2d      	ldr	r3, [pc, #180]	; (8006e78 <UART_SetConfig+0x934>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f003 0320 	and.w	r3, r3, #32
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d009      	beq.n	8006de2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006dce:	4b2a      	ldr	r3, [pc, #168]	; (8006e78 <UART_SetConfig+0x934>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	08db      	lsrs	r3, r3, #3
 8006dd4:	f003 0303 	and.w	r3, r3, #3
 8006dd8:	4a24      	ldr	r2, [pc, #144]	; (8006e6c <UART_SetConfig+0x928>)
 8006dda:	fa22 f303 	lsr.w	r3, r2, r3
 8006dde:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006de0:	e00f      	b.n	8006e02 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006de2:	4b22      	ldr	r3, [pc, #136]	; (8006e6c <UART_SetConfig+0x928>)
 8006de4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006de6:	e00c      	b.n	8006e02 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006de8:	4b21      	ldr	r3, [pc, #132]	; (8006e70 <UART_SetConfig+0x92c>)
 8006dea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006dec:	e009      	b.n	8006e02 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006dee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006df2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006df4:	e005      	b.n	8006e02 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006df6:	2300      	movs	r3, #0
 8006df8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006e00:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006e02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	f000 80e7 	beq.w	8006fd8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e0e:	4a19      	ldr	r2, [pc, #100]	; (8006e74 <UART_SetConfig+0x930>)
 8006e10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e14:	461a      	mov	r2, r3
 8006e16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e18:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e1c:	005a      	lsls	r2, r3, #1
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	685b      	ldr	r3, [r3, #4]
 8006e22:	085b      	lsrs	r3, r3, #1
 8006e24:	441a      	add	r2, r3
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	685b      	ldr	r3, [r3, #4]
 8006e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e2e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e32:	2b0f      	cmp	r3, #15
 8006e34:	d916      	bls.n	8006e64 <UART_SetConfig+0x920>
 8006e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e3c:	d212      	bcs.n	8006e64 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e40:	b29b      	uxth	r3, r3
 8006e42:	f023 030f 	bic.w	r3, r3, #15
 8006e46:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e4a:	085b      	lsrs	r3, r3, #1
 8006e4c:	b29b      	uxth	r3, r3
 8006e4e:	f003 0307 	and.w	r3, r3, #7
 8006e52:	b29a      	uxth	r2, r3
 8006e54:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006e56:	4313      	orrs	r3, r2
 8006e58:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006e60:	60da      	str	r2, [r3, #12]
 8006e62:	e0b9      	b.n	8006fd8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006e64:	2301      	movs	r3, #1
 8006e66:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006e6a:	e0b5      	b.n	8006fd8 <UART_SetConfig+0xa94>
 8006e6c:	03d09000 	.word	0x03d09000
 8006e70:	003d0900 	.word	0x003d0900
 8006e74:	080098b0 	.word	0x080098b0
 8006e78:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8006e7c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006e80:	2b20      	cmp	r3, #32
 8006e82:	dc49      	bgt.n	8006f18 <UART_SetConfig+0x9d4>
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	db7c      	blt.n	8006f82 <UART_SetConfig+0xa3e>
 8006e88:	2b20      	cmp	r3, #32
 8006e8a:	d87a      	bhi.n	8006f82 <UART_SetConfig+0xa3e>
 8006e8c:	a201      	add	r2, pc, #4	; (adr r2, 8006e94 <UART_SetConfig+0x950>)
 8006e8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e92:	bf00      	nop
 8006e94:	08006f1f 	.word	0x08006f1f
 8006e98:	08006f27 	.word	0x08006f27
 8006e9c:	08006f83 	.word	0x08006f83
 8006ea0:	08006f83 	.word	0x08006f83
 8006ea4:	08006f2f 	.word	0x08006f2f
 8006ea8:	08006f83 	.word	0x08006f83
 8006eac:	08006f83 	.word	0x08006f83
 8006eb0:	08006f83 	.word	0x08006f83
 8006eb4:	08006f3f 	.word	0x08006f3f
 8006eb8:	08006f83 	.word	0x08006f83
 8006ebc:	08006f83 	.word	0x08006f83
 8006ec0:	08006f83 	.word	0x08006f83
 8006ec4:	08006f83 	.word	0x08006f83
 8006ec8:	08006f83 	.word	0x08006f83
 8006ecc:	08006f83 	.word	0x08006f83
 8006ed0:	08006f83 	.word	0x08006f83
 8006ed4:	08006f4f 	.word	0x08006f4f
 8006ed8:	08006f83 	.word	0x08006f83
 8006edc:	08006f83 	.word	0x08006f83
 8006ee0:	08006f83 	.word	0x08006f83
 8006ee4:	08006f83 	.word	0x08006f83
 8006ee8:	08006f83 	.word	0x08006f83
 8006eec:	08006f83 	.word	0x08006f83
 8006ef0:	08006f83 	.word	0x08006f83
 8006ef4:	08006f83 	.word	0x08006f83
 8006ef8:	08006f83 	.word	0x08006f83
 8006efc:	08006f83 	.word	0x08006f83
 8006f00:	08006f83 	.word	0x08006f83
 8006f04:	08006f83 	.word	0x08006f83
 8006f08:	08006f83 	.word	0x08006f83
 8006f0c:	08006f83 	.word	0x08006f83
 8006f10:	08006f83 	.word	0x08006f83
 8006f14:	08006f75 	.word	0x08006f75
 8006f18:	2b40      	cmp	r3, #64	; 0x40
 8006f1a:	d02e      	beq.n	8006f7a <UART_SetConfig+0xa36>
 8006f1c:	e031      	b.n	8006f82 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f1e:	f7fd fa83 	bl	8004428 <HAL_RCC_GetPCLK1Freq>
 8006f22:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006f24:	e033      	b.n	8006f8e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f26:	f7fd fa95 	bl	8004454 <HAL_RCC_GetPCLK2Freq>
 8006f2a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006f2c:	e02f      	b.n	8006f8e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f32:	4618      	mov	r0, r3
 8006f34:	f7fe fa00 	bl	8005338 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f3c:	e027      	b.n	8006f8e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f3e:	f107 0318 	add.w	r3, r7, #24
 8006f42:	4618      	mov	r0, r3
 8006f44:	f7fe fb4c 	bl	80055e0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006f48:	69fb      	ldr	r3, [r7, #28]
 8006f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f4c:	e01f      	b.n	8006f8e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006f4e:	4b2d      	ldr	r3, [pc, #180]	; (8007004 <UART_SetConfig+0xac0>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f003 0320 	and.w	r3, r3, #32
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d009      	beq.n	8006f6e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006f5a:	4b2a      	ldr	r3, [pc, #168]	; (8007004 <UART_SetConfig+0xac0>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	08db      	lsrs	r3, r3, #3
 8006f60:	f003 0303 	and.w	r3, r3, #3
 8006f64:	4a28      	ldr	r2, [pc, #160]	; (8007008 <UART_SetConfig+0xac4>)
 8006f66:	fa22 f303 	lsr.w	r3, r2, r3
 8006f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006f6c:	e00f      	b.n	8006f8e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8006f6e:	4b26      	ldr	r3, [pc, #152]	; (8007008 <UART_SetConfig+0xac4>)
 8006f70:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f72:	e00c      	b.n	8006f8e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006f74:	4b25      	ldr	r3, [pc, #148]	; (800700c <UART_SetConfig+0xac8>)
 8006f76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f78:	e009      	b.n	8006f8e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f80:	e005      	b.n	8006f8e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8006f82:	2300      	movs	r3, #0
 8006f84:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006f86:	2301      	movs	r3, #1
 8006f88:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006f8c:	bf00      	nop
    }

    if (pclk != 0U)
 8006f8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d021      	beq.n	8006fd8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f98:	4a1d      	ldr	r2, [pc, #116]	; (8007010 <UART_SetConfig+0xacc>)
 8006f9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f9e:	461a      	mov	r2, r3
 8006fa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fa2:	fbb3 f2f2 	udiv	r2, r3, r2
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	685b      	ldr	r3, [r3, #4]
 8006faa:	085b      	lsrs	r3, r3, #1
 8006fac:	441a      	add	r2, r3
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	685b      	ldr	r3, [r3, #4]
 8006fb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fb6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fba:	2b0f      	cmp	r3, #15
 8006fbc:	d909      	bls.n	8006fd2 <UART_SetConfig+0xa8e>
 8006fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fc4:	d205      	bcs.n	8006fd2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fc8:	b29a      	uxth	r2, r3
 8006fca:	697b      	ldr	r3, [r7, #20]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	60da      	str	r2, [r3, #12]
 8006fd0:	e002      	b.n	8006fd8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	2201      	movs	r2, #1
 8006fdc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006fe0:	697b      	ldr	r3, [r7, #20]
 8006fe2:	2201      	movs	r2, #1
 8006fe4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	2200      	movs	r2, #0
 8006fec:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006ff4:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	3748      	adds	r7, #72	; 0x48
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007002:	bf00      	nop
 8007004:	58024400 	.word	0x58024400
 8007008:	03d09000 	.word	0x03d09000
 800700c:	003d0900 	.word	0x003d0900
 8007010:	080098b0 	.word	0x080098b0

08007014 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007014:	b480      	push	{r7}
 8007016:	b083      	sub	sp, #12
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007020:	f003 0301 	and.w	r3, r3, #1
 8007024:	2b00      	cmp	r3, #0
 8007026:	d00a      	beq.n	800703e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	685b      	ldr	r3, [r3, #4]
 800702e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	430a      	orrs	r2, r1
 800703c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007042:	f003 0302 	and.w	r3, r3, #2
 8007046:	2b00      	cmp	r3, #0
 8007048:	d00a      	beq.n	8007060 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	685b      	ldr	r3, [r3, #4]
 8007050:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	430a      	orrs	r2, r1
 800705e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007064:	f003 0304 	and.w	r3, r3, #4
 8007068:	2b00      	cmp	r3, #0
 800706a:	d00a      	beq.n	8007082 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	685b      	ldr	r3, [r3, #4]
 8007072:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	430a      	orrs	r2, r1
 8007080:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007086:	f003 0308 	and.w	r3, r3, #8
 800708a:	2b00      	cmp	r3, #0
 800708c:	d00a      	beq.n	80070a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	685b      	ldr	r3, [r3, #4]
 8007094:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	430a      	orrs	r2, r1
 80070a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070a8:	f003 0310 	and.w	r3, r3, #16
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d00a      	beq.n	80070c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	689b      	ldr	r3, [r3, #8]
 80070b6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	430a      	orrs	r2, r1
 80070c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070ca:	f003 0320 	and.w	r3, r3, #32
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d00a      	beq.n	80070e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	689b      	ldr	r3, [r3, #8]
 80070d8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	430a      	orrs	r2, r1
 80070e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d01a      	beq.n	800712a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	685b      	ldr	r3, [r3, #4]
 80070fa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	430a      	orrs	r2, r1
 8007108:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800710e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007112:	d10a      	bne.n	800712a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	685b      	ldr	r3, [r3, #4]
 800711a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	430a      	orrs	r2, r1
 8007128:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800712e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007132:	2b00      	cmp	r3, #0
 8007134:	d00a      	beq.n	800714c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	685b      	ldr	r3, [r3, #4]
 800713c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	430a      	orrs	r2, r1
 800714a:	605a      	str	r2, [r3, #4]
  }
}
 800714c:	bf00      	nop
 800714e:	370c      	adds	r7, #12
 8007150:	46bd      	mov	sp, r7
 8007152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007156:	4770      	bx	lr

08007158 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b086      	sub	sp, #24
 800715c:	af02      	add	r7, sp, #8
 800715e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2200      	movs	r2, #0
 8007164:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007168:	f7fa fbba 	bl	80018e0 <HAL_GetTick>
 800716c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f003 0308 	and.w	r3, r3, #8
 8007178:	2b08      	cmp	r3, #8
 800717a:	d10e      	bne.n	800719a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800717c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007180:	9300      	str	r3, [sp, #0]
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	2200      	movs	r2, #0
 8007186:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f000 f82f 	bl	80071ee <UART_WaitOnFlagUntilTimeout>
 8007190:	4603      	mov	r3, r0
 8007192:	2b00      	cmp	r3, #0
 8007194:	d001      	beq.n	800719a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007196:	2303      	movs	r3, #3
 8007198:	e025      	b.n	80071e6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f003 0304 	and.w	r3, r3, #4
 80071a4:	2b04      	cmp	r3, #4
 80071a6:	d10e      	bne.n	80071c6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80071a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80071ac:	9300      	str	r3, [sp, #0]
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2200      	movs	r2, #0
 80071b2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f000 f819 	bl	80071ee <UART_WaitOnFlagUntilTimeout>
 80071bc:	4603      	mov	r3, r0
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d001      	beq.n	80071c6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80071c2:	2303      	movs	r3, #3
 80071c4:	e00f      	b.n	80071e6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2220      	movs	r2, #32
 80071ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2220      	movs	r2, #32
 80071d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2200      	movs	r2, #0
 80071da:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2200      	movs	r2, #0
 80071e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80071e4:	2300      	movs	r3, #0
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	3710      	adds	r7, #16
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}

080071ee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80071ee:	b580      	push	{r7, lr}
 80071f0:	b09c      	sub	sp, #112	; 0x70
 80071f2:	af00      	add	r7, sp, #0
 80071f4:	60f8      	str	r0, [r7, #12]
 80071f6:	60b9      	str	r1, [r7, #8]
 80071f8:	603b      	str	r3, [r7, #0]
 80071fa:	4613      	mov	r3, r2
 80071fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071fe:	e0a9      	b.n	8007354 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007200:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007202:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007206:	f000 80a5 	beq.w	8007354 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800720a:	f7fa fb69 	bl	80018e0 <HAL_GetTick>
 800720e:	4602      	mov	r2, r0
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	1ad3      	subs	r3, r2, r3
 8007214:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007216:	429a      	cmp	r2, r3
 8007218:	d302      	bcc.n	8007220 <UART_WaitOnFlagUntilTimeout+0x32>
 800721a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800721c:	2b00      	cmp	r3, #0
 800721e:	d140      	bne.n	80072a2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007226:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007228:	e853 3f00 	ldrex	r3, [r3]
 800722c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800722e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007230:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007234:	667b      	str	r3, [r7, #100]	; 0x64
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	461a      	mov	r2, r3
 800723c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800723e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007240:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007242:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007244:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007246:	e841 2300 	strex	r3, r2, [r1]
 800724a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800724c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800724e:	2b00      	cmp	r3, #0
 8007250:	d1e6      	bne.n	8007220 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	3308      	adds	r3, #8
 8007258:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800725a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800725c:	e853 3f00 	ldrex	r3, [r3]
 8007260:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007264:	f023 0301 	bic.w	r3, r3, #1
 8007268:	663b      	str	r3, [r7, #96]	; 0x60
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	3308      	adds	r3, #8
 8007270:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007272:	64ba      	str	r2, [r7, #72]	; 0x48
 8007274:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007276:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007278:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800727a:	e841 2300 	strex	r3, r2, [r1]
 800727e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007280:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007282:	2b00      	cmp	r3, #0
 8007284:	d1e5      	bne.n	8007252 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	2220      	movs	r2, #32
 800728a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	2220      	movs	r2, #32
 8007292:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	2200      	movs	r2, #0
 800729a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800729e:	2303      	movs	r3, #3
 80072a0:	e069      	b.n	8007376 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f003 0304 	and.w	r3, r3, #4
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d051      	beq.n	8007354 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	69db      	ldr	r3, [r3, #28]
 80072b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80072ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80072be:	d149      	bne.n	8007354 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80072c8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072d2:	e853 3f00 	ldrex	r3, [r3]
 80072d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80072d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072da:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80072de:	66fb      	str	r3, [r7, #108]	; 0x6c
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	461a      	mov	r2, r3
 80072e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072e8:	637b      	str	r3, [r7, #52]	; 0x34
 80072ea:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80072ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80072f0:	e841 2300 	strex	r3, r2, [r1]
 80072f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80072f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d1e6      	bne.n	80072ca <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	3308      	adds	r3, #8
 8007302:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	e853 3f00 	ldrex	r3, [r3]
 800730a:	613b      	str	r3, [r7, #16]
   return(result);
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	f023 0301 	bic.w	r3, r3, #1
 8007312:	66bb      	str	r3, [r7, #104]	; 0x68
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	3308      	adds	r3, #8
 800731a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800731c:	623a      	str	r2, [r7, #32]
 800731e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007320:	69f9      	ldr	r1, [r7, #28]
 8007322:	6a3a      	ldr	r2, [r7, #32]
 8007324:	e841 2300 	strex	r3, r2, [r1]
 8007328:	61bb      	str	r3, [r7, #24]
   return(result);
 800732a:	69bb      	ldr	r3, [r7, #24]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d1e5      	bne.n	80072fc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	2220      	movs	r2, #32
 8007334:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	2220      	movs	r2, #32
 800733c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	2220      	movs	r2, #32
 8007344:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	2200      	movs	r2, #0
 800734c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007350:	2303      	movs	r3, #3
 8007352:	e010      	b.n	8007376 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	69da      	ldr	r2, [r3, #28]
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	4013      	ands	r3, r2
 800735e:	68ba      	ldr	r2, [r7, #8]
 8007360:	429a      	cmp	r2, r3
 8007362:	bf0c      	ite	eq
 8007364:	2301      	moveq	r3, #1
 8007366:	2300      	movne	r3, #0
 8007368:	b2db      	uxtb	r3, r3
 800736a:	461a      	mov	r2, r3
 800736c:	79fb      	ldrb	r3, [r7, #7]
 800736e:	429a      	cmp	r2, r3
 8007370:	f43f af46 	beq.w	8007200 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007374:	2300      	movs	r3, #0
}
 8007376:	4618      	mov	r0, r3
 8007378:	3770      	adds	r7, #112	; 0x70
 800737a:	46bd      	mov	sp, r7
 800737c:	bd80      	pop	{r7, pc}
	...

08007380 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007380:	b480      	push	{r7}
 8007382:	b0a3      	sub	sp, #140	; 0x8c
 8007384:	af00      	add	r7, sp, #0
 8007386:	60f8      	str	r0, [r7, #12]
 8007388:	60b9      	str	r1, [r7, #8]
 800738a:	4613      	mov	r3, r2
 800738c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	68ba      	ldr	r2, [r7, #8]
 8007392:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	88fa      	ldrh	r2, [r7, #6]
 8007398:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	88fa      	ldrh	r2, [r7, #6]
 80073a0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	2200      	movs	r2, #0
 80073a8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	689b      	ldr	r3, [r3, #8]
 80073ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073b2:	d10e      	bne.n	80073d2 <UART_Start_Receive_IT+0x52>
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	691b      	ldr	r3, [r3, #16]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d105      	bne.n	80073c8 <UART_Start_Receive_IT+0x48>
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	f240 12ff 	movw	r2, #511	; 0x1ff
 80073c2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80073c6:	e02d      	b.n	8007424 <UART_Start_Receive_IT+0xa4>
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	22ff      	movs	r2, #255	; 0xff
 80073cc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80073d0:	e028      	b.n	8007424 <UART_Start_Receive_IT+0xa4>
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	689b      	ldr	r3, [r3, #8]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d10d      	bne.n	80073f6 <UART_Start_Receive_IT+0x76>
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	691b      	ldr	r3, [r3, #16]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d104      	bne.n	80073ec <UART_Start_Receive_IT+0x6c>
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	22ff      	movs	r2, #255	; 0xff
 80073e6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80073ea:	e01b      	b.n	8007424 <UART_Start_Receive_IT+0xa4>
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	227f      	movs	r2, #127	; 0x7f
 80073f0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80073f4:	e016      	b.n	8007424 <UART_Start_Receive_IT+0xa4>
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	689b      	ldr	r3, [r3, #8]
 80073fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80073fe:	d10d      	bne.n	800741c <UART_Start_Receive_IT+0x9c>
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	691b      	ldr	r3, [r3, #16]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d104      	bne.n	8007412 <UART_Start_Receive_IT+0x92>
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	227f      	movs	r2, #127	; 0x7f
 800740c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007410:	e008      	b.n	8007424 <UART_Start_Receive_IT+0xa4>
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	223f      	movs	r2, #63	; 0x3f
 8007416:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800741a:	e003      	b.n	8007424 <UART_Start_Receive_IT+0xa4>
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	2200      	movs	r2, #0
 8007420:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	2200      	movs	r2, #0
 8007428:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	2222      	movs	r2, #34	; 0x22
 8007430:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	3308      	adds	r3, #8
 800743a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800743c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800743e:	e853 3f00 	ldrex	r3, [r3]
 8007442:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007444:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007446:	f043 0301 	orr.w	r3, r3, #1
 800744a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	3308      	adds	r3, #8
 8007454:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007458:	673a      	str	r2, [r7, #112]	; 0x70
 800745a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800745c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800745e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007460:	e841 2300 	strex	r3, r2, [r1]
 8007464:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8007466:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007468:	2b00      	cmp	r3, #0
 800746a:	d1e3      	bne.n	8007434 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007470:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007474:	d153      	bne.n	800751e <UART_Start_Receive_IT+0x19e>
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800747c:	88fa      	ldrh	r2, [r7, #6]
 800747e:	429a      	cmp	r2, r3
 8007480:	d34d      	bcc.n	800751e <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	689b      	ldr	r3, [r3, #8]
 8007486:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800748a:	d107      	bne.n	800749c <UART_Start_Receive_IT+0x11c>
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	691b      	ldr	r3, [r3, #16]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d103      	bne.n	800749c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	4a4b      	ldr	r2, [pc, #300]	; (80075c4 <UART_Start_Receive_IT+0x244>)
 8007498:	671a      	str	r2, [r3, #112]	; 0x70
 800749a:	e002      	b.n	80074a2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	4a4a      	ldr	r2, [pc, #296]	; (80075c8 <UART_Start_Receive_IT+0x248>)
 80074a0:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	2200      	movs	r2, #0
 80074a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	691b      	ldr	r3, [r3, #16]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d01a      	beq.n	80074e8 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074ba:	e853 3f00 	ldrex	r3, [r3]
 80074be:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80074c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80074c6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	461a      	mov	r2, r3
 80074d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80074d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80074d6:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074d8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80074da:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80074dc:	e841 2300 	strex	r3, r2, [r1]
 80074e0:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80074e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d1e4      	bne.n	80074b2 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	3308      	adds	r3, #8
 80074ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074f2:	e853 3f00 	ldrex	r3, [r3]
 80074f6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80074f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80074fe:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	3308      	adds	r3, #8
 8007506:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007508:	64ba      	str	r2, [r7, #72]	; 0x48
 800750a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800750c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800750e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007510:	e841 2300 	strex	r3, r2, [r1]
 8007514:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007516:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007518:	2b00      	cmp	r3, #0
 800751a:	d1e5      	bne.n	80074e8 <UART_Start_Receive_IT+0x168>
 800751c:	e04a      	b.n	80075b4 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	689b      	ldr	r3, [r3, #8]
 8007522:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007526:	d107      	bne.n	8007538 <UART_Start_Receive_IT+0x1b8>
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	691b      	ldr	r3, [r3, #16]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d103      	bne.n	8007538 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	4a26      	ldr	r2, [pc, #152]	; (80075cc <UART_Start_Receive_IT+0x24c>)
 8007534:	671a      	str	r2, [r3, #112]	; 0x70
 8007536:	e002      	b.n	800753e <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	4a25      	ldr	r2, [pc, #148]	; (80075d0 <UART_Start_Receive_IT+0x250>)
 800753c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	2200      	movs	r2, #0
 8007542:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	691b      	ldr	r3, [r3, #16]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d019      	beq.n	8007582 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007556:	e853 3f00 	ldrex	r3, [r3]
 800755a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800755c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800755e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007562:	677b      	str	r3, [r7, #116]	; 0x74
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	461a      	mov	r2, r3
 800756a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800756c:	637b      	str	r3, [r7, #52]	; 0x34
 800756e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007570:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007572:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007574:	e841 2300 	strex	r3, r2, [r1]
 8007578:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800757a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800757c:	2b00      	cmp	r3, #0
 800757e:	d1e6      	bne.n	800754e <UART_Start_Receive_IT+0x1ce>
 8007580:	e018      	b.n	80075b4 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007588:	697b      	ldr	r3, [r7, #20]
 800758a:	e853 3f00 	ldrex	r3, [r3]
 800758e:	613b      	str	r3, [r7, #16]
   return(result);
 8007590:	693b      	ldr	r3, [r7, #16]
 8007592:	f043 0320 	orr.w	r3, r3, #32
 8007596:	67bb      	str	r3, [r7, #120]	; 0x78
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	461a      	mov	r2, r3
 800759e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80075a0:	623b      	str	r3, [r7, #32]
 80075a2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075a4:	69f9      	ldr	r1, [r7, #28]
 80075a6:	6a3a      	ldr	r2, [r7, #32]
 80075a8:	e841 2300 	strex	r3, r2, [r1]
 80075ac:	61bb      	str	r3, [r7, #24]
   return(result);
 80075ae:	69bb      	ldr	r3, [r7, #24]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d1e6      	bne.n	8007582 <UART_Start_Receive_IT+0x202>
    }
  }
  return HAL_OK;
 80075b4:	2300      	movs	r3, #0
}
 80075b6:	4618      	mov	r0, r3
 80075b8:	378c      	adds	r7, #140	; 0x8c
 80075ba:	46bd      	mov	sp, r7
 80075bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c0:	4770      	bx	lr
 80075c2:	bf00      	nop
 80075c4:	08007cdd 	.word	0x08007cdd
 80075c8:	080079e5 	.word	0x080079e5
 80075cc:	08007883 	.word	0x08007883
 80075d0:	08007723 	.word	0x08007723

080075d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80075d4:	b480      	push	{r7}
 80075d6:	b095      	sub	sp, #84	; 0x54
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075e4:	e853 3f00 	ldrex	r3, [r3]
 80075e8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80075ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80075f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	461a      	mov	r2, r3
 80075f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075fa:	643b      	str	r3, [r7, #64]	; 0x40
 80075fc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075fe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007600:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007602:	e841 2300 	strex	r3, r2, [r1]
 8007606:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800760a:	2b00      	cmp	r3, #0
 800760c:	d1e6      	bne.n	80075dc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	3308      	adds	r3, #8
 8007614:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007616:	6a3b      	ldr	r3, [r7, #32]
 8007618:	e853 3f00 	ldrex	r3, [r3]
 800761c:	61fb      	str	r3, [r7, #28]
   return(result);
 800761e:	69fa      	ldr	r2, [r7, #28]
 8007620:	4b1e      	ldr	r3, [pc, #120]	; (800769c <UART_EndRxTransfer+0xc8>)
 8007622:	4013      	ands	r3, r2
 8007624:	64bb      	str	r3, [r7, #72]	; 0x48
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	3308      	adds	r3, #8
 800762c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800762e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007630:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007632:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007634:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007636:	e841 2300 	strex	r3, r2, [r1]
 800763a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800763c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800763e:	2b00      	cmp	r3, #0
 8007640:	d1e5      	bne.n	800760e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007646:	2b01      	cmp	r3, #1
 8007648:	d118      	bne.n	800767c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	e853 3f00 	ldrex	r3, [r3]
 8007656:	60bb      	str	r3, [r7, #8]
   return(result);
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	f023 0310 	bic.w	r3, r3, #16
 800765e:	647b      	str	r3, [r7, #68]	; 0x44
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	461a      	mov	r2, r3
 8007666:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007668:	61bb      	str	r3, [r7, #24]
 800766a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800766c:	6979      	ldr	r1, [r7, #20]
 800766e:	69ba      	ldr	r2, [r7, #24]
 8007670:	e841 2300 	strex	r3, r2, [r1]
 8007674:	613b      	str	r3, [r7, #16]
   return(result);
 8007676:	693b      	ldr	r3, [r7, #16]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d1e6      	bne.n	800764a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2220      	movs	r2, #32
 8007680:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2200      	movs	r2, #0
 8007688:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2200      	movs	r2, #0
 800768e:	671a      	str	r2, [r3, #112]	; 0x70
}
 8007690:	bf00      	nop
 8007692:	3754      	adds	r7, #84	; 0x54
 8007694:	46bd      	mov	sp, r7
 8007696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769a:	4770      	bx	lr
 800769c:	effffffe 	.word	0xeffffffe

080076a0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b084      	sub	sp, #16
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	2200      	movs	r2, #0
 80076b2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	2200      	movs	r2, #0
 80076ba:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80076be:	68f8      	ldr	r0, [r7, #12]
 80076c0:	f7fe ff2a 	bl	8006518 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80076c4:	bf00      	nop
 80076c6:	3710      	adds	r7, #16
 80076c8:	46bd      	mov	sp, r7
 80076ca:	bd80      	pop	{r7, pc}

080076cc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b088      	sub	sp, #32
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	e853 3f00 	ldrex	r3, [r3]
 80076e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076e8:	61fb      	str	r3, [r7, #28]
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	461a      	mov	r2, r3
 80076f0:	69fb      	ldr	r3, [r7, #28]
 80076f2:	61bb      	str	r3, [r7, #24]
 80076f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076f6:	6979      	ldr	r1, [r7, #20]
 80076f8:	69ba      	ldr	r2, [r7, #24]
 80076fa:	e841 2300 	strex	r3, r2, [r1]
 80076fe:	613b      	str	r3, [r7, #16]
   return(result);
 8007700:	693b      	ldr	r3, [r7, #16]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d1e6      	bne.n	80076d4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2220      	movs	r2, #32
 800770a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2200      	movs	r2, #0
 8007712:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f7fe fef5 	bl	8006504 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800771a:	bf00      	nop
 800771c:	3720      	adds	r7, #32
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}

08007722 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007722:	b580      	push	{r7, lr}
 8007724:	b096      	sub	sp, #88	; 0x58
 8007726:	af00      	add	r7, sp, #0
 8007728:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007730:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800773a:	2b22      	cmp	r3, #34	; 0x22
 800773c:	f040 8095 	bne.w	800786a <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007746:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800774a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800774e:	b2d9      	uxtb	r1, r3
 8007750:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007754:	b2da      	uxtb	r2, r3
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800775a:	400a      	ands	r2, r1
 800775c:	b2d2      	uxtb	r2, r2
 800775e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007764:	1c5a      	adds	r2, r3, #1
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007770:	b29b      	uxth	r3, r3
 8007772:	3b01      	subs	r3, #1
 8007774:	b29a      	uxth	r2, r3
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007782:	b29b      	uxth	r3, r3
 8007784:	2b00      	cmp	r3, #0
 8007786:	d178      	bne.n	800787a <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800778e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007790:	e853 3f00 	ldrex	r3, [r3]
 8007794:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007796:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007798:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800779c:	653b      	str	r3, [r7, #80]	; 0x50
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	461a      	mov	r2, r3
 80077a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077a6:	647b      	str	r3, [r7, #68]	; 0x44
 80077a8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077aa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80077ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80077ae:	e841 2300 	strex	r3, r2, [r1]
 80077b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80077b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d1e6      	bne.n	8007788 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	3308      	adds	r3, #8
 80077c0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c4:	e853 3f00 	ldrex	r3, [r3]
 80077c8:	623b      	str	r3, [r7, #32]
   return(result);
 80077ca:	6a3b      	ldr	r3, [r7, #32]
 80077cc:	f023 0301 	bic.w	r3, r3, #1
 80077d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	3308      	adds	r3, #8
 80077d8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80077da:	633a      	str	r2, [r7, #48]	; 0x30
 80077dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80077e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077e2:	e841 2300 	strex	r3, r2, [r1]
 80077e6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80077e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d1e5      	bne.n	80077ba <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2220      	movs	r2, #32
 80077f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2200      	movs	r2, #0
 80077fa:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007800:	2b01      	cmp	r3, #1
 8007802:	d12e      	bne.n	8007862 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2200      	movs	r2, #0
 8007808:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007810:	693b      	ldr	r3, [r7, #16]
 8007812:	e853 3f00 	ldrex	r3, [r3]
 8007816:	60fb      	str	r3, [r7, #12]
   return(result);
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	f023 0310 	bic.w	r3, r3, #16
 800781e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	461a      	mov	r2, r3
 8007826:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007828:	61fb      	str	r3, [r7, #28]
 800782a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800782c:	69b9      	ldr	r1, [r7, #24]
 800782e:	69fa      	ldr	r2, [r7, #28]
 8007830:	e841 2300 	strex	r3, r2, [r1]
 8007834:	617b      	str	r3, [r7, #20]
   return(result);
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d1e6      	bne.n	800780a <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	69db      	ldr	r3, [r3, #28]
 8007842:	f003 0310 	and.w	r3, r3, #16
 8007846:	2b10      	cmp	r3, #16
 8007848:	d103      	bne.n	8007852 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	2210      	movs	r2, #16
 8007850:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007858:	4619      	mov	r1, r3
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f7fe fe66 	bl	800652c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007860:	e00b      	b.n	800787a <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f7f9 f800 	bl	8000868 <HAL_UART_RxCpltCallback>
}
 8007868:	e007      	b.n	800787a <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	699a      	ldr	r2, [r3, #24]
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f042 0208 	orr.w	r2, r2, #8
 8007878:	619a      	str	r2, [r3, #24]
}
 800787a:	bf00      	nop
 800787c:	3758      	adds	r7, #88	; 0x58
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}

08007882 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007882:	b580      	push	{r7, lr}
 8007884:	b096      	sub	sp, #88	; 0x58
 8007886:	af00      	add	r7, sp, #0
 8007888:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007890:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800789a:	2b22      	cmp	r3, #34	; 0x22
 800789c:	f040 8095 	bne.w	80079ca <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078a6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078ae:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80078b0:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80078b4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80078b8:	4013      	ands	r3, r2
 80078ba:	b29a      	uxth	r2, r3
 80078bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078be:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078c4:	1c9a      	adds	r2, r3, #2
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80078d0:	b29b      	uxth	r3, r3
 80078d2:	3b01      	subs	r3, #1
 80078d4:	b29a      	uxth	r2, r3
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80078e2:	b29b      	uxth	r3, r3
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d178      	bne.n	80079da <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078f0:	e853 3f00 	ldrex	r3, [r3]
 80078f4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80078f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80078fc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	461a      	mov	r2, r3
 8007904:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007906:	643b      	str	r3, [r7, #64]	; 0x40
 8007908:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800790a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800790c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800790e:	e841 2300 	strex	r3, r2, [r1]
 8007912:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007916:	2b00      	cmp	r3, #0
 8007918:	d1e6      	bne.n	80078e8 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	3308      	adds	r3, #8
 8007920:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007922:	6a3b      	ldr	r3, [r7, #32]
 8007924:	e853 3f00 	ldrex	r3, [r3]
 8007928:	61fb      	str	r3, [r7, #28]
   return(result);
 800792a:	69fb      	ldr	r3, [r7, #28]
 800792c:	f023 0301 	bic.w	r3, r3, #1
 8007930:	64bb      	str	r3, [r7, #72]	; 0x48
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	3308      	adds	r3, #8
 8007938:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800793a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800793c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800793e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007940:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007942:	e841 2300 	strex	r3, r2, [r1]
 8007946:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800794a:	2b00      	cmp	r3, #0
 800794c:	d1e5      	bne.n	800791a <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2220      	movs	r2, #32
 8007952:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2200      	movs	r2, #0
 800795a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007960:	2b01      	cmp	r3, #1
 8007962:	d12e      	bne.n	80079c2 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2200      	movs	r2, #0
 8007968:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	e853 3f00 	ldrex	r3, [r3]
 8007976:	60bb      	str	r3, [r7, #8]
   return(result);
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	f023 0310 	bic.w	r3, r3, #16
 800797e:	647b      	str	r3, [r7, #68]	; 0x44
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	461a      	mov	r2, r3
 8007986:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007988:	61bb      	str	r3, [r7, #24]
 800798a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800798c:	6979      	ldr	r1, [r7, #20]
 800798e:	69ba      	ldr	r2, [r7, #24]
 8007990:	e841 2300 	strex	r3, r2, [r1]
 8007994:	613b      	str	r3, [r7, #16]
   return(result);
 8007996:	693b      	ldr	r3, [r7, #16]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d1e6      	bne.n	800796a <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	69db      	ldr	r3, [r3, #28]
 80079a2:	f003 0310 	and.w	r3, r3, #16
 80079a6:	2b10      	cmp	r3, #16
 80079a8:	d103      	bne.n	80079b2 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	2210      	movs	r2, #16
 80079b0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80079b8:	4619      	mov	r1, r3
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f7fe fdb6 	bl	800652c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80079c0:	e00b      	b.n	80079da <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f7f8 ff50 	bl	8000868 <HAL_UART_RxCpltCallback>
}
 80079c8:	e007      	b.n	80079da <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	699a      	ldr	r2, [r3, #24]
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f042 0208 	orr.w	r2, r2, #8
 80079d8:	619a      	str	r2, [r3, #24]
}
 80079da:	bf00      	nop
 80079dc:	3758      	adds	r7, #88	; 0x58
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd80      	pop	{r7, pc}
	...

080079e4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b0a6      	sub	sp, #152	; 0x98
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80079f2:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	69db      	ldr	r3, [r3, #28]
 80079fc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	689b      	ldr	r3, [r3, #8]
 8007a10:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a1a:	2b22      	cmp	r3, #34	; 0x22
 8007a1c:	f040 814d 	bne.w	8007cba <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007a26:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007a2a:	e0f4      	b.n	8007c16 <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a32:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007a36:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8007a3a:	b2d9      	uxtb	r1, r3
 8007a3c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8007a40:	b2da      	uxtb	r2, r3
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a46:	400a      	ands	r2, r1
 8007a48:	b2d2      	uxtb	r2, r2
 8007a4a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a50:	1c5a      	adds	r2, r3, #1
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007a5c:	b29b      	uxth	r3, r3
 8007a5e:	3b01      	subs	r3, #1
 8007a60:	b29a      	uxth	r2, r3
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	69db      	ldr	r3, [r3, #28]
 8007a6e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007a72:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007a76:	f003 0307 	and.w	r3, r3, #7
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d053      	beq.n	8007b26 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007a7e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007a82:	f003 0301 	and.w	r3, r3, #1
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d011      	beq.n	8007aae <UART_RxISR_8BIT_FIFOEN+0xca>
 8007a8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007a8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d00b      	beq.n	8007aae <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	2201      	movs	r2, #1
 8007a9c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007aa4:	f043 0201 	orr.w	r2, r3, #1
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007aae:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007ab2:	f003 0302 	and.w	r3, r3, #2
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d011      	beq.n	8007ade <UART_RxISR_8BIT_FIFOEN+0xfa>
 8007aba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007abe:	f003 0301 	and.w	r3, r3, #1
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d00b      	beq.n	8007ade <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	2202      	movs	r2, #2
 8007acc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ad4:	f043 0204 	orr.w	r2, r3, #4
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007ade:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007ae2:	f003 0304 	and.w	r3, r3, #4
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d011      	beq.n	8007b0e <UART_RxISR_8BIT_FIFOEN+0x12a>
 8007aea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007aee:	f003 0301 	and.w	r3, r3, #1
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d00b      	beq.n	8007b0e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	2204      	movs	r2, #4
 8007afc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b04:	f043 0202 	orr.w	r2, r3, #2
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d006      	beq.n	8007b26 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f7fe fcfd 	bl	8006518 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2200      	movs	r2, #0
 8007b22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007b2c:	b29b      	uxth	r3, r3
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d171      	bne.n	8007c16 <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b3a:	e853 3f00 	ldrex	r3, [r3]
 8007b3e:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8007b40:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007b42:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b46:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	461a      	mov	r2, r3
 8007b50:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007b54:	66bb      	str	r3, [r7, #104]	; 0x68
 8007b56:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b58:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8007b5a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007b5c:	e841 2300 	strex	r3, r2, [r1]
 8007b60:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007b62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d1e4      	bne.n	8007b32 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	3308      	adds	r3, #8
 8007b6e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b72:	e853 3f00 	ldrex	r3, [r3]
 8007b76:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007b78:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007b7a:	4b56      	ldr	r3, [pc, #344]	; (8007cd4 <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 8007b7c:	4013      	ands	r3, r2
 8007b7e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	3308      	adds	r3, #8
 8007b86:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007b88:	657a      	str	r2, [r7, #84]	; 0x54
 8007b8a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b8c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007b8e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007b90:	e841 2300 	strex	r3, r2, [r1]
 8007b94:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007b96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d1e5      	bne.n	8007b68 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2220      	movs	r2, #32
 8007ba0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007bae:	2b01      	cmp	r3, #1
 8007bb0:	d12e      	bne.n	8007c10 <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bc0:	e853 3f00 	ldrex	r3, [r3]
 8007bc4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bc8:	f023 0310 	bic.w	r3, r3, #16
 8007bcc:	67bb      	str	r3, [r7, #120]	; 0x78
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	461a      	mov	r2, r3
 8007bd4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007bd6:	643b      	str	r3, [r7, #64]	; 0x40
 8007bd8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bda:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007bdc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007bde:	e841 2300 	strex	r3, r2, [r1]
 8007be2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d1e6      	bne.n	8007bb8 <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	69db      	ldr	r3, [r3, #28]
 8007bf0:	f003 0310 	and.w	r3, r3, #16
 8007bf4:	2b10      	cmp	r3, #16
 8007bf6:	d103      	bne.n	8007c00 <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	2210      	movs	r2, #16
 8007bfe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007c06:	4619      	mov	r1, r3
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f7fe fc8f 	bl	800652c <HAL_UARTEx_RxEventCallback>
 8007c0e:	e002      	b.n	8007c16 <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f7f8 fe29 	bl	8000868 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007c16:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d006      	beq.n	8007c2c <UART_RxISR_8BIT_FIFOEN+0x248>
 8007c1e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007c22:	f003 0320 	and.w	r3, r3, #32
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	f47f af00 	bne.w	8007a2c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007c32:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007c36:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d045      	beq.n	8007cca <UART_RxISR_8BIT_FIFOEN+0x2e6>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007c44:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007c48:	429a      	cmp	r2, r3
 8007c4a:	d23e      	bcs.n	8007cca <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	3308      	adds	r3, #8
 8007c52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c54:	6a3b      	ldr	r3, [r7, #32]
 8007c56:	e853 3f00 	ldrex	r3, [r3]
 8007c5a:	61fb      	str	r3, [r7, #28]
   return(result);
 8007c5c:	69fb      	ldr	r3, [r7, #28]
 8007c5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007c62:	673b      	str	r3, [r7, #112]	; 0x70
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	3308      	adds	r3, #8
 8007c6a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007c6c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007c6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c74:	e841 2300 	strex	r3, r2, [r1]
 8007c78:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d1e5      	bne.n	8007c4c <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	4a15      	ldr	r2, [pc, #84]	; (8007cd8 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8007c84:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	e853 3f00 	ldrex	r3, [r3]
 8007c92:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	f043 0320 	orr.w	r3, r3, #32
 8007c9a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	461a      	mov	r2, r3
 8007ca2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ca4:	61bb      	str	r3, [r7, #24]
 8007ca6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ca8:	6979      	ldr	r1, [r7, #20]
 8007caa:	69ba      	ldr	r2, [r7, #24]
 8007cac:	e841 2300 	strex	r3, r2, [r1]
 8007cb0:	613b      	str	r3, [r7, #16]
   return(result);
 8007cb2:	693b      	ldr	r3, [r7, #16]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d1e6      	bne.n	8007c86 <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007cb8:	e007      	b.n	8007cca <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	699a      	ldr	r2, [r3, #24]
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f042 0208 	orr.w	r2, r2, #8
 8007cc8:	619a      	str	r2, [r3, #24]
}
 8007cca:	bf00      	nop
 8007ccc:	3798      	adds	r7, #152	; 0x98
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bd80      	pop	{r7, pc}
 8007cd2:	bf00      	nop
 8007cd4:	effffffe 	.word	0xeffffffe
 8007cd8:	08007723 	.word	0x08007723

08007cdc <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b0a8      	sub	sp, #160	; 0xa0
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007cea:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	69db      	ldr	r3, [r3, #28]
 8007cf4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	689b      	ldr	r3, [r3, #8]
 8007d08:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d12:	2b22      	cmp	r3, #34	; 0x22
 8007d14:	f040 8151 	bne.w	8007fba <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007d1e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007d22:	e0f8      	b.n	8007f16 <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d2a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d32:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8007d36:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8007d3a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007d3e:	4013      	ands	r3, r2
 8007d40:	b29a      	uxth	r2, r3
 8007d42:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007d46:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d4c:	1c9a      	adds	r2, r3, #2
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007d58:	b29b      	uxth	r3, r3
 8007d5a:	3b01      	subs	r3, #1
 8007d5c:	b29a      	uxth	r2, r3
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	69db      	ldr	r3, [r3, #28]
 8007d6a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007d6e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007d72:	f003 0307 	and.w	r3, r3, #7
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d053      	beq.n	8007e22 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007d7a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007d7e:	f003 0301 	and.w	r3, r3, #1
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d011      	beq.n	8007daa <UART_RxISR_16BIT_FIFOEN+0xce>
 8007d86:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007d8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d00b      	beq.n	8007daa <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	2201      	movs	r2, #1
 8007d98:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007da0:	f043 0201 	orr.w	r2, r3, #1
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007daa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007dae:	f003 0302 	and.w	r3, r3, #2
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d011      	beq.n	8007dda <UART_RxISR_16BIT_FIFOEN+0xfe>
 8007db6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007dba:	f003 0301 	and.w	r3, r3, #1
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d00b      	beq.n	8007dda <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	2202      	movs	r2, #2
 8007dc8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007dd0:	f043 0204 	orr.w	r2, r3, #4
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007dda:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007dde:	f003 0304 	and.w	r3, r3, #4
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d011      	beq.n	8007e0a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8007de6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007dea:	f003 0301 	and.w	r3, r3, #1
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d00b      	beq.n	8007e0a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	2204      	movs	r2, #4
 8007df8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e00:	f043 0202 	orr.w	r2, r3, #2
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d006      	beq.n	8007e22 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	f7fe fb7f 	bl	8006518 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007e28:	b29b      	uxth	r3, r3
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d173      	bne.n	8007f16 <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007e36:	e853 3f00 	ldrex	r3, [r3]
 8007e3a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007e3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e3e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e42:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	461a      	mov	r2, r3
 8007e4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007e50:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007e52:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e54:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007e56:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007e58:	e841 2300 	strex	r3, r2, [r1]
 8007e5c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007e5e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d1e4      	bne.n	8007e2e <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	3308      	adds	r3, #8
 8007e6a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e6e:	e853 3f00 	ldrex	r3, [r3]
 8007e72:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007e74:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007e76:	4b57      	ldr	r3, [pc, #348]	; (8007fd4 <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 8007e78:	4013      	ands	r3, r2
 8007e7a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	3308      	adds	r3, #8
 8007e84:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007e88:	65ba      	str	r2, [r7, #88]	; 0x58
 8007e8a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e8c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007e8e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007e90:	e841 2300 	strex	r3, r2, [r1]
 8007e94:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007e96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d1e3      	bne.n	8007e64 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2220      	movs	r2, #32
 8007ea0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007eae:	2b01      	cmp	r3, #1
 8007eb0:	d12e      	bne.n	8007f10 <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ec0:	e853 3f00 	ldrex	r3, [r3]
 8007ec4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007ec6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ec8:	f023 0310 	bic.w	r3, r3, #16
 8007ecc:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	461a      	mov	r2, r3
 8007ed4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007ed6:	647b      	str	r3, [r7, #68]	; 0x44
 8007ed8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eda:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007edc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007ede:	e841 2300 	strex	r3, r2, [r1]
 8007ee2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007ee4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d1e6      	bne.n	8007eb8 <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	69db      	ldr	r3, [r3, #28]
 8007ef0:	f003 0310 	and.w	r3, r3, #16
 8007ef4:	2b10      	cmp	r3, #16
 8007ef6:	d103      	bne.n	8007f00 <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	2210      	movs	r2, #16
 8007efe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007f06:	4619      	mov	r1, r3
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	f7fe fb0f 	bl	800652c <HAL_UARTEx_RxEventCallback>
 8007f0e:	e002      	b.n	8007f16 <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	f7f8 fca9 	bl	8000868 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007f16:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d006      	beq.n	8007f2c <UART_RxISR_16BIT_FIFOEN+0x250>
 8007f1e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007f22:	f003 0320 	and.w	r3, r3, #32
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	f47f aefc 	bne.w	8007d24 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007f32:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007f36:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d045      	beq.n	8007fca <UART_RxISR_16BIT_FIFOEN+0x2ee>
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007f44:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8007f48:	429a      	cmp	r2, r3
 8007f4a:	d23e      	bcs.n	8007fca <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	3308      	adds	r3, #8
 8007f52:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f56:	e853 3f00 	ldrex	r3, [r3]
 8007f5a:	623b      	str	r3, [r7, #32]
   return(result);
 8007f5c:	6a3b      	ldr	r3, [r7, #32]
 8007f5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007f62:	677b      	str	r3, [r7, #116]	; 0x74
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	3308      	adds	r3, #8
 8007f6a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007f6c:	633a      	str	r2, [r7, #48]	; 0x30
 8007f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f70:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007f72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f74:	e841 2300 	strex	r3, r2, [r1]
 8007f78:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d1e5      	bne.n	8007f4c <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	4a15      	ldr	r2, [pc, #84]	; (8007fd8 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8007f84:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f8c:	693b      	ldr	r3, [r7, #16]
 8007f8e:	e853 3f00 	ldrex	r3, [r3]
 8007f92:	60fb      	str	r3, [r7, #12]
   return(result);
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	f043 0320 	orr.w	r3, r3, #32
 8007f9a:	673b      	str	r3, [r7, #112]	; 0x70
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	461a      	mov	r2, r3
 8007fa2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007fa4:	61fb      	str	r3, [r7, #28]
 8007fa6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fa8:	69b9      	ldr	r1, [r7, #24]
 8007faa:	69fa      	ldr	r2, [r7, #28]
 8007fac:	e841 2300 	strex	r3, r2, [r1]
 8007fb0:	617b      	str	r3, [r7, #20]
   return(result);
 8007fb2:	697b      	ldr	r3, [r7, #20]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d1e6      	bne.n	8007f86 <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007fb8:	e007      	b.n	8007fca <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	699a      	ldr	r2, [r3, #24]
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f042 0208 	orr.w	r2, r2, #8
 8007fc8:	619a      	str	r2, [r3, #24]
}
 8007fca:	bf00      	nop
 8007fcc:	37a0      	adds	r7, #160	; 0xa0
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	bd80      	pop	{r7, pc}
 8007fd2:	bf00      	nop
 8007fd4:	effffffe 	.word	0xeffffffe
 8007fd8:	08007883 	.word	0x08007883

08007fdc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007fdc:	b480      	push	{r7}
 8007fde:	b083      	sub	sp, #12
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007fe4:	bf00      	nop
 8007fe6:	370c      	adds	r7, #12
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fee:	4770      	bx	lr

08007ff0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	b083      	sub	sp, #12
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007ff8:	bf00      	nop
 8007ffa:	370c      	adds	r7, #12
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008002:	4770      	bx	lr

08008004 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008004:	b480      	push	{r7}
 8008006:	b083      	sub	sp, #12
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800800c:	bf00      	nop
 800800e:	370c      	adds	r7, #12
 8008010:	46bd      	mov	sp, r7
 8008012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008016:	4770      	bx	lr

08008018 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008018:	b480      	push	{r7}
 800801a:	b085      	sub	sp, #20
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008026:	2b01      	cmp	r3, #1
 8008028:	d101      	bne.n	800802e <HAL_UARTEx_DisableFifoMode+0x16>
 800802a:	2302      	movs	r3, #2
 800802c:	e027      	b.n	800807e <HAL_UARTEx_DisableFifoMode+0x66>
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2201      	movs	r2, #1
 8008032:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2224      	movs	r2, #36	; 0x24
 800803a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	681a      	ldr	r2, [r3, #0]
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f022 0201 	bic.w	r2, r2, #1
 8008054:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800805c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2200      	movs	r2, #0
 8008062:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	68fa      	ldr	r2, [r7, #12]
 800806a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2220      	movs	r2, #32
 8008070:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2200      	movs	r2, #0
 8008078:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800807c:	2300      	movs	r3, #0
}
 800807e:	4618      	mov	r0, r3
 8008080:	3714      	adds	r7, #20
 8008082:	46bd      	mov	sp, r7
 8008084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008088:	4770      	bx	lr

0800808a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800808a:	b580      	push	{r7, lr}
 800808c:	b084      	sub	sp, #16
 800808e:	af00      	add	r7, sp, #0
 8008090:	6078      	str	r0, [r7, #4]
 8008092:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800809a:	2b01      	cmp	r3, #1
 800809c:	d101      	bne.n	80080a2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800809e:	2302      	movs	r3, #2
 80080a0:	e02d      	b.n	80080fe <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2201      	movs	r2, #1
 80080a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2224      	movs	r2, #36	; 0x24
 80080ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	681a      	ldr	r2, [r3, #0]
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f022 0201 	bic.w	r2, r2, #1
 80080c8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	689b      	ldr	r3, [r3, #8]
 80080d0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	683a      	ldr	r2, [r7, #0]
 80080da:	430a      	orrs	r2, r1
 80080dc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f000 f850 	bl	8008184 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	68fa      	ldr	r2, [r7, #12]
 80080ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2220      	movs	r2, #32
 80080f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2200      	movs	r2, #0
 80080f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80080fc:	2300      	movs	r3, #0
}
 80080fe:	4618      	mov	r0, r3
 8008100:	3710      	adds	r7, #16
 8008102:	46bd      	mov	sp, r7
 8008104:	bd80      	pop	{r7, pc}

08008106 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008106:	b580      	push	{r7, lr}
 8008108:	b084      	sub	sp, #16
 800810a:	af00      	add	r7, sp, #0
 800810c:	6078      	str	r0, [r7, #4]
 800810e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008116:	2b01      	cmp	r3, #1
 8008118:	d101      	bne.n	800811e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800811a:	2302      	movs	r3, #2
 800811c:	e02d      	b.n	800817a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2201      	movs	r2, #1
 8008122:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2224      	movs	r2, #36	; 0x24
 800812a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	681a      	ldr	r2, [r3, #0]
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f022 0201 	bic.w	r2, r2, #1
 8008144:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	689b      	ldr	r3, [r3, #8]
 800814c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	683a      	ldr	r2, [r7, #0]
 8008156:	430a      	orrs	r2, r1
 8008158:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f000 f812 	bl	8008184 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	68fa      	ldr	r2, [r7, #12]
 8008166:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2220      	movs	r2, #32
 800816c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2200      	movs	r2, #0
 8008174:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008178:	2300      	movs	r3, #0
}
 800817a:	4618      	mov	r0, r3
 800817c:	3710      	adds	r7, #16
 800817e:	46bd      	mov	sp, r7
 8008180:	bd80      	pop	{r7, pc}
	...

08008184 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008184:	b480      	push	{r7}
 8008186:	b085      	sub	sp, #20
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008190:	2b00      	cmp	r3, #0
 8008192:	d108      	bne.n	80081a6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2201      	movs	r2, #1
 8008198:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2201      	movs	r2, #1
 80081a0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80081a4:	e031      	b.n	800820a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80081a6:	2310      	movs	r3, #16
 80081a8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80081aa:	2310      	movs	r3, #16
 80081ac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	689b      	ldr	r3, [r3, #8]
 80081b4:	0e5b      	lsrs	r3, r3, #25
 80081b6:	b2db      	uxtb	r3, r3
 80081b8:	f003 0307 	and.w	r3, r3, #7
 80081bc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	689b      	ldr	r3, [r3, #8]
 80081c4:	0f5b      	lsrs	r3, r3, #29
 80081c6:	b2db      	uxtb	r3, r3
 80081c8:	f003 0307 	and.w	r3, r3, #7
 80081cc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80081ce:	7bbb      	ldrb	r3, [r7, #14]
 80081d0:	7b3a      	ldrb	r2, [r7, #12]
 80081d2:	4911      	ldr	r1, [pc, #68]	; (8008218 <UARTEx_SetNbDataToProcess+0x94>)
 80081d4:	5c8a      	ldrb	r2, [r1, r2]
 80081d6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80081da:	7b3a      	ldrb	r2, [r7, #12]
 80081dc:	490f      	ldr	r1, [pc, #60]	; (800821c <UARTEx_SetNbDataToProcess+0x98>)
 80081de:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80081e0:	fb93 f3f2 	sdiv	r3, r3, r2
 80081e4:	b29a      	uxth	r2, r3
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80081ec:	7bfb      	ldrb	r3, [r7, #15]
 80081ee:	7b7a      	ldrb	r2, [r7, #13]
 80081f0:	4909      	ldr	r1, [pc, #36]	; (8008218 <UARTEx_SetNbDataToProcess+0x94>)
 80081f2:	5c8a      	ldrb	r2, [r1, r2]
 80081f4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80081f8:	7b7a      	ldrb	r2, [r7, #13]
 80081fa:	4908      	ldr	r1, [pc, #32]	; (800821c <UARTEx_SetNbDataToProcess+0x98>)
 80081fc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80081fe:	fb93 f3f2 	sdiv	r3, r3, r2
 8008202:	b29a      	uxth	r2, r3
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800820a:	bf00      	nop
 800820c:	3714      	adds	r7, #20
 800820e:	46bd      	mov	sp, r7
 8008210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008214:	4770      	bx	lr
 8008216:	bf00      	nop
 8008218:	080098c8 	.word	0x080098c8
 800821c:	080098d0 	.word	0x080098d0

08008220 <__errno>:
 8008220:	4b01      	ldr	r3, [pc, #4]	; (8008228 <__errno+0x8>)
 8008222:	6818      	ldr	r0, [r3, #0]
 8008224:	4770      	bx	lr
 8008226:	bf00      	nop
 8008228:	24000010 	.word	0x24000010

0800822c <__libc_init_array>:
 800822c:	b570      	push	{r4, r5, r6, lr}
 800822e:	4d0d      	ldr	r5, [pc, #52]	; (8008264 <__libc_init_array+0x38>)
 8008230:	4c0d      	ldr	r4, [pc, #52]	; (8008268 <__libc_init_array+0x3c>)
 8008232:	1b64      	subs	r4, r4, r5
 8008234:	10a4      	asrs	r4, r4, #2
 8008236:	2600      	movs	r6, #0
 8008238:	42a6      	cmp	r6, r4
 800823a:	d109      	bne.n	8008250 <__libc_init_array+0x24>
 800823c:	4d0b      	ldr	r5, [pc, #44]	; (800826c <__libc_init_array+0x40>)
 800823e:	4c0c      	ldr	r4, [pc, #48]	; (8008270 <__libc_init_array+0x44>)
 8008240:	f001 fa62 	bl	8009708 <_init>
 8008244:	1b64      	subs	r4, r4, r5
 8008246:	10a4      	asrs	r4, r4, #2
 8008248:	2600      	movs	r6, #0
 800824a:	42a6      	cmp	r6, r4
 800824c:	d105      	bne.n	800825a <__libc_init_array+0x2e>
 800824e:	bd70      	pop	{r4, r5, r6, pc}
 8008250:	f855 3b04 	ldr.w	r3, [r5], #4
 8008254:	4798      	blx	r3
 8008256:	3601      	adds	r6, #1
 8008258:	e7ee      	b.n	8008238 <__libc_init_array+0xc>
 800825a:	f855 3b04 	ldr.w	r3, [r5], #4
 800825e:	4798      	blx	r3
 8008260:	3601      	adds	r6, #1
 8008262:	e7f2      	b.n	800824a <__libc_init_array+0x1e>
 8008264:	08009a28 	.word	0x08009a28
 8008268:	08009a28 	.word	0x08009a28
 800826c:	08009a28 	.word	0x08009a28
 8008270:	08009a2c 	.word	0x08009a2c

08008274 <memset>:
 8008274:	4402      	add	r2, r0
 8008276:	4603      	mov	r3, r0
 8008278:	4293      	cmp	r3, r2
 800827a:	d100      	bne.n	800827e <memset+0xa>
 800827c:	4770      	bx	lr
 800827e:	f803 1b01 	strb.w	r1, [r3], #1
 8008282:	e7f9      	b.n	8008278 <memset+0x4>

08008284 <srand>:
 8008284:	b538      	push	{r3, r4, r5, lr}
 8008286:	4b10      	ldr	r3, [pc, #64]	; (80082c8 <srand+0x44>)
 8008288:	681d      	ldr	r5, [r3, #0]
 800828a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800828c:	4604      	mov	r4, r0
 800828e:	b9b3      	cbnz	r3, 80082be <srand+0x3a>
 8008290:	2018      	movs	r0, #24
 8008292:	f000 f8b3 	bl	80083fc <malloc>
 8008296:	4602      	mov	r2, r0
 8008298:	63a8      	str	r0, [r5, #56]	; 0x38
 800829a:	b920      	cbnz	r0, 80082a6 <srand+0x22>
 800829c:	4b0b      	ldr	r3, [pc, #44]	; (80082cc <srand+0x48>)
 800829e:	480c      	ldr	r0, [pc, #48]	; (80082d0 <srand+0x4c>)
 80082a0:	2142      	movs	r1, #66	; 0x42
 80082a2:	f000 f87b 	bl	800839c <__assert_func>
 80082a6:	490b      	ldr	r1, [pc, #44]	; (80082d4 <srand+0x50>)
 80082a8:	4b0b      	ldr	r3, [pc, #44]	; (80082d8 <srand+0x54>)
 80082aa:	e9c0 1300 	strd	r1, r3, [r0]
 80082ae:	4b0b      	ldr	r3, [pc, #44]	; (80082dc <srand+0x58>)
 80082b0:	6083      	str	r3, [r0, #8]
 80082b2:	230b      	movs	r3, #11
 80082b4:	8183      	strh	r3, [r0, #12]
 80082b6:	2100      	movs	r1, #0
 80082b8:	2001      	movs	r0, #1
 80082ba:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80082be:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80082c0:	2200      	movs	r2, #0
 80082c2:	611c      	str	r4, [r3, #16]
 80082c4:	615a      	str	r2, [r3, #20]
 80082c6:	bd38      	pop	{r3, r4, r5, pc}
 80082c8:	24000010 	.word	0x24000010
 80082cc:	080098dc 	.word	0x080098dc
 80082d0:	080098f3 	.word	0x080098f3
 80082d4:	abcd330e 	.word	0xabcd330e
 80082d8:	e66d1234 	.word	0xe66d1234
 80082dc:	0005deec 	.word	0x0005deec

080082e0 <rand>:
 80082e0:	4b16      	ldr	r3, [pc, #88]	; (800833c <rand+0x5c>)
 80082e2:	b510      	push	{r4, lr}
 80082e4:	681c      	ldr	r4, [r3, #0]
 80082e6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80082e8:	b9b3      	cbnz	r3, 8008318 <rand+0x38>
 80082ea:	2018      	movs	r0, #24
 80082ec:	f000 f886 	bl	80083fc <malloc>
 80082f0:	63a0      	str	r0, [r4, #56]	; 0x38
 80082f2:	b928      	cbnz	r0, 8008300 <rand+0x20>
 80082f4:	4602      	mov	r2, r0
 80082f6:	4b12      	ldr	r3, [pc, #72]	; (8008340 <rand+0x60>)
 80082f8:	4812      	ldr	r0, [pc, #72]	; (8008344 <rand+0x64>)
 80082fa:	214e      	movs	r1, #78	; 0x4e
 80082fc:	f000 f84e 	bl	800839c <__assert_func>
 8008300:	4a11      	ldr	r2, [pc, #68]	; (8008348 <rand+0x68>)
 8008302:	4b12      	ldr	r3, [pc, #72]	; (800834c <rand+0x6c>)
 8008304:	e9c0 2300 	strd	r2, r3, [r0]
 8008308:	4b11      	ldr	r3, [pc, #68]	; (8008350 <rand+0x70>)
 800830a:	6083      	str	r3, [r0, #8]
 800830c:	230b      	movs	r3, #11
 800830e:	8183      	strh	r3, [r0, #12]
 8008310:	2201      	movs	r2, #1
 8008312:	2300      	movs	r3, #0
 8008314:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8008318:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800831a:	4a0e      	ldr	r2, [pc, #56]	; (8008354 <rand+0x74>)
 800831c:	6920      	ldr	r0, [r4, #16]
 800831e:	6963      	ldr	r3, [r4, #20]
 8008320:	490d      	ldr	r1, [pc, #52]	; (8008358 <rand+0x78>)
 8008322:	4342      	muls	r2, r0
 8008324:	fb01 2203 	mla	r2, r1, r3, r2
 8008328:	fba0 0101 	umull	r0, r1, r0, r1
 800832c:	1c43      	adds	r3, r0, #1
 800832e:	eb42 0001 	adc.w	r0, r2, r1
 8008332:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8008336:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800833a:	bd10      	pop	{r4, pc}
 800833c:	24000010 	.word	0x24000010
 8008340:	080098dc 	.word	0x080098dc
 8008344:	080098f3 	.word	0x080098f3
 8008348:	abcd330e 	.word	0xabcd330e
 800834c:	e66d1234 	.word	0xe66d1234
 8008350:	0005deec 	.word	0x0005deec
 8008354:	5851f42d 	.word	0x5851f42d
 8008358:	4c957f2d 	.word	0x4c957f2d

0800835c <siprintf>:
 800835c:	b40e      	push	{r1, r2, r3}
 800835e:	b500      	push	{lr}
 8008360:	b09c      	sub	sp, #112	; 0x70
 8008362:	ab1d      	add	r3, sp, #116	; 0x74
 8008364:	9002      	str	r0, [sp, #8]
 8008366:	9006      	str	r0, [sp, #24]
 8008368:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800836c:	4809      	ldr	r0, [pc, #36]	; (8008394 <siprintf+0x38>)
 800836e:	9107      	str	r1, [sp, #28]
 8008370:	9104      	str	r1, [sp, #16]
 8008372:	4909      	ldr	r1, [pc, #36]	; (8008398 <siprintf+0x3c>)
 8008374:	f853 2b04 	ldr.w	r2, [r3], #4
 8008378:	9105      	str	r1, [sp, #20]
 800837a:	6800      	ldr	r0, [r0, #0]
 800837c:	9301      	str	r3, [sp, #4]
 800837e:	a902      	add	r1, sp, #8
 8008380:	f000 f980 	bl	8008684 <_svfiprintf_r>
 8008384:	9b02      	ldr	r3, [sp, #8]
 8008386:	2200      	movs	r2, #0
 8008388:	701a      	strb	r2, [r3, #0]
 800838a:	b01c      	add	sp, #112	; 0x70
 800838c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008390:	b003      	add	sp, #12
 8008392:	4770      	bx	lr
 8008394:	24000010 	.word	0x24000010
 8008398:	ffff0208 	.word	0xffff0208

0800839c <__assert_func>:
 800839c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800839e:	4614      	mov	r4, r2
 80083a0:	461a      	mov	r2, r3
 80083a2:	4b09      	ldr	r3, [pc, #36]	; (80083c8 <__assert_func+0x2c>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	4605      	mov	r5, r0
 80083a8:	68d8      	ldr	r0, [r3, #12]
 80083aa:	b14c      	cbz	r4, 80083c0 <__assert_func+0x24>
 80083ac:	4b07      	ldr	r3, [pc, #28]	; (80083cc <__assert_func+0x30>)
 80083ae:	9100      	str	r1, [sp, #0]
 80083b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80083b4:	4906      	ldr	r1, [pc, #24]	; (80083d0 <__assert_func+0x34>)
 80083b6:	462b      	mov	r3, r5
 80083b8:	f000 f80e 	bl	80083d8 <fiprintf>
 80083bc:	f000 fe20 	bl	8009000 <abort>
 80083c0:	4b04      	ldr	r3, [pc, #16]	; (80083d4 <__assert_func+0x38>)
 80083c2:	461c      	mov	r4, r3
 80083c4:	e7f3      	b.n	80083ae <__assert_func+0x12>
 80083c6:	bf00      	nop
 80083c8:	24000010 	.word	0x24000010
 80083cc:	0800994e 	.word	0x0800994e
 80083d0:	0800995b 	.word	0x0800995b
 80083d4:	08009989 	.word	0x08009989

080083d8 <fiprintf>:
 80083d8:	b40e      	push	{r1, r2, r3}
 80083da:	b503      	push	{r0, r1, lr}
 80083dc:	4601      	mov	r1, r0
 80083de:	ab03      	add	r3, sp, #12
 80083e0:	4805      	ldr	r0, [pc, #20]	; (80083f8 <fiprintf+0x20>)
 80083e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80083e6:	6800      	ldr	r0, [r0, #0]
 80083e8:	9301      	str	r3, [sp, #4]
 80083ea:	f000 fa75 	bl	80088d8 <_vfiprintf_r>
 80083ee:	b002      	add	sp, #8
 80083f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80083f4:	b003      	add	sp, #12
 80083f6:	4770      	bx	lr
 80083f8:	24000010 	.word	0x24000010

080083fc <malloc>:
 80083fc:	4b02      	ldr	r3, [pc, #8]	; (8008408 <malloc+0xc>)
 80083fe:	4601      	mov	r1, r0
 8008400:	6818      	ldr	r0, [r3, #0]
 8008402:	f000 b86f 	b.w	80084e4 <_malloc_r>
 8008406:	bf00      	nop
 8008408:	24000010 	.word	0x24000010

0800840c <_free_r>:
 800840c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800840e:	2900      	cmp	r1, #0
 8008410:	d044      	beq.n	800849c <_free_r+0x90>
 8008412:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008416:	9001      	str	r0, [sp, #4]
 8008418:	2b00      	cmp	r3, #0
 800841a:	f1a1 0404 	sub.w	r4, r1, #4
 800841e:	bfb8      	it	lt
 8008420:	18e4      	addlt	r4, r4, r3
 8008422:	f001 f83d 	bl	80094a0 <__malloc_lock>
 8008426:	4a1e      	ldr	r2, [pc, #120]	; (80084a0 <_free_r+0x94>)
 8008428:	9801      	ldr	r0, [sp, #4]
 800842a:	6813      	ldr	r3, [r2, #0]
 800842c:	b933      	cbnz	r3, 800843c <_free_r+0x30>
 800842e:	6063      	str	r3, [r4, #4]
 8008430:	6014      	str	r4, [r2, #0]
 8008432:	b003      	add	sp, #12
 8008434:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008438:	f001 b838 	b.w	80094ac <__malloc_unlock>
 800843c:	42a3      	cmp	r3, r4
 800843e:	d908      	bls.n	8008452 <_free_r+0x46>
 8008440:	6825      	ldr	r5, [r4, #0]
 8008442:	1961      	adds	r1, r4, r5
 8008444:	428b      	cmp	r3, r1
 8008446:	bf01      	itttt	eq
 8008448:	6819      	ldreq	r1, [r3, #0]
 800844a:	685b      	ldreq	r3, [r3, #4]
 800844c:	1949      	addeq	r1, r1, r5
 800844e:	6021      	streq	r1, [r4, #0]
 8008450:	e7ed      	b.n	800842e <_free_r+0x22>
 8008452:	461a      	mov	r2, r3
 8008454:	685b      	ldr	r3, [r3, #4]
 8008456:	b10b      	cbz	r3, 800845c <_free_r+0x50>
 8008458:	42a3      	cmp	r3, r4
 800845a:	d9fa      	bls.n	8008452 <_free_r+0x46>
 800845c:	6811      	ldr	r1, [r2, #0]
 800845e:	1855      	adds	r5, r2, r1
 8008460:	42a5      	cmp	r5, r4
 8008462:	d10b      	bne.n	800847c <_free_r+0x70>
 8008464:	6824      	ldr	r4, [r4, #0]
 8008466:	4421      	add	r1, r4
 8008468:	1854      	adds	r4, r2, r1
 800846a:	42a3      	cmp	r3, r4
 800846c:	6011      	str	r1, [r2, #0]
 800846e:	d1e0      	bne.n	8008432 <_free_r+0x26>
 8008470:	681c      	ldr	r4, [r3, #0]
 8008472:	685b      	ldr	r3, [r3, #4]
 8008474:	6053      	str	r3, [r2, #4]
 8008476:	4421      	add	r1, r4
 8008478:	6011      	str	r1, [r2, #0]
 800847a:	e7da      	b.n	8008432 <_free_r+0x26>
 800847c:	d902      	bls.n	8008484 <_free_r+0x78>
 800847e:	230c      	movs	r3, #12
 8008480:	6003      	str	r3, [r0, #0]
 8008482:	e7d6      	b.n	8008432 <_free_r+0x26>
 8008484:	6825      	ldr	r5, [r4, #0]
 8008486:	1961      	adds	r1, r4, r5
 8008488:	428b      	cmp	r3, r1
 800848a:	bf04      	itt	eq
 800848c:	6819      	ldreq	r1, [r3, #0]
 800848e:	685b      	ldreq	r3, [r3, #4]
 8008490:	6063      	str	r3, [r4, #4]
 8008492:	bf04      	itt	eq
 8008494:	1949      	addeq	r1, r1, r5
 8008496:	6021      	streq	r1, [r4, #0]
 8008498:	6054      	str	r4, [r2, #4]
 800849a:	e7ca      	b.n	8008432 <_free_r+0x26>
 800849c:	b003      	add	sp, #12
 800849e:	bd30      	pop	{r4, r5, pc}
 80084a0:	24000388 	.word	0x24000388

080084a4 <sbrk_aligned>:
 80084a4:	b570      	push	{r4, r5, r6, lr}
 80084a6:	4e0e      	ldr	r6, [pc, #56]	; (80084e0 <sbrk_aligned+0x3c>)
 80084a8:	460c      	mov	r4, r1
 80084aa:	6831      	ldr	r1, [r6, #0]
 80084ac:	4605      	mov	r5, r0
 80084ae:	b911      	cbnz	r1, 80084b6 <sbrk_aligned+0x12>
 80084b0:	f000 fcd6 	bl	8008e60 <_sbrk_r>
 80084b4:	6030      	str	r0, [r6, #0]
 80084b6:	4621      	mov	r1, r4
 80084b8:	4628      	mov	r0, r5
 80084ba:	f000 fcd1 	bl	8008e60 <_sbrk_r>
 80084be:	1c43      	adds	r3, r0, #1
 80084c0:	d00a      	beq.n	80084d8 <sbrk_aligned+0x34>
 80084c2:	1cc4      	adds	r4, r0, #3
 80084c4:	f024 0403 	bic.w	r4, r4, #3
 80084c8:	42a0      	cmp	r0, r4
 80084ca:	d007      	beq.n	80084dc <sbrk_aligned+0x38>
 80084cc:	1a21      	subs	r1, r4, r0
 80084ce:	4628      	mov	r0, r5
 80084d0:	f000 fcc6 	bl	8008e60 <_sbrk_r>
 80084d4:	3001      	adds	r0, #1
 80084d6:	d101      	bne.n	80084dc <sbrk_aligned+0x38>
 80084d8:	f04f 34ff 	mov.w	r4, #4294967295
 80084dc:	4620      	mov	r0, r4
 80084de:	bd70      	pop	{r4, r5, r6, pc}
 80084e0:	2400038c 	.word	0x2400038c

080084e4 <_malloc_r>:
 80084e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084e8:	1ccd      	adds	r5, r1, #3
 80084ea:	f025 0503 	bic.w	r5, r5, #3
 80084ee:	3508      	adds	r5, #8
 80084f0:	2d0c      	cmp	r5, #12
 80084f2:	bf38      	it	cc
 80084f4:	250c      	movcc	r5, #12
 80084f6:	2d00      	cmp	r5, #0
 80084f8:	4607      	mov	r7, r0
 80084fa:	db01      	blt.n	8008500 <_malloc_r+0x1c>
 80084fc:	42a9      	cmp	r1, r5
 80084fe:	d905      	bls.n	800850c <_malloc_r+0x28>
 8008500:	230c      	movs	r3, #12
 8008502:	603b      	str	r3, [r7, #0]
 8008504:	2600      	movs	r6, #0
 8008506:	4630      	mov	r0, r6
 8008508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800850c:	4e2e      	ldr	r6, [pc, #184]	; (80085c8 <_malloc_r+0xe4>)
 800850e:	f000 ffc7 	bl	80094a0 <__malloc_lock>
 8008512:	6833      	ldr	r3, [r6, #0]
 8008514:	461c      	mov	r4, r3
 8008516:	bb34      	cbnz	r4, 8008566 <_malloc_r+0x82>
 8008518:	4629      	mov	r1, r5
 800851a:	4638      	mov	r0, r7
 800851c:	f7ff ffc2 	bl	80084a4 <sbrk_aligned>
 8008520:	1c43      	adds	r3, r0, #1
 8008522:	4604      	mov	r4, r0
 8008524:	d14d      	bne.n	80085c2 <_malloc_r+0xde>
 8008526:	6834      	ldr	r4, [r6, #0]
 8008528:	4626      	mov	r6, r4
 800852a:	2e00      	cmp	r6, #0
 800852c:	d140      	bne.n	80085b0 <_malloc_r+0xcc>
 800852e:	6823      	ldr	r3, [r4, #0]
 8008530:	4631      	mov	r1, r6
 8008532:	4638      	mov	r0, r7
 8008534:	eb04 0803 	add.w	r8, r4, r3
 8008538:	f000 fc92 	bl	8008e60 <_sbrk_r>
 800853c:	4580      	cmp	r8, r0
 800853e:	d13a      	bne.n	80085b6 <_malloc_r+0xd2>
 8008540:	6821      	ldr	r1, [r4, #0]
 8008542:	3503      	adds	r5, #3
 8008544:	1a6d      	subs	r5, r5, r1
 8008546:	f025 0503 	bic.w	r5, r5, #3
 800854a:	3508      	adds	r5, #8
 800854c:	2d0c      	cmp	r5, #12
 800854e:	bf38      	it	cc
 8008550:	250c      	movcc	r5, #12
 8008552:	4629      	mov	r1, r5
 8008554:	4638      	mov	r0, r7
 8008556:	f7ff ffa5 	bl	80084a4 <sbrk_aligned>
 800855a:	3001      	adds	r0, #1
 800855c:	d02b      	beq.n	80085b6 <_malloc_r+0xd2>
 800855e:	6823      	ldr	r3, [r4, #0]
 8008560:	442b      	add	r3, r5
 8008562:	6023      	str	r3, [r4, #0]
 8008564:	e00e      	b.n	8008584 <_malloc_r+0xa0>
 8008566:	6822      	ldr	r2, [r4, #0]
 8008568:	1b52      	subs	r2, r2, r5
 800856a:	d41e      	bmi.n	80085aa <_malloc_r+0xc6>
 800856c:	2a0b      	cmp	r2, #11
 800856e:	d916      	bls.n	800859e <_malloc_r+0xba>
 8008570:	1961      	adds	r1, r4, r5
 8008572:	42a3      	cmp	r3, r4
 8008574:	6025      	str	r5, [r4, #0]
 8008576:	bf18      	it	ne
 8008578:	6059      	strne	r1, [r3, #4]
 800857a:	6863      	ldr	r3, [r4, #4]
 800857c:	bf08      	it	eq
 800857e:	6031      	streq	r1, [r6, #0]
 8008580:	5162      	str	r2, [r4, r5]
 8008582:	604b      	str	r3, [r1, #4]
 8008584:	4638      	mov	r0, r7
 8008586:	f104 060b 	add.w	r6, r4, #11
 800858a:	f000 ff8f 	bl	80094ac <__malloc_unlock>
 800858e:	f026 0607 	bic.w	r6, r6, #7
 8008592:	1d23      	adds	r3, r4, #4
 8008594:	1af2      	subs	r2, r6, r3
 8008596:	d0b6      	beq.n	8008506 <_malloc_r+0x22>
 8008598:	1b9b      	subs	r3, r3, r6
 800859a:	50a3      	str	r3, [r4, r2]
 800859c:	e7b3      	b.n	8008506 <_malloc_r+0x22>
 800859e:	6862      	ldr	r2, [r4, #4]
 80085a0:	42a3      	cmp	r3, r4
 80085a2:	bf0c      	ite	eq
 80085a4:	6032      	streq	r2, [r6, #0]
 80085a6:	605a      	strne	r2, [r3, #4]
 80085a8:	e7ec      	b.n	8008584 <_malloc_r+0xa0>
 80085aa:	4623      	mov	r3, r4
 80085ac:	6864      	ldr	r4, [r4, #4]
 80085ae:	e7b2      	b.n	8008516 <_malloc_r+0x32>
 80085b0:	4634      	mov	r4, r6
 80085b2:	6876      	ldr	r6, [r6, #4]
 80085b4:	e7b9      	b.n	800852a <_malloc_r+0x46>
 80085b6:	230c      	movs	r3, #12
 80085b8:	603b      	str	r3, [r7, #0]
 80085ba:	4638      	mov	r0, r7
 80085bc:	f000 ff76 	bl	80094ac <__malloc_unlock>
 80085c0:	e7a1      	b.n	8008506 <_malloc_r+0x22>
 80085c2:	6025      	str	r5, [r4, #0]
 80085c4:	e7de      	b.n	8008584 <_malloc_r+0xa0>
 80085c6:	bf00      	nop
 80085c8:	24000388 	.word	0x24000388

080085cc <__ssputs_r>:
 80085cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085d0:	688e      	ldr	r6, [r1, #8]
 80085d2:	429e      	cmp	r6, r3
 80085d4:	4682      	mov	sl, r0
 80085d6:	460c      	mov	r4, r1
 80085d8:	4690      	mov	r8, r2
 80085da:	461f      	mov	r7, r3
 80085dc:	d838      	bhi.n	8008650 <__ssputs_r+0x84>
 80085de:	898a      	ldrh	r2, [r1, #12]
 80085e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80085e4:	d032      	beq.n	800864c <__ssputs_r+0x80>
 80085e6:	6825      	ldr	r5, [r4, #0]
 80085e8:	6909      	ldr	r1, [r1, #16]
 80085ea:	eba5 0901 	sub.w	r9, r5, r1
 80085ee:	6965      	ldr	r5, [r4, #20]
 80085f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80085f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80085f8:	3301      	adds	r3, #1
 80085fa:	444b      	add	r3, r9
 80085fc:	106d      	asrs	r5, r5, #1
 80085fe:	429d      	cmp	r5, r3
 8008600:	bf38      	it	cc
 8008602:	461d      	movcc	r5, r3
 8008604:	0553      	lsls	r3, r2, #21
 8008606:	d531      	bpl.n	800866c <__ssputs_r+0xa0>
 8008608:	4629      	mov	r1, r5
 800860a:	f7ff ff6b 	bl	80084e4 <_malloc_r>
 800860e:	4606      	mov	r6, r0
 8008610:	b950      	cbnz	r0, 8008628 <__ssputs_r+0x5c>
 8008612:	230c      	movs	r3, #12
 8008614:	f8ca 3000 	str.w	r3, [sl]
 8008618:	89a3      	ldrh	r3, [r4, #12]
 800861a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800861e:	81a3      	strh	r3, [r4, #12]
 8008620:	f04f 30ff 	mov.w	r0, #4294967295
 8008624:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008628:	6921      	ldr	r1, [r4, #16]
 800862a:	464a      	mov	r2, r9
 800862c:	f000 ff10 	bl	8009450 <memcpy>
 8008630:	89a3      	ldrh	r3, [r4, #12]
 8008632:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008636:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800863a:	81a3      	strh	r3, [r4, #12]
 800863c:	6126      	str	r6, [r4, #16]
 800863e:	6165      	str	r5, [r4, #20]
 8008640:	444e      	add	r6, r9
 8008642:	eba5 0509 	sub.w	r5, r5, r9
 8008646:	6026      	str	r6, [r4, #0]
 8008648:	60a5      	str	r5, [r4, #8]
 800864a:	463e      	mov	r6, r7
 800864c:	42be      	cmp	r6, r7
 800864e:	d900      	bls.n	8008652 <__ssputs_r+0x86>
 8008650:	463e      	mov	r6, r7
 8008652:	6820      	ldr	r0, [r4, #0]
 8008654:	4632      	mov	r2, r6
 8008656:	4641      	mov	r1, r8
 8008658:	f000 ff08 	bl	800946c <memmove>
 800865c:	68a3      	ldr	r3, [r4, #8]
 800865e:	1b9b      	subs	r3, r3, r6
 8008660:	60a3      	str	r3, [r4, #8]
 8008662:	6823      	ldr	r3, [r4, #0]
 8008664:	4433      	add	r3, r6
 8008666:	6023      	str	r3, [r4, #0]
 8008668:	2000      	movs	r0, #0
 800866a:	e7db      	b.n	8008624 <__ssputs_r+0x58>
 800866c:	462a      	mov	r2, r5
 800866e:	f000 ff23 	bl	80094b8 <_realloc_r>
 8008672:	4606      	mov	r6, r0
 8008674:	2800      	cmp	r0, #0
 8008676:	d1e1      	bne.n	800863c <__ssputs_r+0x70>
 8008678:	6921      	ldr	r1, [r4, #16]
 800867a:	4650      	mov	r0, sl
 800867c:	f7ff fec6 	bl	800840c <_free_r>
 8008680:	e7c7      	b.n	8008612 <__ssputs_r+0x46>
	...

08008684 <_svfiprintf_r>:
 8008684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008688:	4698      	mov	r8, r3
 800868a:	898b      	ldrh	r3, [r1, #12]
 800868c:	061b      	lsls	r3, r3, #24
 800868e:	b09d      	sub	sp, #116	; 0x74
 8008690:	4607      	mov	r7, r0
 8008692:	460d      	mov	r5, r1
 8008694:	4614      	mov	r4, r2
 8008696:	d50e      	bpl.n	80086b6 <_svfiprintf_r+0x32>
 8008698:	690b      	ldr	r3, [r1, #16]
 800869a:	b963      	cbnz	r3, 80086b6 <_svfiprintf_r+0x32>
 800869c:	2140      	movs	r1, #64	; 0x40
 800869e:	f7ff ff21 	bl	80084e4 <_malloc_r>
 80086a2:	6028      	str	r0, [r5, #0]
 80086a4:	6128      	str	r0, [r5, #16]
 80086a6:	b920      	cbnz	r0, 80086b2 <_svfiprintf_r+0x2e>
 80086a8:	230c      	movs	r3, #12
 80086aa:	603b      	str	r3, [r7, #0]
 80086ac:	f04f 30ff 	mov.w	r0, #4294967295
 80086b0:	e0d1      	b.n	8008856 <_svfiprintf_r+0x1d2>
 80086b2:	2340      	movs	r3, #64	; 0x40
 80086b4:	616b      	str	r3, [r5, #20]
 80086b6:	2300      	movs	r3, #0
 80086b8:	9309      	str	r3, [sp, #36]	; 0x24
 80086ba:	2320      	movs	r3, #32
 80086bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80086c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80086c4:	2330      	movs	r3, #48	; 0x30
 80086c6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008870 <_svfiprintf_r+0x1ec>
 80086ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80086ce:	f04f 0901 	mov.w	r9, #1
 80086d2:	4623      	mov	r3, r4
 80086d4:	469a      	mov	sl, r3
 80086d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80086da:	b10a      	cbz	r2, 80086e0 <_svfiprintf_r+0x5c>
 80086dc:	2a25      	cmp	r2, #37	; 0x25
 80086de:	d1f9      	bne.n	80086d4 <_svfiprintf_r+0x50>
 80086e0:	ebba 0b04 	subs.w	fp, sl, r4
 80086e4:	d00b      	beq.n	80086fe <_svfiprintf_r+0x7a>
 80086e6:	465b      	mov	r3, fp
 80086e8:	4622      	mov	r2, r4
 80086ea:	4629      	mov	r1, r5
 80086ec:	4638      	mov	r0, r7
 80086ee:	f7ff ff6d 	bl	80085cc <__ssputs_r>
 80086f2:	3001      	adds	r0, #1
 80086f4:	f000 80aa 	beq.w	800884c <_svfiprintf_r+0x1c8>
 80086f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80086fa:	445a      	add	r2, fp
 80086fc:	9209      	str	r2, [sp, #36]	; 0x24
 80086fe:	f89a 3000 	ldrb.w	r3, [sl]
 8008702:	2b00      	cmp	r3, #0
 8008704:	f000 80a2 	beq.w	800884c <_svfiprintf_r+0x1c8>
 8008708:	2300      	movs	r3, #0
 800870a:	f04f 32ff 	mov.w	r2, #4294967295
 800870e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008712:	f10a 0a01 	add.w	sl, sl, #1
 8008716:	9304      	str	r3, [sp, #16]
 8008718:	9307      	str	r3, [sp, #28]
 800871a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800871e:	931a      	str	r3, [sp, #104]	; 0x68
 8008720:	4654      	mov	r4, sl
 8008722:	2205      	movs	r2, #5
 8008724:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008728:	4851      	ldr	r0, [pc, #324]	; (8008870 <_svfiprintf_r+0x1ec>)
 800872a:	f7f7 fde1 	bl	80002f0 <memchr>
 800872e:	9a04      	ldr	r2, [sp, #16]
 8008730:	b9d8      	cbnz	r0, 800876a <_svfiprintf_r+0xe6>
 8008732:	06d0      	lsls	r0, r2, #27
 8008734:	bf44      	itt	mi
 8008736:	2320      	movmi	r3, #32
 8008738:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800873c:	0711      	lsls	r1, r2, #28
 800873e:	bf44      	itt	mi
 8008740:	232b      	movmi	r3, #43	; 0x2b
 8008742:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008746:	f89a 3000 	ldrb.w	r3, [sl]
 800874a:	2b2a      	cmp	r3, #42	; 0x2a
 800874c:	d015      	beq.n	800877a <_svfiprintf_r+0xf6>
 800874e:	9a07      	ldr	r2, [sp, #28]
 8008750:	4654      	mov	r4, sl
 8008752:	2000      	movs	r0, #0
 8008754:	f04f 0c0a 	mov.w	ip, #10
 8008758:	4621      	mov	r1, r4
 800875a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800875e:	3b30      	subs	r3, #48	; 0x30
 8008760:	2b09      	cmp	r3, #9
 8008762:	d94e      	bls.n	8008802 <_svfiprintf_r+0x17e>
 8008764:	b1b0      	cbz	r0, 8008794 <_svfiprintf_r+0x110>
 8008766:	9207      	str	r2, [sp, #28]
 8008768:	e014      	b.n	8008794 <_svfiprintf_r+0x110>
 800876a:	eba0 0308 	sub.w	r3, r0, r8
 800876e:	fa09 f303 	lsl.w	r3, r9, r3
 8008772:	4313      	orrs	r3, r2
 8008774:	9304      	str	r3, [sp, #16]
 8008776:	46a2      	mov	sl, r4
 8008778:	e7d2      	b.n	8008720 <_svfiprintf_r+0x9c>
 800877a:	9b03      	ldr	r3, [sp, #12]
 800877c:	1d19      	adds	r1, r3, #4
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	9103      	str	r1, [sp, #12]
 8008782:	2b00      	cmp	r3, #0
 8008784:	bfbb      	ittet	lt
 8008786:	425b      	neglt	r3, r3
 8008788:	f042 0202 	orrlt.w	r2, r2, #2
 800878c:	9307      	strge	r3, [sp, #28]
 800878e:	9307      	strlt	r3, [sp, #28]
 8008790:	bfb8      	it	lt
 8008792:	9204      	strlt	r2, [sp, #16]
 8008794:	7823      	ldrb	r3, [r4, #0]
 8008796:	2b2e      	cmp	r3, #46	; 0x2e
 8008798:	d10c      	bne.n	80087b4 <_svfiprintf_r+0x130>
 800879a:	7863      	ldrb	r3, [r4, #1]
 800879c:	2b2a      	cmp	r3, #42	; 0x2a
 800879e:	d135      	bne.n	800880c <_svfiprintf_r+0x188>
 80087a0:	9b03      	ldr	r3, [sp, #12]
 80087a2:	1d1a      	adds	r2, r3, #4
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	9203      	str	r2, [sp, #12]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	bfb8      	it	lt
 80087ac:	f04f 33ff 	movlt.w	r3, #4294967295
 80087b0:	3402      	adds	r4, #2
 80087b2:	9305      	str	r3, [sp, #20]
 80087b4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008880 <_svfiprintf_r+0x1fc>
 80087b8:	7821      	ldrb	r1, [r4, #0]
 80087ba:	2203      	movs	r2, #3
 80087bc:	4650      	mov	r0, sl
 80087be:	f7f7 fd97 	bl	80002f0 <memchr>
 80087c2:	b140      	cbz	r0, 80087d6 <_svfiprintf_r+0x152>
 80087c4:	2340      	movs	r3, #64	; 0x40
 80087c6:	eba0 000a 	sub.w	r0, r0, sl
 80087ca:	fa03 f000 	lsl.w	r0, r3, r0
 80087ce:	9b04      	ldr	r3, [sp, #16]
 80087d0:	4303      	orrs	r3, r0
 80087d2:	3401      	adds	r4, #1
 80087d4:	9304      	str	r3, [sp, #16]
 80087d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087da:	4826      	ldr	r0, [pc, #152]	; (8008874 <_svfiprintf_r+0x1f0>)
 80087dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80087e0:	2206      	movs	r2, #6
 80087e2:	f7f7 fd85 	bl	80002f0 <memchr>
 80087e6:	2800      	cmp	r0, #0
 80087e8:	d038      	beq.n	800885c <_svfiprintf_r+0x1d8>
 80087ea:	4b23      	ldr	r3, [pc, #140]	; (8008878 <_svfiprintf_r+0x1f4>)
 80087ec:	bb1b      	cbnz	r3, 8008836 <_svfiprintf_r+0x1b2>
 80087ee:	9b03      	ldr	r3, [sp, #12]
 80087f0:	3307      	adds	r3, #7
 80087f2:	f023 0307 	bic.w	r3, r3, #7
 80087f6:	3308      	adds	r3, #8
 80087f8:	9303      	str	r3, [sp, #12]
 80087fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087fc:	4433      	add	r3, r6
 80087fe:	9309      	str	r3, [sp, #36]	; 0x24
 8008800:	e767      	b.n	80086d2 <_svfiprintf_r+0x4e>
 8008802:	fb0c 3202 	mla	r2, ip, r2, r3
 8008806:	460c      	mov	r4, r1
 8008808:	2001      	movs	r0, #1
 800880a:	e7a5      	b.n	8008758 <_svfiprintf_r+0xd4>
 800880c:	2300      	movs	r3, #0
 800880e:	3401      	adds	r4, #1
 8008810:	9305      	str	r3, [sp, #20]
 8008812:	4619      	mov	r1, r3
 8008814:	f04f 0c0a 	mov.w	ip, #10
 8008818:	4620      	mov	r0, r4
 800881a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800881e:	3a30      	subs	r2, #48	; 0x30
 8008820:	2a09      	cmp	r2, #9
 8008822:	d903      	bls.n	800882c <_svfiprintf_r+0x1a8>
 8008824:	2b00      	cmp	r3, #0
 8008826:	d0c5      	beq.n	80087b4 <_svfiprintf_r+0x130>
 8008828:	9105      	str	r1, [sp, #20]
 800882a:	e7c3      	b.n	80087b4 <_svfiprintf_r+0x130>
 800882c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008830:	4604      	mov	r4, r0
 8008832:	2301      	movs	r3, #1
 8008834:	e7f0      	b.n	8008818 <_svfiprintf_r+0x194>
 8008836:	ab03      	add	r3, sp, #12
 8008838:	9300      	str	r3, [sp, #0]
 800883a:	462a      	mov	r2, r5
 800883c:	4b0f      	ldr	r3, [pc, #60]	; (800887c <_svfiprintf_r+0x1f8>)
 800883e:	a904      	add	r1, sp, #16
 8008840:	4638      	mov	r0, r7
 8008842:	f3af 8000 	nop.w
 8008846:	1c42      	adds	r2, r0, #1
 8008848:	4606      	mov	r6, r0
 800884a:	d1d6      	bne.n	80087fa <_svfiprintf_r+0x176>
 800884c:	89ab      	ldrh	r3, [r5, #12]
 800884e:	065b      	lsls	r3, r3, #25
 8008850:	f53f af2c 	bmi.w	80086ac <_svfiprintf_r+0x28>
 8008854:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008856:	b01d      	add	sp, #116	; 0x74
 8008858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800885c:	ab03      	add	r3, sp, #12
 800885e:	9300      	str	r3, [sp, #0]
 8008860:	462a      	mov	r2, r5
 8008862:	4b06      	ldr	r3, [pc, #24]	; (800887c <_svfiprintf_r+0x1f8>)
 8008864:	a904      	add	r1, sp, #16
 8008866:	4638      	mov	r0, r7
 8008868:	f000 f9d4 	bl	8008c14 <_printf_i>
 800886c:	e7eb      	b.n	8008846 <_svfiprintf_r+0x1c2>
 800886e:	bf00      	nop
 8008870:	0800998a 	.word	0x0800998a
 8008874:	08009994 	.word	0x08009994
 8008878:	00000000 	.word	0x00000000
 800887c:	080085cd 	.word	0x080085cd
 8008880:	08009990 	.word	0x08009990

08008884 <__sfputc_r>:
 8008884:	6893      	ldr	r3, [r2, #8]
 8008886:	3b01      	subs	r3, #1
 8008888:	2b00      	cmp	r3, #0
 800888a:	b410      	push	{r4}
 800888c:	6093      	str	r3, [r2, #8]
 800888e:	da08      	bge.n	80088a2 <__sfputc_r+0x1e>
 8008890:	6994      	ldr	r4, [r2, #24]
 8008892:	42a3      	cmp	r3, r4
 8008894:	db01      	blt.n	800889a <__sfputc_r+0x16>
 8008896:	290a      	cmp	r1, #10
 8008898:	d103      	bne.n	80088a2 <__sfputc_r+0x1e>
 800889a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800889e:	f000 baef 	b.w	8008e80 <__swbuf_r>
 80088a2:	6813      	ldr	r3, [r2, #0]
 80088a4:	1c58      	adds	r0, r3, #1
 80088a6:	6010      	str	r0, [r2, #0]
 80088a8:	7019      	strb	r1, [r3, #0]
 80088aa:	4608      	mov	r0, r1
 80088ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80088b0:	4770      	bx	lr

080088b2 <__sfputs_r>:
 80088b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088b4:	4606      	mov	r6, r0
 80088b6:	460f      	mov	r7, r1
 80088b8:	4614      	mov	r4, r2
 80088ba:	18d5      	adds	r5, r2, r3
 80088bc:	42ac      	cmp	r4, r5
 80088be:	d101      	bne.n	80088c4 <__sfputs_r+0x12>
 80088c0:	2000      	movs	r0, #0
 80088c2:	e007      	b.n	80088d4 <__sfputs_r+0x22>
 80088c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088c8:	463a      	mov	r2, r7
 80088ca:	4630      	mov	r0, r6
 80088cc:	f7ff ffda 	bl	8008884 <__sfputc_r>
 80088d0:	1c43      	adds	r3, r0, #1
 80088d2:	d1f3      	bne.n	80088bc <__sfputs_r+0xa>
 80088d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080088d8 <_vfiprintf_r>:
 80088d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088dc:	460d      	mov	r5, r1
 80088de:	b09d      	sub	sp, #116	; 0x74
 80088e0:	4614      	mov	r4, r2
 80088e2:	4698      	mov	r8, r3
 80088e4:	4606      	mov	r6, r0
 80088e6:	b118      	cbz	r0, 80088f0 <_vfiprintf_r+0x18>
 80088e8:	6983      	ldr	r3, [r0, #24]
 80088ea:	b90b      	cbnz	r3, 80088f0 <_vfiprintf_r+0x18>
 80088ec:	f000 fcaa 	bl	8009244 <__sinit>
 80088f0:	4b89      	ldr	r3, [pc, #548]	; (8008b18 <_vfiprintf_r+0x240>)
 80088f2:	429d      	cmp	r5, r3
 80088f4:	d11b      	bne.n	800892e <_vfiprintf_r+0x56>
 80088f6:	6875      	ldr	r5, [r6, #4]
 80088f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80088fa:	07d9      	lsls	r1, r3, #31
 80088fc:	d405      	bmi.n	800890a <_vfiprintf_r+0x32>
 80088fe:	89ab      	ldrh	r3, [r5, #12]
 8008900:	059a      	lsls	r2, r3, #22
 8008902:	d402      	bmi.n	800890a <_vfiprintf_r+0x32>
 8008904:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008906:	f000 fd3b 	bl	8009380 <__retarget_lock_acquire_recursive>
 800890a:	89ab      	ldrh	r3, [r5, #12]
 800890c:	071b      	lsls	r3, r3, #28
 800890e:	d501      	bpl.n	8008914 <_vfiprintf_r+0x3c>
 8008910:	692b      	ldr	r3, [r5, #16]
 8008912:	b9eb      	cbnz	r3, 8008950 <_vfiprintf_r+0x78>
 8008914:	4629      	mov	r1, r5
 8008916:	4630      	mov	r0, r6
 8008918:	f000 fb04 	bl	8008f24 <__swsetup_r>
 800891c:	b1c0      	cbz	r0, 8008950 <_vfiprintf_r+0x78>
 800891e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008920:	07dc      	lsls	r4, r3, #31
 8008922:	d50e      	bpl.n	8008942 <_vfiprintf_r+0x6a>
 8008924:	f04f 30ff 	mov.w	r0, #4294967295
 8008928:	b01d      	add	sp, #116	; 0x74
 800892a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800892e:	4b7b      	ldr	r3, [pc, #492]	; (8008b1c <_vfiprintf_r+0x244>)
 8008930:	429d      	cmp	r5, r3
 8008932:	d101      	bne.n	8008938 <_vfiprintf_r+0x60>
 8008934:	68b5      	ldr	r5, [r6, #8]
 8008936:	e7df      	b.n	80088f8 <_vfiprintf_r+0x20>
 8008938:	4b79      	ldr	r3, [pc, #484]	; (8008b20 <_vfiprintf_r+0x248>)
 800893a:	429d      	cmp	r5, r3
 800893c:	bf08      	it	eq
 800893e:	68f5      	ldreq	r5, [r6, #12]
 8008940:	e7da      	b.n	80088f8 <_vfiprintf_r+0x20>
 8008942:	89ab      	ldrh	r3, [r5, #12]
 8008944:	0598      	lsls	r0, r3, #22
 8008946:	d4ed      	bmi.n	8008924 <_vfiprintf_r+0x4c>
 8008948:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800894a:	f000 fd1a 	bl	8009382 <__retarget_lock_release_recursive>
 800894e:	e7e9      	b.n	8008924 <_vfiprintf_r+0x4c>
 8008950:	2300      	movs	r3, #0
 8008952:	9309      	str	r3, [sp, #36]	; 0x24
 8008954:	2320      	movs	r3, #32
 8008956:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800895a:	f8cd 800c 	str.w	r8, [sp, #12]
 800895e:	2330      	movs	r3, #48	; 0x30
 8008960:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008b24 <_vfiprintf_r+0x24c>
 8008964:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008968:	f04f 0901 	mov.w	r9, #1
 800896c:	4623      	mov	r3, r4
 800896e:	469a      	mov	sl, r3
 8008970:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008974:	b10a      	cbz	r2, 800897a <_vfiprintf_r+0xa2>
 8008976:	2a25      	cmp	r2, #37	; 0x25
 8008978:	d1f9      	bne.n	800896e <_vfiprintf_r+0x96>
 800897a:	ebba 0b04 	subs.w	fp, sl, r4
 800897e:	d00b      	beq.n	8008998 <_vfiprintf_r+0xc0>
 8008980:	465b      	mov	r3, fp
 8008982:	4622      	mov	r2, r4
 8008984:	4629      	mov	r1, r5
 8008986:	4630      	mov	r0, r6
 8008988:	f7ff ff93 	bl	80088b2 <__sfputs_r>
 800898c:	3001      	adds	r0, #1
 800898e:	f000 80aa 	beq.w	8008ae6 <_vfiprintf_r+0x20e>
 8008992:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008994:	445a      	add	r2, fp
 8008996:	9209      	str	r2, [sp, #36]	; 0x24
 8008998:	f89a 3000 	ldrb.w	r3, [sl]
 800899c:	2b00      	cmp	r3, #0
 800899e:	f000 80a2 	beq.w	8008ae6 <_vfiprintf_r+0x20e>
 80089a2:	2300      	movs	r3, #0
 80089a4:	f04f 32ff 	mov.w	r2, #4294967295
 80089a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80089ac:	f10a 0a01 	add.w	sl, sl, #1
 80089b0:	9304      	str	r3, [sp, #16]
 80089b2:	9307      	str	r3, [sp, #28]
 80089b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80089b8:	931a      	str	r3, [sp, #104]	; 0x68
 80089ba:	4654      	mov	r4, sl
 80089bc:	2205      	movs	r2, #5
 80089be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089c2:	4858      	ldr	r0, [pc, #352]	; (8008b24 <_vfiprintf_r+0x24c>)
 80089c4:	f7f7 fc94 	bl	80002f0 <memchr>
 80089c8:	9a04      	ldr	r2, [sp, #16]
 80089ca:	b9d8      	cbnz	r0, 8008a04 <_vfiprintf_r+0x12c>
 80089cc:	06d1      	lsls	r1, r2, #27
 80089ce:	bf44      	itt	mi
 80089d0:	2320      	movmi	r3, #32
 80089d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80089d6:	0713      	lsls	r3, r2, #28
 80089d8:	bf44      	itt	mi
 80089da:	232b      	movmi	r3, #43	; 0x2b
 80089dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80089e0:	f89a 3000 	ldrb.w	r3, [sl]
 80089e4:	2b2a      	cmp	r3, #42	; 0x2a
 80089e6:	d015      	beq.n	8008a14 <_vfiprintf_r+0x13c>
 80089e8:	9a07      	ldr	r2, [sp, #28]
 80089ea:	4654      	mov	r4, sl
 80089ec:	2000      	movs	r0, #0
 80089ee:	f04f 0c0a 	mov.w	ip, #10
 80089f2:	4621      	mov	r1, r4
 80089f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80089f8:	3b30      	subs	r3, #48	; 0x30
 80089fa:	2b09      	cmp	r3, #9
 80089fc:	d94e      	bls.n	8008a9c <_vfiprintf_r+0x1c4>
 80089fe:	b1b0      	cbz	r0, 8008a2e <_vfiprintf_r+0x156>
 8008a00:	9207      	str	r2, [sp, #28]
 8008a02:	e014      	b.n	8008a2e <_vfiprintf_r+0x156>
 8008a04:	eba0 0308 	sub.w	r3, r0, r8
 8008a08:	fa09 f303 	lsl.w	r3, r9, r3
 8008a0c:	4313      	orrs	r3, r2
 8008a0e:	9304      	str	r3, [sp, #16]
 8008a10:	46a2      	mov	sl, r4
 8008a12:	e7d2      	b.n	80089ba <_vfiprintf_r+0xe2>
 8008a14:	9b03      	ldr	r3, [sp, #12]
 8008a16:	1d19      	adds	r1, r3, #4
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	9103      	str	r1, [sp, #12]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	bfbb      	ittet	lt
 8008a20:	425b      	neglt	r3, r3
 8008a22:	f042 0202 	orrlt.w	r2, r2, #2
 8008a26:	9307      	strge	r3, [sp, #28]
 8008a28:	9307      	strlt	r3, [sp, #28]
 8008a2a:	bfb8      	it	lt
 8008a2c:	9204      	strlt	r2, [sp, #16]
 8008a2e:	7823      	ldrb	r3, [r4, #0]
 8008a30:	2b2e      	cmp	r3, #46	; 0x2e
 8008a32:	d10c      	bne.n	8008a4e <_vfiprintf_r+0x176>
 8008a34:	7863      	ldrb	r3, [r4, #1]
 8008a36:	2b2a      	cmp	r3, #42	; 0x2a
 8008a38:	d135      	bne.n	8008aa6 <_vfiprintf_r+0x1ce>
 8008a3a:	9b03      	ldr	r3, [sp, #12]
 8008a3c:	1d1a      	adds	r2, r3, #4
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	9203      	str	r2, [sp, #12]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	bfb8      	it	lt
 8008a46:	f04f 33ff 	movlt.w	r3, #4294967295
 8008a4a:	3402      	adds	r4, #2
 8008a4c:	9305      	str	r3, [sp, #20]
 8008a4e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008b34 <_vfiprintf_r+0x25c>
 8008a52:	7821      	ldrb	r1, [r4, #0]
 8008a54:	2203      	movs	r2, #3
 8008a56:	4650      	mov	r0, sl
 8008a58:	f7f7 fc4a 	bl	80002f0 <memchr>
 8008a5c:	b140      	cbz	r0, 8008a70 <_vfiprintf_r+0x198>
 8008a5e:	2340      	movs	r3, #64	; 0x40
 8008a60:	eba0 000a 	sub.w	r0, r0, sl
 8008a64:	fa03 f000 	lsl.w	r0, r3, r0
 8008a68:	9b04      	ldr	r3, [sp, #16]
 8008a6a:	4303      	orrs	r3, r0
 8008a6c:	3401      	adds	r4, #1
 8008a6e:	9304      	str	r3, [sp, #16]
 8008a70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a74:	482c      	ldr	r0, [pc, #176]	; (8008b28 <_vfiprintf_r+0x250>)
 8008a76:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008a7a:	2206      	movs	r2, #6
 8008a7c:	f7f7 fc38 	bl	80002f0 <memchr>
 8008a80:	2800      	cmp	r0, #0
 8008a82:	d03f      	beq.n	8008b04 <_vfiprintf_r+0x22c>
 8008a84:	4b29      	ldr	r3, [pc, #164]	; (8008b2c <_vfiprintf_r+0x254>)
 8008a86:	bb1b      	cbnz	r3, 8008ad0 <_vfiprintf_r+0x1f8>
 8008a88:	9b03      	ldr	r3, [sp, #12]
 8008a8a:	3307      	adds	r3, #7
 8008a8c:	f023 0307 	bic.w	r3, r3, #7
 8008a90:	3308      	adds	r3, #8
 8008a92:	9303      	str	r3, [sp, #12]
 8008a94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a96:	443b      	add	r3, r7
 8008a98:	9309      	str	r3, [sp, #36]	; 0x24
 8008a9a:	e767      	b.n	800896c <_vfiprintf_r+0x94>
 8008a9c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008aa0:	460c      	mov	r4, r1
 8008aa2:	2001      	movs	r0, #1
 8008aa4:	e7a5      	b.n	80089f2 <_vfiprintf_r+0x11a>
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	3401      	adds	r4, #1
 8008aaa:	9305      	str	r3, [sp, #20]
 8008aac:	4619      	mov	r1, r3
 8008aae:	f04f 0c0a 	mov.w	ip, #10
 8008ab2:	4620      	mov	r0, r4
 8008ab4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ab8:	3a30      	subs	r2, #48	; 0x30
 8008aba:	2a09      	cmp	r2, #9
 8008abc:	d903      	bls.n	8008ac6 <_vfiprintf_r+0x1ee>
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d0c5      	beq.n	8008a4e <_vfiprintf_r+0x176>
 8008ac2:	9105      	str	r1, [sp, #20]
 8008ac4:	e7c3      	b.n	8008a4e <_vfiprintf_r+0x176>
 8008ac6:	fb0c 2101 	mla	r1, ip, r1, r2
 8008aca:	4604      	mov	r4, r0
 8008acc:	2301      	movs	r3, #1
 8008ace:	e7f0      	b.n	8008ab2 <_vfiprintf_r+0x1da>
 8008ad0:	ab03      	add	r3, sp, #12
 8008ad2:	9300      	str	r3, [sp, #0]
 8008ad4:	462a      	mov	r2, r5
 8008ad6:	4b16      	ldr	r3, [pc, #88]	; (8008b30 <_vfiprintf_r+0x258>)
 8008ad8:	a904      	add	r1, sp, #16
 8008ada:	4630      	mov	r0, r6
 8008adc:	f3af 8000 	nop.w
 8008ae0:	4607      	mov	r7, r0
 8008ae2:	1c78      	adds	r0, r7, #1
 8008ae4:	d1d6      	bne.n	8008a94 <_vfiprintf_r+0x1bc>
 8008ae6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ae8:	07d9      	lsls	r1, r3, #31
 8008aea:	d405      	bmi.n	8008af8 <_vfiprintf_r+0x220>
 8008aec:	89ab      	ldrh	r3, [r5, #12]
 8008aee:	059a      	lsls	r2, r3, #22
 8008af0:	d402      	bmi.n	8008af8 <_vfiprintf_r+0x220>
 8008af2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008af4:	f000 fc45 	bl	8009382 <__retarget_lock_release_recursive>
 8008af8:	89ab      	ldrh	r3, [r5, #12]
 8008afa:	065b      	lsls	r3, r3, #25
 8008afc:	f53f af12 	bmi.w	8008924 <_vfiprintf_r+0x4c>
 8008b00:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008b02:	e711      	b.n	8008928 <_vfiprintf_r+0x50>
 8008b04:	ab03      	add	r3, sp, #12
 8008b06:	9300      	str	r3, [sp, #0]
 8008b08:	462a      	mov	r2, r5
 8008b0a:	4b09      	ldr	r3, [pc, #36]	; (8008b30 <_vfiprintf_r+0x258>)
 8008b0c:	a904      	add	r1, sp, #16
 8008b0e:	4630      	mov	r0, r6
 8008b10:	f000 f880 	bl	8008c14 <_printf_i>
 8008b14:	e7e4      	b.n	8008ae0 <_vfiprintf_r+0x208>
 8008b16:	bf00      	nop
 8008b18:	080099e0 	.word	0x080099e0
 8008b1c:	08009a00 	.word	0x08009a00
 8008b20:	080099c0 	.word	0x080099c0
 8008b24:	0800998a 	.word	0x0800998a
 8008b28:	08009994 	.word	0x08009994
 8008b2c:	00000000 	.word	0x00000000
 8008b30:	080088b3 	.word	0x080088b3
 8008b34:	08009990 	.word	0x08009990

08008b38 <_printf_common>:
 8008b38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b3c:	4616      	mov	r6, r2
 8008b3e:	4699      	mov	r9, r3
 8008b40:	688a      	ldr	r2, [r1, #8]
 8008b42:	690b      	ldr	r3, [r1, #16]
 8008b44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008b48:	4293      	cmp	r3, r2
 8008b4a:	bfb8      	it	lt
 8008b4c:	4613      	movlt	r3, r2
 8008b4e:	6033      	str	r3, [r6, #0]
 8008b50:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008b54:	4607      	mov	r7, r0
 8008b56:	460c      	mov	r4, r1
 8008b58:	b10a      	cbz	r2, 8008b5e <_printf_common+0x26>
 8008b5a:	3301      	adds	r3, #1
 8008b5c:	6033      	str	r3, [r6, #0]
 8008b5e:	6823      	ldr	r3, [r4, #0]
 8008b60:	0699      	lsls	r1, r3, #26
 8008b62:	bf42      	ittt	mi
 8008b64:	6833      	ldrmi	r3, [r6, #0]
 8008b66:	3302      	addmi	r3, #2
 8008b68:	6033      	strmi	r3, [r6, #0]
 8008b6a:	6825      	ldr	r5, [r4, #0]
 8008b6c:	f015 0506 	ands.w	r5, r5, #6
 8008b70:	d106      	bne.n	8008b80 <_printf_common+0x48>
 8008b72:	f104 0a19 	add.w	sl, r4, #25
 8008b76:	68e3      	ldr	r3, [r4, #12]
 8008b78:	6832      	ldr	r2, [r6, #0]
 8008b7a:	1a9b      	subs	r3, r3, r2
 8008b7c:	42ab      	cmp	r3, r5
 8008b7e:	dc26      	bgt.n	8008bce <_printf_common+0x96>
 8008b80:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008b84:	1e13      	subs	r3, r2, #0
 8008b86:	6822      	ldr	r2, [r4, #0]
 8008b88:	bf18      	it	ne
 8008b8a:	2301      	movne	r3, #1
 8008b8c:	0692      	lsls	r2, r2, #26
 8008b8e:	d42b      	bmi.n	8008be8 <_printf_common+0xb0>
 8008b90:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008b94:	4649      	mov	r1, r9
 8008b96:	4638      	mov	r0, r7
 8008b98:	47c0      	blx	r8
 8008b9a:	3001      	adds	r0, #1
 8008b9c:	d01e      	beq.n	8008bdc <_printf_common+0xa4>
 8008b9e:	6823      	ldr	r3, [r4, #0]
 8008ba0:	68e5      	ldr	r5, [r4, #12]
 8008ba2:	6832      	ldr	r2, [r6, #0]
 8008ba4:	f003 0306 	and.w	r3, r3, #6
 8008ba8:	2b04      	cmp	r3, #4
 8008baa:	bf08      	it	eq
 8008bac:	1aad      	subeq	r5, r5, r2
 8008bae:	68a3      	ldr	r3, [r4, #8]
 8008bb0:	6922      	ldr	r2, [r4, #16]
 8008bb2:	bf0c      	ite	eq
 8008bb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008bb8:	2500      	movne	r5, #0
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	bfc4      	itt	gt
 8008bbe:	1a9b      	subgt	r3, r3, r2
 8008bc0:	18ed      	addgt	r5, r5, r3
 8008bc2:	2600      	movs	r6, #0
 8008bc4:	341a      	adds	r4, #26
 8008bc6:	42b5      	cmp	r5, r6
 8008bc8:	d11a      	bne.n	8008c00 <_printf_common+0xc8>
 8008bca:	2000      	movs	r0, #0
 8008bcc:	e008      	b.n	8008be0 <_printf_common+0xa8>
 8008bce:	2301      	movs	r3, #1
 8008bd0:	4652      	mov	r2, sl
 8008bd2:	4649      	mov	r1, r9
 8008bd4:	4638      	mov	r0, r7
 8008bd6:	47c0      	blx	r8
 8008bd8:	3001      	adds	r0, #1
 8008bda:	d103      	bne.n	8008be4 <_printf_common+0xac>
 8008bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8008be0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008be4:	3501      	adds	r5, #1
 8008be6:	e7c6      	b.n	8008b76 <_printf_common+0x3e>
 8008be8:	18e1      	adds	r1, r4, r3
 8008bea:	1c5a      	adds	r2, r3, #1
 8008bec:	2030      	movs	r0, #48	; 0x30
 8008bee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008bf2:	4422      	add	r2, r4
 8008bf4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008bf8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008bfc:	3302      	adds	r3, #2
 8008bfe:	e7c7      	b.n	8008b90 <_printf_common+0x58>
 8008c00:	2301      	movs	r3, #1
 8008c02:	4622      	mov	r2, r4
 8008c04:	4649      	mov	r1, r9
 8008c06:	4638      	mov	r0, r7
 8008c08:	47c0      	blx	r8
 8008c0a:	3001      	adds	r0, #1
 8008c0c:	d0e6      	beq.n	8008bdc <_printf_common+0xa4>
 8008c0e:	3601      	adds	r6, #1
 8008c10:	e7d9      	b.n	8008bc6 <_printf_common+0x8e>
	...

08008c14 <_printf_i>:
 8008c14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008c18:	7e0f      	ldrb	r7, [r1, #24]
 8008c1a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008c1c:	2f78      	cmp	r7, #120	; 0x78
 8008c1e:	4691      	mov	r9, r2
 8008c20:	4680      	mov	r8, r0
 8008c22:	460c      	mov	r4, r1
 8008c24:	469a      	mov	sl, r3
 8008c26:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008c2a:	d807      	bhi.n	8008c3c <_printf_i+0x28>
 8008c2c:	2f62      	cmp	r7, #98	; 0x62
 8008c2e:	d80a      	bhi.n	8008c46 <_printf_i+0x32>
 8008c30:	2f00      	cmp	r7, #0
 8008c32:	f000 80d8 	beq.w	8008de6 <_printf_i+0x1d2>
 8008c36:	2f58      	cmp	r7, #88	; 0x58
 8008c38:	f000 80a3 	beq.w	8008d82 <_printf_i+0x16e>
 8008c3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008c44:	e03a      	b.n	8008cbc <_printf_i+0xa8>
 8008c46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008c4a:	2b15      	cmp	r3, #21
 8008c4c:	d8f6      	bhi.n	8008c3c <_printf_i+0x28>
 8008c4e:	a101      	add	r1, pc, #4	; (adr r1, 8008c54 <_printf_i+0x40>)
 8008c50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008c54:	08008cad 	.word	0x08008cad
 8008c58:	08008cc1 	.word	0x08008cc1
 8008c5c:	08008c3d 	.word	0x08008c3d
 8008c60:	08008c3d 	.word	0x08008c3d
 8008c64:	08008c3d 	.word	0x08008c3d
 8008c68:	08008c3d 	.word	0x08008c3d
 8008c6c:	08008cc1 	.word	0x08008cc1
 8008c70:	08008c3d 	.word	0x08008c3d
 8008c74:	08008c3d 	.word	0x08008c3d
 8008c78:	08008c3d 	.word	0x08008c3d
 8008c7c:	08008c3d 	.word	0x08008c3d
 8008c80:	08008dcd 	.word	0x08008dcd
 8008c84:	08008cf1 	.word	0x08008cf1
 8008c88:	08008daf 	.word	0x08008daf
 8008c8c:	08008c3d 	.word	0x08008c3d
 8008c90:	08008c3d 	.word	0x08008c3d
 8008c94:	08008def 	.word	0x08008def
 8008c98:	08008c3d 	.word	0x08008c3d
 8008c9c:	08008cf1 	.word	0x08008cf1
 8008ca0:	08008c3d 	.word	0x08008c3d
 8008ca4:	08008c3d 	.word	0x08008c3d
 8008ca8:	08008db7 	.word	0x08008db7
 8008cac:	682b      	ldr	r3, [r5, #0]
 8008cae:	1d1a      	adds	r2, r3, #4
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	602a      	str	r2, [r5, #0]
 8008cb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008cb8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008cbc:	2301      	movs	r3, #1
 8008cbe:	e0a3      	b.n	8008e08 <_printf_i+0x1f4>
 8008cc0:	6820      	ldr	r0, [r4, #0]
 8008cc2:	6829      	ldr	r1, [r5, #0]
 8008cc4:	0606      	lsls	r6, r0, #24
 8008cc6:	f101 0304 	add.w	r3, r1, #4
 8008cca:	d50a      	bpl.n	8008ce2 <_printf_i+0xce>
 8008ccc:	680e      	ldr	r6, [r1, #0]
 8008cce:	602b      	str	r3, [r5, #0]
 8008cd0:	2e00      	cmp	r6, #0
 8008cd2:	da03      	bge.n	8008cdc <_printf_i+0xc8>
 8008cd4:	232d      	movs	r3, #45	; 0x2d
 8008cd6:	4276      	negs	r6, r6
 8008cd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008cdc:	485e      	ldr	r0, [pc, #376]	; (8008e58 <_printf_i+0x244>)
 8008cde:	230a      	movs	r3, #10
 8008ce0:	e019      	b.n	8008d16 <_printf_i+0x102>
 8008ce2:	680e      	ldr	r6, [r1, #0]
 8008ce4:	602b      	str	r3, [r5, #0]
 8008ce6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008cea:	bf18      	it	ne
 8008cec:	b236      	sxthne	r6, r6
 8008cee:	e7ef      	b.n	8008cd0 <_printf_i+0xbc>
 8008cf0:	682b      	ldr	r3, [r5, #0]
 8008cf2:	6820      	ldr	r0, [r4, #0]
 8008cf4:	1d19      	adds	r1, r3, #4
 8008cf6:	6029      	str	r1, [r5, #0]
 8008cf8:	0601      	lsls	r1, r0, #24
 8008cfa:	d501      	bpl.n	8008d00 <_printf_i+0xec>
 8008cfc:	681e      	ldr	r6, [r3, #0]
 8008cfe:	e002      	b.n	8008d06 <_printf_i+0xf2>
 8008d00:	0646      	lsls	r6, r0, #25
 8008d02:	d5fb      	bpl.n	8008cfc <_printf_i+0xe8>
 8008d04:	881e      	ldrh	r6, [r3, #0]
 8008d06:	4854      	ldr	r0, [pc, #336]	; (8008e58 <_printf_i+0x244>)
 8008d08:	2f6f      	cmp	r7, #111	; 0x6f
 8008d0a:	bf0c      	ite	eq
 8008d0c:	2308      	moveq	r3, #8
 8008d0e:	230a      	movne	r3, #10
 8008d10:	2100      	movs	r1, #0
 8008d12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008d16:	6865      	ldr	r5, [r4, #4]
 8008d18:	60a5      	str	r5, [r4, #8]
 8008d1a:	2d00      	cmp	r5, #0
 8008d1c:	bfa2      	ittt	ge
 8008d1e:	6821      	ldrge	r1, [r4, #0]
 8008d20:	f021 0104 	bicge.w	r1, r1, #4
 8008d24:	6021      	strge	r1, [r4, #0]
 8008d26:	b90e      	cbnz	r6, 8008d2c <_printf_i+0x118>
 8008d28:	2d00      	cmp	r5, #0
 8008d2a:	d04d      	beq.n	8008dc8 <_printf_i+0x1b4>
 8008d2c:	4615      	mov	r5, r2
 8008d2e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008d32:	fb03 6711 	mls	r7, r3, r1, r6
 8008d36:	5dc7      	ldrb	r7, [r0, r7]
 8008d38:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008d3c:	4637      	mov	r7, r6
 8008d3e:	42bb      	cmp	r3, r7
 8008d40:	460e      	mov	r6, r1
 8008d42:	d9f4      	bls.n	8008d2e <_printf_i+0x11a>
 8008d44:	2b08      	cmp	r3, #8
 8008d46:	d10b      	bne.n	8008d60 <_printf_i+0x14c>
 8008d48:	6823      	ldr	r3, [r4, #0]
 8008d4a:	07de      	lsls	r6, r3, #31
 8008d4c:	d508      	bpl.n	8008d60 <_printf_i+0x14c>
 8008d4e:	6923      	ldr	r3, [r4, #16]
 8008d50:	6861      	ldr	r1, [r4, #4]
 8008d52:	4299      	cmp	r1, r3
 8008d54:	bfde      	ittt	le
 8008d56:	2330      	movle	r3, #48	; 0x30
 8008d58:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008d5c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008d60:	1b52      	subs	r2, r2, r5
 8008d62:	6122      	str	r2, [r4, #16]
 8008d64:	f8cd a000 	str.w	sl, [sp]
 8008d68:	464b      	mov	r3, r9
 8008d6a:	aa03      	add	r2, sp, #12
 8008d6c:	4621      	mov	r1, r4
 8008d6e:	4640      	mov	r0, r8
 8008d70:	f7ff fee2 	bl	8008b38 <_printf_common>
 8008d74:	3001      	adds	r0, #1
 8008d76:	d14c      	bne.n	8008e12 <_printf_i+0x1fe>
 8008d78:	f04f 30ff 	mov.w	r0, #4294967295
 8008d7c:	b004      	add	sp, #16
 8008d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d82:	4835      	ldr	r0, [pc, #212]	; (8008e58 <_printf_i+0x244>)
 8008d84:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008d88:	6829      	ldr	r1, [r5, #0]
 8008d8a:	6823      	ldr	r3, [r4, #0]
 8008d8c:	f851 6b04 	ldr.w	r6, [r1], #4
 8008d90:	6029      	str	r1, [r5, #0]
 8008d92:	061d      	lsls	r5, r3, #24
 8008d94:	d514      	bpl.n	8008dc0 <_printf_i+0x1ac>
 8008d96:	07df      	lsls	r7, r3, #31
 8008d98:	bf44      	itt	mi
 8008d9a:	f043 0320 	orrmi.w	r3, r3, #32
 8008d9e:	6023      	strmi	r3, [r4, #0]
 8008da0:	b91e      	cbnz	r6, 8008daa <_printf_i+0x196>
 8008da2:	6823      	ldr	r3, [r4, #0]
 8008da4:	f023 0320 	bic.w	r3, r3, #32
 8008da8:	6023      	str	r3, [r4, #0]
 8008daa:	2310      	movs	r3, #16
 8008dac:	e7b0      	b.n	8008d10 <_printf_i+0xfc>
 8008dae:	6823      	ldr	r3, [r4, #0]
 8008db0:	f043 0320 	orr.w	r3, r3, #32
 8008db4:	6023      	str	r3, [r4, #0]
 8008db6:	2378      	movs	r3, #120	; 0x78
 8008db8:	4828      	ldr	r0, [pc, #160]	; (8008e5c <_printf_i+0x248>)
 8008dba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008dbe:	e7e3      	b.n	8008d88 <_printf_i+0x174>
 8008dc0:	0659      	lsls	r1, r3, #25
 8008dc2:	bf48      	it	mi
 8008dc4:	b2b6      	uxthmi	r6, r6
 8008dc6:	e7e6      	b.n	8008d96 <_printf_i+0x182>
 8008dc8:	4615      	mov	r5, r2
 8008dca:	e7bb      	b.n	8008d44 <_printf_i+0x130>
 8008dcc:	682b      	ldr	r3, [r5, #0]
 8008dce:	6826      	ldr	r6, [r4, #0]
 8008dd0:	6961      	ldr	r1, [r4, #20]
 8008dd2:	1d18      	adds	r0, r3, #4
 8008dd4:	6028      	str	r0, [r5, #0]
 8008dd6:	0635      	lsls	r5, r6, #24
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	d501      	bpl.n	8008de0 <_printf_i+0x1cc>
 8008ddc:	6019      	str	r1, [r3, #0]
 8008dde:	e002      	b.n	8008de6 <_printf_i+0x1d2>
 8008de0:	0670      	lsls	r0, r6, #25
 8008de2:	d5fb      	bpl.n	8008ddc <_printf_i+0x1c8>
 8008de4:	8019      	strh	r1, [r3, #0]
 8008de6:	2300      	movs	r3, #0
 8008de8:	6123      	str	r3, [r4, #16]
 8008dea:	4615      	mov	r5, r2
 8008dec:	e7ba      	b.n	8008d64 <_printf_i+0x150>
 8008dee:	682b      	ldr	r3, [r5, #0]
 8008df0:	1d1a      	adds	r2, r3, #4
 8008df2:	602a      	str	r2, [r5, #0]
 8008df4:	681d      	ldr	r5, [r3, #0]
 8008df6:	6862      	ldr	r2, [r4, #4]
 8008df8:	2100      	movs	r1, #0
 8008dfa:	4628      	mov	r0, r5
 8008dfc:	f7f7 fa78 	bl	80002f0 <memchr>
 8008e00:	b108      	cbz	r0, 8008e06 <_printf_i+0x1f2>
 8008e02:	1b40      	subs	r0, r0, r5
 8008e04:	6060      	str	r0, [r4, #4]
 8008e06:	6863      	ldr	r3, [r4, #4]
 8008e08:	6123      	str	r3, [r4, #16]
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e10:	e7a8      	b.n	8008d64 <_printf_i+0x150>
 8008e12:	6923      	ldr	r3, [r4, #16]
 8008e14:	462a      	mov	r2, r5
 8008e16:	4649      	mov	r1, r9
 8008e18:	4640      	mov	r0, r8
 8008e1a:	47d0      	blx	sl
 8008e1c:	3001      	adds	r0, #1
 8008e1e:	d0ab      	beq.n	8008d78 <_printf_i+0x164>
 8008e20:	6823      	ldr	r3, [r4, #0]
 8008e22:	079b      	lsls	r3, r3, #30
 8008e24:	d413      	bmi.n	8008e4e <_printf_i+0x23a>
 8008e26:	68e0      	ldr	r0, [r4, #12]
 8008e28:	9b03      	ldr	r3, [sp, #12]
 8008e2a:	4298      	cmp	r0, r3
 8008e2c:	bfb8      	it	lt
 8008e2e:	4618      	movlt	r0, r3
 8008e30:	e7a4      	b.n	8008d7c <_printf_i+0x168>
 8008e32:	2301      	movs	r3, #1
 8008e34:	4632      	mov	r2, r6
 8008e36:	4649      	mov	r1, r9
 8008e38:	4640      	mov	r0, r8
 8008e3a:	47d0      	blx	sl
 8008e3c:	3001      	adds	r0, #1
 8008e3e:	d09b      	beq.n	8008d78 <_printf_i+0x164>
 8008e40:	3501      	adds	r5, #1
 8008e42:	68e3      	ldr	r3, [r4, #12]
 8008e44:	9903      	ldr	r1, [sp, #12]
 8008e46:	1a5b      	subs	r3, r3, r1
 8008e48:	42ab      	cmp	r3, r5
 8008e4a:	dcf2      	bgt.n	8008e32 <_printf_i+0x21e>
 8008e4c:	e7eb      	b.n	8008e26 <_printf_i+0x212>
 8008e4e:	2500      	movs	r5, #0
 8008e50:	f104 0619 	add.w	r6, r4, #25
 8008e54:	e7f5      	b.n	8008e42 <_printf_i+0x22e>
 8008e56:	bf00      	nop
 8008e58:	0800999b 	.word	0x0800999b
 8008e5c:	080099ac 	.word	0x080099ac

08008e60 <_sbrk_r>:
 8008e60:	b538      	push	{r3, r4, r5, lr}
 8008e62:	4d06      	ldr	r5, [pc, #24]	; (8008e7c <_sbrk_r+0x1c>)
 8008e64:	2300      	movs	r3, #0
 8008e66:	4604      	mov	r4, r0
 8008e68:	4608      	mov	r0, r1
 8008e6a:	602b      	str	r3, [r5, #0]
 8008e6c:	f7f8 fa50 	bl	8001310 <_sbrk>
 8008e70:	1c43      	adds	r3, r0, #1
 8008e72:	d102      	bne.n	8008e7a <_sbrk_r+0x1a>
 8008e74:	682b      	ldr	r3, [r5, #0]
 8008e76:	b103      	cbz	r3, 8008e7a <_sbrk_r+0x1a>
 8008e78:	6023      	str	r3, [r4, #0]
 8008e7a:	bd38      	pop	{r3, r4, r5, pc}
 8008e7c:	24000394 	.word	0x24000394

08008e80 <__swbuf_r>:
 8008e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e82:	460e      	mov	r6, r1
 8008e84:	4614      	mov	r4, r2
 8008e86:	4605      	mov	r5, r0
 8008e88:	b118      	cbz	r0, 8008e92 <__swbuf_r+0x12>
 8008e8a:	6983      	ldr	r3, [r0, #24]
 8008e8c:	b90b      	cbnz	r3, 8008e92 <__swbuf_r+0x12>
 8008e8e:	f000 f9d9 	bl	8009244 <__sinit>
 8008e92:	4b21      	ldr	r3, [pc, #132]	; (8008f18 <__swbuf_r+0x98>)
 8008e94:	429c      	cmp	r4, r3
 8008e96:	d12b      	bne.n	8008ef0 <__swbuf_r+0x70>
 8008e98:	686c      	ldr	r4, [r5, #4]
 8008e9a:	69a3      	ldr	r3, [r4, #24]
 8008e9c:	60a3      	str	r3, [r4, #8]
 8008e9e:	89a3      	ldrh	r3, [r4, #12]
 8008ea0:	071a      	lsls	r2, r3, #28
 8008ea2:	d52f      	bpl.n	8008f04 <__swbuf_r+0x84>
 8008ea4:	6923      	ldr	r3, [r4, #16]
 8008ea6:	b36b      	cbz	r3, 8008f04 <__swbuf_r+0x84>
 8008ea8:	6923      	ldr	r3, [r4, #16]
 8008eaa:	6820      	ldr	r0, [r4, #0]
 8008eac:	1ac0      	subs	r0, r0, r3
 8008eae:	6963      	ldr	r3, [r4, #20]
 8008eb0:	b2f6      	uxtb	r6, r6
 8008eb2:	4283      	cmp	r3, r0
 8008eb4:	4637      	mov	r7, r6
 8008eb6:	dc04      	bgt.n	8008ec2 <__swbuf_r+0x42>
 8008eb8:	4621      	mov	r1, r4
 8008eba:	4628      	mov	r0, r5
 8008ebc:	f000 f92e 	bl	800911c <_fflush_r>
 8008ec0:	bb30      	cbnz	r0, 8008f10 <__swbuf_r+0x90>
 8008ec2:	68a3      	ldr	r3, [r4, #8]
 8008ec4:	3b01      	subs	r3, #1
 8008ec6:	60a3      	str	r3, [r4, #8]
 8008ec8:	6823      	ldr	r3, [r4, #0]
 8008eca:	1c5a      	adds	r2, r3, #1
 8008ecc:	6022      	str	r2, [r4, #0]
 8008ece:	701e      	strb	r6, [r3, #0]
 8008ed0:	6963      	ldr	r3, [r4, #20]
 8008ed2:	3001      	adds	r0, #1
 8008ed4:	4283      	cmp	r3, r0
 8008ed6:	d004      	beq.n	8008ee2 <__swbuf_r+0x62>
 8008ed8:	89a3      	ldrh	r3, [r4, #12]
 8008eda:	07db      	lsls	r3, r3, #31
 8008edc:	d506      	bpl.n	8008eec <__swbuf_r+0x6c>
 8008ede:	2e0a      	cmp	r6, #10
 8008ee0:	d104      	bne.n	8008eec <__swbuf_r+0x6c>
 8008ee2:	4621      	mov	r1, r4
 8008ee4:	4628      	mov	r0, r5
 8008ee6:	f000 f919 	bl	800911c <_fflush_r>
 8008eea:	b988      	cbnz	r0, 8008f10 <__swbuf_r+0x90>
 8008eec:	4638      	mov	r0, r7
 8008eee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ef0:	4b0a      	ldr	r3, [pc, #40]	; (8008f1c <__swbuf_r+0x9c>)
 8008ef2:	429c      	cmp	r4, r3
 8008ef4:	d101      	bne.n	8008efa <__swbuf_r+0x7a>
 8008ef6:	68ac      	ldr	r4, [r5, #8]
 8008ef8:	e7cf      	b.n	8008e9a <__swbuf_r+0x1a>
 8008efa:	4b09      	ldr	r3, [pc, #36]	; (8008f20 <__swbuf_r+0xa0>)
 8008efc:	429c      	cmp	r4, r3
 8008efe:	bf08      	it	eq
 8008f00:	68ec      	ldreq	r4, [r5, #12]
 8008f02:	e7ca      	b.n	8008e9a <__swbuf_r+0x1a>
 8008f04:	4621      	mov	r1, r4
 8008f06:	4628      	mov	r0, r5
 8008f08:	f000 f80c 	bl	8008f24 <__swsetup_r>
 8008f0c:	2800      	cmp	r0, #0
 8008f0e:	d0cb      	beq.n	8008ea8 <__swbuf_r+0x28>
 8008f10:	f04f 37ff 	mov.w	r7, #4294967295
 8008f14:	e7ea      	b.n	8008eec <__swbuf_r+0x6c>
 8008f16:	bf00      	nop
 8008f18:	080099e0 	.word	0x080099e0
 8008f1c:	08009a00 	.word	0x08009a00
 8008f20:	080099c0 	.word	0x080099c0

08008f24 <__swsetup_r>:
 8008f24:	4b32      	ldr	r3, [pc, #200]	; (8008ff0 <__swsetup_r+0xcc>)
 8008f26:	b570      	push	{r4, r5, r6, lr}
 8008f28:	681d      	ldr	r5, [r3, #0]
 8008f2a:	4606      	mov	r6, r0
 8008f2c:	460c      	mov	r4, r1
 8008f2e:	b125      	cbz	r5, 8008f3a <__swsetup_r+0x16>
 8008f30:	69ab      	ldr	r3, [r5, #24]
 8008f32:	b913      	cbnz	r3, 8008f3a <__swsetup_r+0x16>
 8008f34:	4628      	mov	r0, r5
 8008f36:	f000 f985 	bl	8009244 <__sinit>
 8008f3a:	4b2e      	ldr	r3, [pc, #184]	; (8008ff4 <__swsetup_r+0xd0>)
 8008f3c:	429c      	cmp	r4, r3
 8008f3e:	d10f      	bne.n	8008f60 <__swsetup_r+0x3c>
 8008f40:	686c      	ldr	r4, [r5, #4]
 8008f42:	89a3      	ldrh	r3, [r4, #12]
 8008f44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008f48:	0719      	lsls	r1, r3, #28
 8008f4a:	d42c      	bmi.n	8008fa6 <__swsetup_r+0x82>
 8008f4c:	06dd      	lsls	r5, r3, #27
 8008f4e:	d411      	bmi.n	8008f74 <__swsetup_r+0x50>
 8008f50:	2309      	movs	r3, #9
 8008f52:	6033      	str	r3, [r6, #0]
 8008f54:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008f58:	81a3      	strh	r3, [r4, #12]
 8008f5a:	f04f 30ff 	mov.w	r0, #4294967295
 8008f5e:	e03e      	b.n	8008fde <__swsetup_r+0xba>
 8008f60:	4b25      	ldr	r3, [pc, #148]	; (8008ff8 <__swsetup_r+0xd4>)
 8008f62:	429c      	cmp	r4, r3
 8008f64:	d101      	bne.n	8008f6a <__swsetup_r+0x46>
 8008f66:	68ac      	ldr	r4, [r5, #8]
 8008f68:	e7eb      	b.n	8008f42 <__swsetup_r+0x1e>
 8008f6a:	4b24      	ldr	r3, [pc, #144]	; (8008ffc <__swsetup_r+0xd8>)
 8008f6c:	429c      	cmp	r4, r3
 8008f6e:	bf08      	it	eq
 8008f70:	68ec      	ldreq	r4, [r5, #12]
 8008f72:	e7e6      	b.n	8008f42 <__swsetup_r+0x1e>
 8008f74:	0758      	lsls	r0, r3, #29
 8008f76:	d512      	bpl.n	8008f9e <__swsetup_r+0x7a>
 8008f78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f7a:	b141      	cbz	r1, 8008f8e <__swsetup_r+0x6a>
 8008f7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f80:	4299      	cmp	r1, r3
 8008f82:	d002      	beq.n	8008f8a <__swsetup_r+0x66>
 8008f84:	4630      	mov	r0, r6
 8008f86:	f7ff fa41 	bl	800840c <_free_r>
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	6363      	str	r3, [r4, #52]	; 0x34
 8008f8e:	89a3      	ldrh	r3, [r4, #12]
 8008f90:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008f94:	81a3      	strh	r3, [r4, #12]
 8008f96:	2300      	movs	r3, #0
 8008f98:	6063      	str	r3, [r4, #4]
 8008f9a:	6923      	ldr	r3, [r4, #16]
 8008f9c:	6023      	str	r3, [r4, #0]
 8008f9e:	89a3      	ldrh	r3, [r4, #12]
 8008fa0:	f043 0308 	orr.w	r3, r3, #8
 8008fa4:	81a3      	strh	r3, [r4, #12]
 8008fa6:	6923      	ldr	r3, [r4, #16]
 8008fa8:	b94b      	cbnz	r3, 8008fbe <__swsetup_r+0x9a>
 8008faa:	89a3      	ldrh	r3, [r4, #12]
 8008fac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008fb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008fb4:	d003      	beq.n	8008fbe <__swsetup_r+0x9a>
 8008fb6:	4621      	mov	r1, r4
 8008fb8:	4630      	mov	r0, r6
 8008fba:	f000 fa09 	bl	80093d0 <__smakebuf_r>
 8008fbe:	89a0      	ldrh	r0, [r4, #12]
 8008fc0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008fc4:	f010 0301 	ands.w	r3, r0, #1
 8008fc8:	d00a      	beq.n	8008fe0 <__swsetup_r+0xbc>
 8008fca:	2300      	movs	r3, #0
 8008fcc:	60a3      	str	r3, [r4, #8]
 8008fce:	6963      	ldr	r3, [r4, #20]
 8008fd0:	425b      	negs	r3, r3
 8008fd2:	61a3      	str	r3, [r4, #24]
 8008fd4:	6923      	ldr	r3, [r4, #16]
 8008fd6:	b943      	cbnz	r3, 8008fea <__swsetup_r+0xc6>
 8008fd8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008fdc:	d1ba      	bne.n	8008f54 <__swsetup_r+0x30>
 8008fde:	bd70      	pop	{r4, r5, r6, pc}
 8008fe0:	0781      	lsls	r1, r0, #30
 8008fe2:	bf58      	it	pl
 8008fe4:	6963      	ldrpl	r3, [r4, #20]
 8008fe6:	60a3      	str	r3, [r4, #8]
 8008fe8:	e7f4      	b.n	8008fd4 <__swsetup_r+0xb0>
 8008fea:	2000      	movs	r0, #0
 8008fec:	e7f7      	b.n	8008fde <__swsetup_r+0xba>
 8008fee:	bf00      	nop
 8008ff0:	24000010 	.word	0x24000010
 8008ff4:	080099e0 	.word	0x080099e0
 8008ff8:	08009a00 	.word	0x08009a00
 8008ffc:	080099c0 	.word	0x080099c0

08009000 <abort>:
 8009000:	b508      	push	{r3, lr}
 8009002:	2006      	movs	r0, #6
 8009004:	f000 fab0 	bl	8009568 <raise>
 8009008:	2001      	movs	r0, #1
 800900a:	f7f8 f909 	bl	8001220 <_exit>
	...

08009010 <__sflush_r>:
 8009010:	898a      	ldrh	r2, [r1, #12]
 8009012:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009016:	4605      	mov	r5, r0
 8009018:	0710      	lsls	r0, r2, #28
 800901a:	460c      	mov	r4, r1
 800901c:	d458      	bmi.n	80090d0 <__sflush_r+0xc0>
 800901e:	684b      	ldr	r3, [r1, #4]
 8009020:	2b00      	cmp	r3, #0
 8009022:	dc05      	bgt.n	8009030 <__sflush_r+0x20>
 8009024:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009026:	2b00      	cmp	r3, #0
 8009028:	dc02      	bgt.n	8009030 <__sflush_r+0x20>
 800902a:	2000      	movs	r0, #0
 800902c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009030:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009032:	2e00      	cmp	r6, #0
 8009034:	d0f9      	beq.n	800902a <__sflush_r+0x1a>
 8009036:	2300      	movs	r3, #0
 8009038:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800903c:	682f      	ldr	r7, [r5, #0]
 800903e:	602b      	str	r3, [r5, #0]
 8009040:	d032      	beq.n	80090a8 <__sflush_r+0x98>
 8009042:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009044:	89a3      	ldrh	r3, [r4, #12]
 8009046:	075a      	lsls	r2, r3, #29
 8009048:	d505      	bpl.n	8009056 <__sflush_r+0x46>
 800904a:	6863      	ldr	r3, [r4, #4]
 800904c:	1ac0      	subs	r0, r0, r3
 800904e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009050:	b10b      	cbz	r3, 8009056 <__sflush_r+0x46>
 8009052:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009054:	1ac0      	subs	r0, r0, r3
 8009056:	2300      	movs	r3, #0
 8009058:	4602      	mov	r2, r0
 800905a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800905c:	6a21      	ldr	r1, [r4, #32]
 800905e:	4628      	mov	r0, r5
 8009060:	47b0      	blx	r6
 8009062:	1c43      	adds	r3, r0, #1
 8009064:	89a3      	ldrh	r3, [r4, #12]
 8009066:	d106      	bne.n	8009076 <__sflush_r+0x66>
 8009068:	6829      	ldr	r1, [r5, #0]
 800906a:	291d      	cmp	r1, #29
 800906c:	d82c      	bhi.n	80090c8 <__sflush_r+0xb8>
 800906e:	4a2a      	ldr	r2, [pc, #168]	; (8009118 <__sflush_r+0x108>)
 8009070:	40ca      	lsrs	r2, r1
 8009072:	07d6      	lsls	r6, r2, #31
 8009074:	d528      	bpl.n	80090c8 <__sflush_r+0xb8>
 8009076:	2200      	movs	r2, #0
 8009078:	6062      	str	r2, [r4, #4]
 800907a:	04d9      	lsls	r1, r3, #19
 800907c:	6922      	ldr	r2, [r4, #16]
 800907e:	6022      	str	r2, [r4, #0]
 8009080:	d504      	bpl.n	800908c <__sflush_r+0x7c>
 8009082:	1c42      	adds	r2, r0, #1
 8009084:	d101      	bne.n	800908a <__sflush_r+0x7a>
 8009086:	682b      	ldr	r3, [r5, #0]
 8009088:	b903      	cbnz	r3, 800908c <__sflush_r+0x7c>
 800908a:	6560      	str	r0, [r4, #84]	; 0x54
 800908c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800908e:	602f      	str	r7, [r5, #0]
 8009090:	2900      	cmp	r1, #0
 8009092:	d0ca      	beq.n	800902a <__sflush_r+0x1a>
 8009094:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009098:	4299      	cmp	r1, r3
 800909a:	d002      	beq.n	80090a2 <__sflush_r+0x92>
 800909c:	4628      	mov	r0, r5
 800909e:	f7ff f9b5 	bl	800840c <_free_r>
 80090a2:	2000      	movs	r0, #0
 80090a4:	6360      	str	r0, [r4, #52]	; 0x34
 80090a6:	e7c1      	b.n	800902c <__sflush_r+0x1c>
 80090a8:	6a21      	ldr	r1, [r4, #32]
 80090aa:	2301      	movs	r3, #1
 80090ac:	4628      	mov	r0, r5
 80090ae:	47b0      	blx	r6
 80090b0:	1c41      	adds	r1, r0, #1
 80090b2:	d1c7      	bne.n	8009044 <__sflush_r+0x34>
 80090b4:	682b      	ldr	r3, [r5, #0]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d0c4      	beq.n	8009044 <__sflush_r+0x34>
 80090ba:	2b1d      	cmp	r3, #29
 80090bc:	d001      	beq.n	80090c2 <__sflush_r+0xb2>
 80090be:	2b16      	cmp	r3, #22
 80090c0:	d101      	bne.n	80090c6 <__sflush_r+0xb6>
 80090c2:	602f      	str	r7, [r5, #0]
 80090c4:	e7b1      	b.n	800902a <__sflush_r+0x1a>
 80090c6:	89a3      	ldrh	r3, [r4, #12]
 80090c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090cc:	81a3      	strh	r3, [r4, #12]
 80090ce:	e7ad      	b.n	800902c <__sflush_r+0x1c>
 80090d0:	690f      	ldr	r7, [r1, #16]
 80090d2:	2f00      	cmp	r7, #0
 80090d4:	d0a9      	beq.n	800902a <__sflush_r+0x1a>
 80090d6:	0793      	lsls	r3, r2, #30
 80090d8:	680e      	ldr	r6, [r1, #0]
 80090da:	bf08      	it	eq
 80090dc:	694b      	ldreq	r3, [r1, #20]
 80090de:	600f      	str	r7, [r1, #0]
 80090e0:	bf18      	it	ne
 80090e2:	2300      	movne	r3, #0
 80090e4:	eba6 0807 	sub.w	r8, r6, r7
 80090e8:	608b      	str	r3, [r1, #8]
 80090ea:	f1b8 0f00 	cmp.w	r8, #0
 80090ee:	dd9c      	ble.n	800902a <__sflush_r+0x1a>
 80090f0:	6a21      	ldr	r1, [r4, #32]
 80090f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80090f4:	4643      	mov	r3, r8
 80090f6:	463a      	mov	r2, r7
 80090f8:	4628      	mov	r0, r5
 80090fa:	47b0      	blx	r6
 80090fc:	2800      	cmp	r0, #0
 80090fe:	dc06      	bgt.n	800910e <__sflush_r+0xfe>
 8009100:	89a3      	ldrh	r3, [r4, #12]
 8009102:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009106:	81a3      	strh	r3, [r4, #12]
 8009108:	f04f 30ff 	mov.w	r0, #4294967295
 800910c:	e78e      	b.n	800902c <__sflush_r+0x1c>
 800910e:	4407      	add	r7, r0
 8009110:	eba8 0800 	sub.w	r8, r8, r0
 8009114:	e7e9      	b.n	80090ea <__sflush_r+0xda>
 8009116:	bf00      	nop
 8009118:	20400001 	.word	0x20400001

0800911c <_fflush_r>:
 800911c:	b538      	push	{r3, r4, r5, lr}
 800911e:	690b      	ldr	r3, [r1, #16]
 8009120:	4605      	mov	r5, r0
 8009122:	460c      	mov	r4, r1
 8009124:	b913      	cbnz	r3, 800912c <_fflush_r+0x10>
 8009126:	2500      	movs	r5, #0
 8009128:	4628      	mov	r0, r5
 800912a:	bd38      	pop	{r3, r4, r5, pc}
 800912c:	b118      	cbz	r0, 8009136 <_fflush_r+0x1a>
 800912e:	6983      	ldr	r3, [r0, #24]
 8009130:	b90b      	cbnz	r3, 8009136 <_fflush_r+0x1a>
 8009132:	f000 f887 	bl	8009244 <__sinit>
 8009136:	4b14      	ldr	r3, [pc, #80]	; (8009188 <_fflush_r+0x6c>)
 8009138:	429c      	cmp	r4, r3
 800913a:	d11b      	bne.n	8009174 <_fflush_r+0x58>
 800913c:	686c      	ldr	r4, [r5, #4]
 800913e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d0ef      	beq.n	8009126 <_fflush_r+0xa>
 8009146:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009148:	07d0      	lsls	r0, r2, #31
 800914a:	d404      	bmi.n	8009156 <_fflush_r+0x3a>
 800914c:	0599      	lsls	r1, r3, #22
 800914e:	d402      	bmi.n	8009156 <_fflush_r+0x3a>
 8009150:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009152:	f000 f915 	bl	8009380 <__retarget_lock_acquire_recursive>
 8009156:	4628      	mov	r0, r5
 8009158:	4621      	mov	r1, r4
 800915a:	f7ff ff59 	bl	8009010 <__sflush_r>
 800915e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009160:	07da      	lsls	r2, r3, #31
 8009162:	4605      	mov	r5, r0
 8009164:	d4e0      	bmi.n	8009128 <_fflush_r+0xc>
 8009166:	89a3      	ldrh	r3, [r4, #12]
 8009168:	059b      	lsls	r3, r3, #22
 800916a:	d4dd      	bmi.n	8009128 <_fflush_r+0xc>
 800916c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800916e:	f000 f908 	bl	8009382 <__retarget_lock_release_recursive>
 8009172:	e7d9      	b.n	8009128 <_fflush_r+0xc>
 8009174:	4b05      	ldr	r3, [pc, #20]	; (800918c <_fflush_r+0x70>)
 8009176:	429c      	cmp	r4, r3
 8009178:	d101      	bne.n	800917e <_fflush_r+0x62>
 800917a:	68ac      	ldr	r4, [r5, #8]
 800917c:	e7df      	b.n	800913e <_fflush_r+0x22>
 800917e:	4b04      	ldr	r3, [pc, #16]	; (8009190 <_fflush_r+0x74>)
 8009180:	429c      	cmp	r4, r3
 8009182:	bf08      	it	eq
 8009184:	68ec      	ldreq	r4, [r5, #12]
 8009186:	e7da      	b.n	800913e <_fflush_r+0x22>
 8009188:	080099e0 	.word	0x080099e0
 800918c:	08009a00 	.word	0x08009a00
 8009190:	080099c0 	.word	0x080099c0

08009194 <std>:
 8009194:	2300      	movs	r3, #0
 8009196:	b510      	push	{r4, lr}
 8009198:	4604      	mov	r4, r0
 800919a:	e9c0 3300 	strd	r3, r3, [r0]
 800919e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80091a2:	6083      	str	r3, [r0, #8]
 80091a4:	8181      	strh	r1, [r0, #12]
 80091a6:	6643      	str	r3, [r0, #100]	; 0x64
 80091a8:	81c2      	strh	r2, [r0, #14]
 80091aa:	6183      	str	r3, [r0, #24]
 80091ac:	4619      	mov	r1, r3
 80091ae:	2208      	movs	r2, #8
 80091b0:	305c      	adds	r0, #92	; 0x5c
 80091b2:	f7ff f85f 	bl	8008274 <memset>
 80091b6:	4b05      	ldr	r3, [pc, #20]	; (80091cc <std+0x38>)
 80091b8:	6263      	str	r3, [r4, #36]	; 0x24
 80091ba:	4b05      	ldr	r3, [pc, #20]	; (80091d0 <std+0x3c>)
 80091bc:	62a3      	str	r3, [r4, #40]	; 0x28
 80091be:	4b05      	ldr	r3, [pc, #20]	; (80091d4 <std+0x40>)
 80091c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80091c2:	4b05      	ldr	r3, [pc, #20]	; (80091d8 <std+0x44>)
 80091c4:	6224      	str	r4, [r4, #32]
 80091c6:	6323      	str	r3, [r4, #48]	; 0x30
 80091c8:	bd10      	pop	{r4, pc}
 80091ca:	bf00      	nop
 80091cc:	080095a1 	.word	0x080095a1
 80091d0:	080095c3 	.word	0x080095c3
 80091d4:	080095fb 	.word	0x080095fb
 80091d8:	0800961f 	.word	0x0800961f

080091dc <_cleanup_r>:
 80091dc:	4901      	ldr	r1, [pc, #4]	; (80091e4 <_cleanup_r+0x8>)
 80091de:	f000 b8af 	b.w	8009340 <_fwalk_reent>
 80091e2:	bf00      	nop
 80091e4:	0800911d 	.word	0x0800911d

080091e8 <__sfmoreglue>:
 80091e8:	b570      	push	{r4, r5, r6, lr}
 80091ea:	2268      	movs	r2, #104	; 0x68
 80091ec:	1e4d      	subs	r5, r1, #1
 80091ee:	4355      	muls	r5, r2
 80091f0:	460e      	mov	r6, r1
 80091f2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80091f6:	f7ff f975 	bl	80084e4 <_malloc_r>
 80091fa:	4604      	mov	r4, r0
 80091fc:	b140      	cbz	r0, 8009210 <__sfmoreglue+0x28>
 80091fe:	2100      	movs	r1, #0
 8009200:	e9c0 1600 	strd	r1, r6, [r0]
 8009204:	300c      	adds	r0, #12
 8009206:	60a0      	str	r0, [r4, #8]
 8009208:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800920c:	f7ff f832 	bl	8008274 <memset>
 8009210:	4620      	mov	r0, r4
 8009212:	bd70      	pop	{r4, r5, r6, pc}

08009214 <__sfp_lock_acquire>:
 8009214:	4801      	ldr	r0, [pc, #4]	; (800921c <__sfp_lock_acquire+0x8>)
 8009216:	f000 b8b3 	b.w	8009380 <__retarget_lock_acquire_recursive>
 800921a:	bf00      	nop
 800921c:	24000391 	.word	0x24000391

08009220 <__sfp_lock_release>:
 8009220:	4801      	ldr	r0, [pc, #4]	; (8009228 <__sfp_lock_release+0x8>)
 8009222:	f000 b8ae 	b.w	8009382 <__retarget_lock_release_recursive>
 8009226:	bf00      	nop
 8009228:	24000391 	.word	0x24000391

0800922c <__sinit_lock_acquire>:
 800922c:	4801      	ldr	r0, [pc, #4]	; (8009234 <__sinit_lock_acquire+0x8>)
 800922e:	f000 b8a7 	b.w	8009380 <__retarget_lock_acquire_recursive>
 8009232:	bf00      	nop
 8009234:	24000392 	.word	0x24000392

08009238 <__sinit_lock_release>:
 8009238:	4801      	ldr	r0, [pc, #4]	; (8009240 <__sinit_lock_release+0x8>)
 800923a:	f000 b8a2 	b.w	8009382 <__retarget_lock_release_recursive>
 800923e:	bf00      	nop
 8009240:	24000392 	.word	0x24000392

08009244 <__sinit>:
 8009244:	b510      	push	{r4, lr}
 8009246:	4604      	mov	r4, r0
 8009248:	f7ff fff0 	bl	800922c <__sinit_lock_acquire>
 800924c:	69a3      	ldr	r3, [r4, #24]
 800924e:	b11b      	cbz	r3, 8009258 <__sinit+0x14>
 8009250:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009254:	f7ff bff0 	b.w	8009238 <__sinit_lock_release>
 8009258:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800925c:	6523      	str	r3, [r4, #80]	; 0x50
 800925e:	4b13      	ldr	r3, [pc, #76]	; (80092ac <__sinit+0x68>)
 8009260:	4a13      	ldr	r2, [pc, #76]	; (80092b0 <__sinit+0x6c>)
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	62a2      	str	r2, [r4, #40]	; 0x28
 8009266:	42a3      	cmp	r3, r4
 8009268:	bf04      	itt	eq
 800926a:	2301      	moveq	r3, #1
 800926c:	61a3      	streq	r3, [r4, #24]
 800926e:	4620      	mov	r0, r4
 8009270:	f000 f820 	bl	80092b4 <__sfp>
 8009274:	6060      	str	r0, [r4, #4]
 8009276:	4620      	mov	r0, r4
 8009278:	f000 f81c 	bl	80092b4 <__sfp>
 800927c:	60a0      	str	r0, [r4, #8]
 800927e:	4620      	mov	r0, r4
 8009280:	f000 f818 	bl	80092b4 <__sfp>
 8009284:	2200      	movs	r2, #0
 8009286:	60e0      	str	r0, [r4, #12]
 8009288:	2104      	movs	r1, #4
 800928a:	6860      	ldr	r0, [r4, #4]
 800928c:	f7ff ff82 	bl	8009194 <std>
 8009290:	68a0      	ldr	r0, [r4, #8]
 8009292:	2201      	movs	r2, #1
 8009294:	2109      	movs	r1, #9
 8009296:	f7ff ff7d 	bl	8009194 <std>
 800929a:	68e0      	ldr	r0, [r4, #12]
 800929c:	2202      	movs	r2, #2
 800929e:	2112      	movs	r1, #18
 80092a0:	f7ff ff78 	bl	8009194 <std>
 80092a4:	2301      	movs	r3, #1
 80092a6:	61a3      	str	r3, [r4, #24]
 80092a8:	e7d2      	b.n	8009250 <__sinit+0xc>
 80092aa:	bf00      	nop
 80092ac:	080098d8 	.word	0x080098d8
 80092b0:	080091dd 	.word	0x080091dd

080092b4 <__sfp>:
 80092b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092b6:	4607      	mov	r7, r0
 80092b8:	f7ff ffac 	bl	8009214 <__sfp_lock_acquire>
 80092bc:	4b1e      	ldr	r3, [pc, #120]	; (8009338 <__sfp+0x84>)
 80092be:	681e      	ldr	r6, [r3, #0]
 80092c0:	69b3      	ldr	r3, [r6, #24]
 80092c2:	b913      	cbnz	r3, 80092ca <__sfp+0x16>
 80092c4:	4630      	mov	r0, r6
 80092c6:	f7ff ffbd 	bl	8009244 <__sinit>
 80092ca:	3648      	adds	r6, #72	; 0x48
 80092cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80092d0:	3b01      	subs	r3, #1
 80092d2:	d503      	bpl.n	80092dc <__sfp+0x28>
 80092d4:	6833      	ldr	r3, [r6, #0]
 80092d6:	b30b      	cbz	r3, 800931c <__sfp+0x68>
 80092d8:	6836      	ldr	r6, [r6, #0]
 80092da:	e7f7      	b.n	80092cc <__sfp+0x18>
 80092dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80092e0:	b9d5      	cbnz	r5, 8009318 <__sfp+0x64>
 80092e2:	4b16      	ldr	r3, [pc, #88]	; (800933c <__sfp+0x88>)
 80092e4:	60e3      	str	r3, [r4, #12]
 80092e6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80092ea:	6665      	str	r5, [r4, #100]	; 0x64
 80092ec:	f000 f847 	bl	800937e <__retarget_lock_init_recursive>
 80092f0:	f7ff ff96 	bl	8009220 <__sfp_lock_release>
 80092f4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80092f8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80092fc:	6025      	str	r5, [r4, #0]
 80092fe:	61a5      	str	r5, [r4, #24]
 8009300:	2208      	movs	r2, #8
 8009302:	4629      	mov	r1, r5
 8009304:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009308:	f7fe ffb4 	bl	8008274 <memset>
 800930c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009310:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009314:	4620      	mov	r0, r4
 8009316:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009318:	3468      	adds	r4, #104	; 0x68
 800931a:	e7d9      	b.n	80092d0 <__sfp+0x1c>
 800931c:	2104      	movs	r1, #4
 800931e:	4638      	mov	r0, r7
 8009320:	f7ff ff62 	bl	80091e8 <__sfmoreglue>
 8009324:	4604      	mov	r4, r0
 8009326:	6030      	str	r0, [r6, #0]
 8009328:	2800      	cmp	r0, #0
 800932a:	d1d5      	bne.n	80092d8 <__sfp+0x24>
 800932c:	f7ff ff78 	bl	8009220 <__sfp_lock_release>
 8009330:	230c      	movs	r3, #12
 8009332:	603b      	str	r3, [r7, #0]
 8009334:	e7ee      	b.n	8009314 <__sfp+0x60>
 8009336:	bf00      	nop
 8009338:	080098d8 	.word	0x080098d8
 800933c:	ffff0001 	.word	0xffff0001

08009340 <_fwalk_reent>:
 8009340:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009344:	4606      	mov	r6, r0
 8009346:	4688      	mov	r8, r1
 8009348:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800934c:	2700      	movs	r7, #0
 800934e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009352:	f1b9 0901 	subs.w	r9, r9, #1
 8009356:	d505      	bpl.n	8009364 <_fwalk_reent+0x24>
 8009358:	6824      	ldr	r4, [r4, #0]
 800935a:	2c00      	cmp	r4, #0
 800935c:	d1f7      	bne.n	800934e <_fwalk_reent+0xe>
 800935e:	4638      	mov	r0, r7
 8009360:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009364:	89ab      	ldrh	r3, [r5, #12]
 8009366:	2b01      	cmp	r3, #1
 8009368:	d907      	bls.n	800937a <_fwalk_reent+0x3a>
 800936a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800936e:	3301      	adds	r3, #1
 8009370:	d003      	beq.n	800937a <_fwalk_reent+0x3a>
 8009372:	4629      	mov	r1, r5
 8009374:	4630      	mov	r0, r6
 8009376:	47c0      	blx	r8
 8009378:	4307      	orrs	r7, r0
 800937a:	3568      	adds	r5, #104	; 0x68
 800937c:	e7e9      	b.n	8009352 <_fwalk_reent+0x12>

0800937e <__retarget_lock_init_recursive>:
 800937e:	4770      	bx	lr

08009380 <__retarget_lock_acquire_recursive>:
 8009380:	4770      	bx	lr

08009382 <__retarget_lock_release_recursive>:
 8009382:	4770      	bx	lr

08009384 <__swhatbuf_r>:
 8009384:	b570      	push	{r4, r5, r6, lr}
 8009386:	460e      	mov	r6, r1
 8009388:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800938c:	2900      	cmp	r1, #0
 800938e:	b096      	sub	sp, #88	; 0x58
 8009390:	4614      	mov	r4, r2
 8009392:	461d      	mov	r5, r3
 8009394:	da08      	bge.n	80093a8 <__swhatbuf_r+0x24>
 8009396:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800939a:	2200      	movs	r2, #0
 800939c:	602a      	str	r2, [r5, #0]
 800939e:	061a      	lsls	r2, r3, #24
 80093a0:	d410      	bmi.n	80093c4 <__swhatbuf_r+0x40>
 80093a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80093a6:	e00e      	b.n	80093c6 <__swhatbuf_r+0x42>
 80093a8:	466a      	mov	r2, sp
 80093aa:	f000 f95f 	bl	800966c <_fstat_r>
 80093ae:	2800      	cmp	r0, #0
 80093b0:	dbf1      	blt.n	8009396 <__swhatbuf_r+0x12>
 80093b2:	9a01      	ldr	r2, [sp, #4]
 80093b4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80093b8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80093bc:	425a      	negs	r2, r3
 80093be:	415a      	adcs	r2, r3
 80093c0:	602a      	str	r2, [r5, #0]
 80093c2:	e7ee      	b.n	80093a2 <__swhatbuf_r+0x1e>
 80093c4:	2340      	movs	r3, #64	; 0x40
 80093c6:	2000      	movs	r0, #0
 80093c8:	6023      	str	r3, [r4, #0]
 80093ca:	b016      	add	sp, #88	; 0x58
 80093cc:	bd70      	pop	{r4, r5, r6, pc}
	...

080093d0 <__smakebuf_r>:
 80093d0:	898b      	ldrh	r3, [r1, #12]
 80093d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80093d4:	079d      	lsls	r5, r3, #30
 80093d6:	4606      	mov	r6, r0
 80093d8:	460c      	mov	r4, r1
 80093da:	d507      	bpl.n	80093ec <__smakebuf_r+0x1c>
 80093dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80093e0:	6023      	str	r3, [r4, #0]
 80093e2:	6123      	str	r3, [r4, #16]
 80093e4:	2301      	movs	r3, #1
 80093e6:	6163      	str	r3, [r4, #20]
 80093e8:	b002      	add	sp, #8
 80093ea:	bd70      	pop	{r4, r5, r6, pc}
 80093ec:	ab01      	add	r3, sp, #4
 80093ee:	466a      	mov	r2, sp
 80093f0:	f7ff ffc8 	bl	8009384 <__swhatbuf_r>
 80093f4:	9900      	ldr	r1, [sp, #0]
 80093f6:	4605      	mov	r5, r0
 80093f8:	4630      	mov	r0, r6
 80093fa:	f7ff f873 	bl	80084e4 <_malloc_r>
 80093fe:	b948      	cbnz	r0, 8009414 <__smakebuf_r+0x44>
 8009400:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009404:	059a      	lsls	r2, r3, #22
 8009406:	d4ef      	bmi.n	80093e8 <__smakebuf_r+0x18>
 8009408:	f023 0303 	bic.w	r3, r3, #3
 800940c:	f043 0302 	orr.w	r3, r3, #2
 8009410:	81a3      	strh	r3, [r4, #12]
 8009412:	e7e3      	b.n	80093dc <__smakebuf_r+0xc>
 8009414:	4b0d      	ldr	r3, [pc, #52]	; (800944c <__smakebuf_r+0x7c>)
 8009416:	62b3      	str	r3, [r6, #40]	; 0x28
 8009418:	89a3      	ldrh	r3, [r4, #12]
 800941a:	6020      	str	r0, [r4, #0]
 800941c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009420:	81a3      	strh	r3, [r4, #12]
 8009422:	9b00      	ldr	r3, [sp, #0]
 8009424:	6163      	str	r3, [r4, #20]
 8009426:	9b01      	ldr	r3, [sp, #4]
 8009428:	6120      	str	r0, [r4, #16]
 800942a:	b15b      	cbz	r3, 8009444 <__smakebuf_r+0x74>
 800942c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009430:	4630      	mov	r0, r6
 8009432:	f000 f92d 	bl	8009690 <_isatty_r>
 8009436:	b128      	cbz	r0, 8009444 <__smakebuf_r+0x74>
 8009438:	89a3      	ldrh	r3, [r4, #12]
 800943a:	f023 0303 	bic.w	r3, r3, #3
 800943e:	f043 0301 	orr.w	r3, r3, #1
 8009442:	81a3      	strh	r3, [r4, #12]
 8009444:	89a0      	ldrh	r0, [r4, #12]
 8009446:	4305      	orrs	r5, r0
 8009448:	81a5      	strh	r5, [r4, #12]
 800944a:	e7cd      	b.n	80093e8 <__smakebuf_r+0x18>
 800944c:	080091dd 	.word	0x080091dd

08009450 <memcpy>:
 8009450:	440a      	add	r2, r1
 8009452:	4291      	cmp	r1, r2
 8009454:	f100 33ff 	add.w	r3, r0, #4294967295
 8009458:	d100      	bne.n	800945c <memcpy+0xc>
 800945a:	4770      	bx	lr
 800945c:	b510      	push	{r4, lr}
 800945e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009462:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009466:	4291      	cmp	r1, r2
 8009468:	d1f9      	bne.n	800945e <memcpy+0xe>
 800946a:	bd10      	pop	{r4, pc}

0800946c <memmove>:
 800946c:	4288      	cmp	r0, r1
 800946e:	b510      	push	{r4, lr}
 8009470:	eb01 0402 	add.w	r4, r1, r2
 8009474:	d902      	bls.n	800947c <memmove+0x10>
 8009476:	4284      	cmp	r4, r0
 8009478:	4623      	mov	r3, r4
 800947a:	d807      	bhi.n	800948c <memmove+0x20>
 800947c:	1e43      	subs	r3, r0, #1
 800947e:	42a1      	cmp	r1, r4
 8009480:	d008      	beq.n	8009494 <memmove+0x28>
 8009482:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009486:	f803 2f01 	strb.w	r2, [r3, #1]!
 800948a:	e7f8      	b.n	800947e <memmove+0x12>
 800948c:	4402      	add	r2, r0
 800948e:	4601      	mov	r1, r0
 8009490:	428a      	cmp	r2, r1
 8009492:	d100      	bne.n	8009496 <memmove+0x2a>
 8009494:	bd10      	pop	{r4, pc}
 8009496:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800949a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800949e:	e7f7      	b.n	8009490 <memmove+0x24>

080094a0 <__malloc_lock>:
 80094a0:	4801      	ldr	r0, [pc, #4]	; (80094a8 <__malloc_lock+0x8>)
 80094a2:	f7ff bf6d 	b.w	8009380 <__retarget_lock_acquire_recursive>
 80094a6:	bf00      	nop
 80094a8:	24000390 	.word	0x24000390

080094ac <__malloc_unlock>:
 80094ac:	4801      	ldr	r0, [pc, #4]	; (80094b4 <__malloc_unlock+0x8>)
 80094ae:	f7ff bf68 	b.w	8009382 <__retarget_lock_release_recursive>
 80094b2:	bf00      	nop
 80094b4:	24000390 	.word	0x24000390

080094b8 <_realloc_r>:
 80094b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094bc:	4680      	mov	r8, r0
 80094be:	4614      	mov	r4, r2
 80094c0:	460e      	mov	r6, r1
 80094c2:	b921      	cbnz	r1, 80094ce <_realloc_r+0x16>
 80094c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80094c8:	4611      	mov	r1, r2
 80094ca:	f7ff b80b 	b.w	80084e4 <_malloc_r>
 80094ce:	b92a      	cbnz	r2, 80094dc <_realloc_r+0x24>
 80094d0:	f7fe ff9c 	bl	800840c <_free_r>
 80094d4:	4625      	mov	r5, r4
 80094d6:	4628      	mov	r0, r5
 80094d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094dc:	f000 f8fa 	bl	80096d4 <_malloc_usable_size_r>
 80094e0:	4284      	cmp	r4, r0
 80094e2:	4607      	mov	r7, r0
 80094e4:	d802      	bhi.n	80094ec <_realloc_r+0x34>
 80094e6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80094ea:	d812      	bhi.n	8009512 <_realloc_r+0x5a>
 80094ec:	4621      	mov	r1, r4
 80094ee:	4640      	mov	r0, r8
 80094f0:	f7fe fff8 	bl	80084e4 <_malloc_r>
 80094f4:	4605      	mov	r5, r0
 80094f6:	2800      	cmp	r0, #0
 80094f8:	d0ed      	beq.n	80094d6 <_realloc_r+0x1e>
 80094fa:	42bc      	cmp	r4, r7
 80094fc:	4622      	mov	r2, r4
 80094fe:	4631      	mov	r1, r6
 8009500:	bf28      	it	cs
 8009502:	463a      	movcs	r2, r7
 8009504:	f7ff ffa4 	bl	8009450 <memcpy>
 8009508:	4631      	mov	r1, r6
 800950a:	4640      	mov	r0, r8
 800950c:	f7fe ff7e 	bl	800840c <_free_r>
 8009510:	e7e1      	b.n	80094d6 <_realloc_r+0x1e>
 8009512:	4635      	mov	r5, r6
 8009514:	e7df      	b.n	80094d6 <_realloc_r+0x1e>

08009516 <_raise_r>:
 8009516:	291f      	cmp	r1, #31
 8009518:	b538      	push	{r3, r4, r5, lr}
 800951a:	4604      	mov	r4, r0
 800951c:	460d      	mov	r5, r1
 800951e:	d904      	bls.n	800952a <_raise_r+0x14>
 8009520:	2316      	movs	r3, #22
 8009522:	6003      	str	r3, [r0, #0]
 8009524:	f04f 30ff 	mov.w	r0, #4294967295
 8009528:	bd38      	pop	{r3, r4, r5, pc}
 800952a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800952c:	b112      	cbz	r2, 8009534 <_raise_r+0x1e>
 800952e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009532:	b94b      	cbnz	r3, 8009548 <_raise_r+0x32>
 8009534:	4620      	mov	r0, r4
 8009536:	f000 f831 	bl	800959c <_getpid_r>
 800953a:	462a      	mov	r2, r5
 800953c:	4601      	mov	r1, r0
 800953e:	4620      	mov	r0, r4
 8009540:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009544:	f000 b818 	b.w	8009578 <_kill_r>
 8009548:	2b01      	cmp	r3, #1
 800954a:	d00a      	beq.n	8009562 <_raise_r+0x4c>
 800954c:	1c59      	adds	r1, r3, #1
 800954e:	d103      	bne.n	8009558 <_raise_r+0x42>
 8009550:	2316      	movs	r3, #22
 8009552:	6003      	str	r3, [r0, #0]
 8009554:	2001      	movs	r0, #1
 8009556:	e7e7      	b.n	8009528 <_raise_r+0x12>
 8009558:	2400      	movs	r4, #0
 800955a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800955e:	4628      	mov	r0, r5
 8009560:	4798      	blx	r3
 8009562:	2000      	movs	r0, #0
 8009564:	e7e0      	b.n	8009528 <_raise_r+0x12>
	...

08009568 <raise>:
 8009568:	4b02      	ldr	r3, [pc, #8]	; (8009574 <raise+0xc>)
 800956a:	4601      	mov	r1, r0
 800956c:	6818      	ldr	r0, [r3, #0]
 800956e:	f7ff bfd2 	b.w	8009516 <_raise_r>
 8009572:	bf00      	nop
 8009574:	24000010 	.word	0x24000010

08009578 <_kill_r>:
 8009578:	b538      	push	{r3, r4, r5, lr}
 800957a:	4d07      	ldr	r5, [pc, #28]	; (8009598 <_kill_r+0x20>)
 800957c:	2300      	movs	r3, #0
 800957e:	4604      	mov	r4, r0
 8009580:	4608      	mov	r0, r1
 8009582:	4611      	mov	r1, r2
 8009584:	602b      	str	r3, [r5, #0]
 8009586:	f7f7 fe3b 	bl	8001200 <_kill>
 800958a:	1c43      	adds	r3, r0, #1
 800958c:	d102      	bne.n	8009594 <_kill_r+0x1c>
 800958e:	682b      	ldr	r3, [r5, #0]
 8009590:	b103      	cbz	r3, 8009594 <_kill_r+0x1c>
 8009592:	6023      	str	r3, [r4, #0]
 8009594:	bd38      	pop	{r3, r4, r5, pc}
 8009596:	bf00      	nop
 8009598:	24000394 	.word	0x24000394

0800959c <_getpid_r>:
 800959c:	f7f7 be28 	b.w	80011f0 <_getpid>

080095a0 <__sread>:
 80095a0:	b510      	push	{r4, lr}
 80095a2:	460c      	mov	r4, r1
 80095a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095a8:	f000 f89c 	bl	80096e4 <_read_r>
 80095ac:	2800      	cmp	r0, #0
 80095ae:	bfab      	itete	ge
 80095b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80095b2:	89a3      	ldrhlt	r3, [r4, #12]
 80095b4:	181b      	addge	r3, r3, r0
 80095b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80095ba:	bfac      	ite	ge
 80095bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80095be:	81a3      	strhlt	r3, [r4, #12]
 80095c0:	bd10      	pop	{r4, pc}

080095c2 <__swrite>:
 80095c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095c6:	461f      	mov	r7, r3
 80095c8:	898b      	ldrh	r3, [r1, #12]
 80095ca:	05db      	lsls	r3, r3, #23
 80095cc:	4605      	mov	r5, r0
 80095ce:	460c      	mov	r4, r1
 80095d0:	4616      	mov	r6, r2
 80095d2:	d505      	bpl.n	80095e0 <__swrite+0x1e>
 80095d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095d8:	2302      	movs	r3, #2
 80095da:	2200      	movs	r2, #0
 80095dc:	f000 f868 	bl	80096b0 <_lseek_r>
 80095e0:	89a3      	ldrh	r3, [r4, #12]
 80095e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80095e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80095ea:	81a3      	strh	r3, [r4, #12]
 80095ec:	4632      	mov	r2, r6
 80095ee:	463b      	mov	r3, r7
 80095f0:	4628      	mov	r0, r5
 80095f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80095f6:	f000 b817 	b.w	8009628 <_write_r>

080095fa <__sseek>:
 80095fa:	b510      	push	{r4, lr}
 80095fc:	460c      	mov	r4, r1
 80095fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009602:	f000 f855 	bl	80096b0 <_lseek_r>
 8009606:	1c43      	adds	r3, r0, #1
 8009608:	89a3      	ldrh	r3, [r4, #12]
 800960a:	bf15      	itete	ne
 800960c:	6560      	strne	r0, [r4, #84]	; 0x54
 800960e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009612:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009616:	81a3      	strheq	r3, [r4, #12]
 8009618:	bf18      	it	ne
 800961a:	81a3      	strhne	r3, [r4, #12]
 800961c:	bd10      	pop	{r4, pc}

0800961e <__sclose>:
 800961e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009622:	f000 b813 	b.w	800964c <_close_r>
	...

08009628 <_write_r>:
 8009628:	b538      	push	{r3, r4, r5, lr}
 800962a:	4d07      	ldr	r5, [pc, #28]	; (8009648 <_write_r+0x20>)
 800962c:	4604      	mov	r4, r0
 800962e:	4608      	mov	r0, r1
 8009630:	4611      	mov	r1, r2
 8009632:	2200      	movs	r2, #0
 8009634:	602a      	str	r2, [r5, #0]
 8009636:	461a      	mov	r2, r3
 8009638:	f7f7 fe19 	bl	800126e <_write>
 800963c:	1c43      	adds	r3, r0, #1
 800963e:	d102      	bne.n	8009646 <_write_r+0x1e>
 8009640:	682b      	ldr	r3, [r5, #0]
 8009642:	b103      	cbz	r3, 8009646 <_write_r+0x1e>
 8009644:	6023      	str	r3, [r4, #0]
 8009646:	bd38      	pop	{r3, r4, r5, pc}
 8009648:	24000394 	.word	0x24000394

0800964c <_close_r>:
 800964c:	b538      	push	{r3, r4, r5, lr}
 800964e:	4d06      	ldr	r5, [pc, #24]	; (8009668 <_close_r+0x1c>)
 8009650:	2300      	movs	r3, #0
 8009652:	4604      	mov	r4, r0
 8009654:	4608      	mov	r0, r1
 8009656:	602b      	str	r3, [r5, #0]
 8009658:	f7f7 fe25 	bl	80012a6 <_close>
 800965c:	1c43      	adds	r3, r0, #1
 800965e:	d102      	bne.n	8009666 <_close_r+0x1a>
 8009660:	682b      	ldr	r3, [r5, #0]
 8009662:	b103      	cbz	r3, 8009666 <_close_r+0x1a>
 8009664:	6023      	str	r3, [r4, #0]
 8009666:	bd38      	pop	{r3, r4, r5, pc}
 8009668:	24000394 	.word	0x24000394

0800966c <_fstat_r>:
 800966c:	b538      	push	{r3, r4, r5, lr}
 800966e:	4d07      	ldr	r5, [pc, #28]	; (800968c <_fstat_r+0x20>)
 8009670:	2300      	movs	r3, #0
 8009672:	4604      	mov	r4, r0
 8009674:	4608      	mov	r0, r1
 8009676:	4611      	mov	r1, r2
 8009678:	602b      	str	r3, [r5, #0]
 800967a:	f7f7 fe20 	bl	80012be <_fstat>
 800967e:	1c43      	adds	r3, r0, #1
 8009680:	d102      	bne.n	8009688 <_fstat_r+0x1c>
 8009682:	682b      	ldr	r3, [r5, #0]
 8009684:	b103      	cbz	r3, 8009688 <_fstat_r+0x1c>
 8009686:	6023      	str	r3, [r4, #0]
 8009688:	bd38      	pop	{r3, r4, r5, pc}
 800968a:	bf00      	nop
 800968c:	24000394 	.word	0x24000394

08009690 <_isatty_r>:
 8009690:	b538      	push	{r3, r4, r5, lr}
 8009692:	4d06      	ldr	r5, [pc, #24]	; (80096ac <_isatty_r+0x1c>)
 8009694:	2300      	movs	r3, #0
 8009696:	4604      	mov	r4, r0
 8009698:	4608      	mov	r0, r1
 800969a:	602b      	str	r3, [r5, #0]
 800969c:	f7f7 fe1f 	bl	80012de <_isatty>
 80096a0:	1c43      	adds	r3, r0, #1
 80096a2:	d102      	bne.n	80096aa <_isatty_r+0x1a>
 80096a4:	682b      	ldr	r3, [r5, #0]
 80096a6:	b103      	cbz	r3, 80096aa <_isatty_r+0x1a>
 80096a8:	6023      	str	r3, [r4, #0]
 80096aa:	bd38      	pop	{r3, r4, r5, pc}
 80096ac:	24000394 	.word	0x24000394

080096b0 <_lseek_r>:
 80096b0:	b538      	push	{r3, r4, r5, lr}
 80096b2:	4d07      	ldr	r5, [pc, #28]	; (80096d0 <_lseek_r+0x20>)
 80096b4:	4604      	mov	r4, r0
 80096b6:	4608      	mov	r0, r1
 80096b8:	4611      	mov	r1, r2
 80096ba:	2200      	movs	r2, #0
 80096bc:	602a      	str	r2, [r5, #0]
 80096be:	461a      	mov	r2, r3
 80096c0:	f7f7 fe18 	bl	80012f4 <_lseek>
 80096c4:	1c43      	adds	r3, r0, #1
 80096c6:	d102      	bne.n	80096ce <_lseek_r+0x1e>
 80096c8:	682b      	ldr	r3, [r5, #0]
 80096ca:	b103      	cbz	r3, 80096ce <_lseek_r+0x1e>
 80096cc:	6023      	str	r3, [r4, #0]
 80096ce:	bd38      	pop	{r3, r4, r5, pc}
 80096d0:	24000394 	.word	0x24000394

080096d4 <_malloc_usable_size_r>:
 80096d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80096d8:	1f18      	subs	r0, r3, #4
 80096da:	2b00      	cmp	r3, #0
 80096dc:	bfbc      	itt	lt
 80096de:	580b      	ldrlt	r3, [r1, r0]
 80096e0:	18c0      	addlt	r0, r0, r3
 80096e2:	4770      	bx	lr

080096e4 <_read_r>:
 80096e4:	b538      	push	{r3, r4, r5, lr}
 80096e6:	4d07      	ldr	r5, [pc, #28]	; (8009704 <_read_r+0x20>)
 80096e8:	4604      	mov	r4, r0
 80096ea:	4608      	mov	r0, r1
 80096ec:	4611      	mov	r1, r2
 80096ee:	2200      	movs	r2, #0
 80096f0:	602a      	str	r2, [r5, #0]
 80096f2:	461a      	mov	r2, r3
 80096f4:	f7f7 fd9e 	bl	8001234 <_read>
 80096f8:	1c43      	adds	r3, r0, #1
 80096fa:	d102      	bne.n	8009702 <_read_r+0x1e>
 80096fc:	682b      	ldr	r3, [r5, #0]
 80096fe:	b103      	cbz	r3, 8009702 <_read_r+0x1e>
 8009700:	6023      	str	r3, [r4, #0]
 8009702:	bd38      	pop	{r3, r4, r5, pc}
 8009704:	24000394 	.word	0x24000394

08009708 <_init>:
 8009708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800970a:	bf00      	nop
 800970c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800970e:	bc08      	pop	{r3}
 8009710:	469e      	mov	lr, r3
 8009712:	4770      	bx	lr

08009714 <_fini>:
 8009714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009716:	bf00      	nop
 8009718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800971a:	bc08      	pop	{r3}
 800971c:	469e      	mov	lr, r3
 800971e:	4770      	bx	lr
